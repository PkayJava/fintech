DROP TRIGGER IF EXISTS acc_accounting_rule_d;
CREATE TRIGGER `acc_accounting_rule_d`
BEFORE DELETE
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_accounting_rule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_debits', OLD.allow_multiple_debits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_credits', OLD.allow_multiple_credits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NULL);
  END;
DROP TRIGGER IF EXISTS acc_accounting_rule_i;
CREATE TRIGGER `acc_accounting_rule_i`
AFTER INSERT
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_accounting_rule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_debits', NEW.allow_multiple_debits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_credits', NEW.allow_multiple_credits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'system_defined', NEW.system_defined, NULL);
  END;
DROP TRIGGER IF EXISTS acc_accounting_rule_u;
CREATE TRIGGER `acc_accounting_rule_u`
AFTER UPDATE
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_accounting_rule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_debits', OLD.allow_multiple_debits, NEW.allow_multiple_debits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_credits', OLD.allow_multiple_credits, NEW.allow_multiple_credits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NEW.system_defined);
  END;
DROP TRIGGER IF EXISTS acc_gl_account_d;
CREATE TRIGGER `acc_gl_account_d`
BEFORE DELETE
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_gl_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_code', OLD.gl_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disabled', OLD.disabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', OLD.manual_journal_entries_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_usage', OLD.account_usage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'classification_enum', OLD.classification_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_account_i;
CREATE TRIGGER `acc_gl_account_i`
AFTER INSERT
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_gl_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_code', NEW.gl_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disabled', NEW.disabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', NEW.manual_journal_entries_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_usage', NEW.account_usage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'classification_enum', NEW.classification_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tag_id', NEW.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_account_u;
CREATE TRIGGER `acc_gl_account_u`
AFTER UPDATE
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_gl_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_code', OLD.gl_code, NEW.gl_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disabled', OLD.disabled, NEW.disabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', OLD.manual_journal_entries_allowed, NEW.manual_journal_entries_allowed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_usage', OLD.account_usage, NEW.account_usage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'classification_enum', OLD.classification_enum, NEW.classification_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NEW.tag_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS acc_gl_closure_d;
CREATE TRIGGER `acc_gl_closure_d`
BEFORE DELETE
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_gl_closure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closing_date', OLD.closing_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comments', OLD.comments, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_closure_i;
CREATE TRIGGER `acc_gl_closure_i`
AFTER INSERT
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_gl_closure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closing_date', NEW.closing_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'comments', NEW.comments, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_closure_u;
CREATE TRIGGER `acc_gl_closure_u`
AFTER UPDATE
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_gl_closure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closing_date', OLD.closing_date, NEW.closing_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comments', OLD.comments, NEW.comments);
  END;
DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_d;
CREATE TRIGGER `acc_gl_financial_activity_account_d`
BEFORE DELETE
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_gl_financial_activity_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_activity_type', OLD.financial_activity_type, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_i;
CREATE TRIGGER `acc_gl_financial_activity_account_i`
AFTER INSERT
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_gl_financial_activity_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_account_id', NEW.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'financial_activity_type', NEW.financial_activity_type, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_u;
CREATE TRIGGER `acc_gl_financial_activity_account_u`
AFTER UPDATE
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_gl_financial_activity_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NEW.gl_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_activity_type', OLD.financial_activity_type, NEW.financial_activity_type);
  END;
DROP TRIGGER IF EXISTS acc_gl_journal_entry_d;
CREATE TRIGGER `acc_gl_journal_entry_d`
BEFORE DELETE
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_gl_journal_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversal_id', OLD.reversal_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversed', OLD.reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ref_num', OLD.ref_num, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_entry', OLD.manual_entry, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entry_date', OLD.entry_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_running_balance_calculated', OLD.is_running_balance_calculated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_running_balance', OLD.office_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organization_running_balance', OLD.organization_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_details_id', OLD.payment_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_journal_entry_i;
CREATE TRIGGER `acc_gl_journal_entry_i`
AFTER INSERT
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_gl_journal_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reversal_id', NEW.reversal_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_id', NEW.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_transaction_id', NEW.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reversed', NEW.reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ref_num', NEW.ref_num, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manual_entry', NEW.manual_entry, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entry_date', NEW.entry_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type_enum', NEW.entity_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_running_balance_calculated', NEW.is_running_balance_calculated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_running_balance', NEW.office_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organization_running_balance', NEW.organization_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_details_id', NEW.payment_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_transaction_id', NEW.share_transaction_id, NULL);
  END;
DROP TRIGGER IF EXISTS acc_gl_journal_entry_u;
CREATE TRIGGER `acc_gl_journal_entry_u`
AFTER UPDATE
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_gl_journal_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversal_id', OLD.reversal_id, NEW.reversal_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NEW.transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NEW.client_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversed', OLD.reversed, NEW.reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ref_num', OLD.ref_num, NEW.ref_num);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_entry', OLD.manual_entry, NEW.manual_entry);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entry_date', OLD.entry_date, NEW.entry_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NEW.entity_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_running_balance_calculated', OLD.is_running_balance_calculated, NEW.is_running_balance_calculated);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_running_balance', OLD.office_running_balance, NEW.office_running_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organization_running_balance', OLD.organization_running_balance, NEW.organization_running_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_details_id', OLD.payment_details_id, NEW.payment_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NEW.share_transaction_id);
  END;
DROP TRIGGER IF EXISTS acc_product_mapping_d;
CREATE TRIGGER `acc_product_mapping_d`
BEFORE DELETE
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_product_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_type', OLD.product_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type', OLD.payment_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_account_type', OLD.financial_account_type, NULL);
  END;
DROP TRIGGER IF EXISTS acc_product_mapping_i;
CREATE TRIGGER `acc_product_mapping_i`
AFTER INSERT
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_product_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_account_id', NEW.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_type', NEW.product_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_type', NEW.payment_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'financial_account_type', NEW.financial_account_type, NULL);
  END;
DROP TRIGGER IF EXISTS acc_product_mapping_u;
CREATE TRIGGER `acc_product_mapping_u`
AFTER UPDATE
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_product_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NEW.gl_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_type', OLD.product_type, NEW.product_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type', OLD.payment_type, NEW.payment_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_account_type', OLD.financial_account_type, NEW.financial_account_type);
  END;
DROP TRIGGER IF EXISTS acc_rule_tags_d;
CREATE TRIGGER `acc_rule_tags_d`
BEFORE DELETE
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'acc_rule_tags');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_rule_id', OLD.acc_rule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_type_enum', OLD.acc_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS acc_rule_tags_i;
CREATE TRIGGER `acc_rule_tags_i`
AFTER INSERT
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'acc_rule_tags');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'acc_rule_id', NEW.acc_rule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tag_id', NEW.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'acc_type_enum', NEW.acc_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS acc_rule_tags_u;
CREATE TRIGGER `acc_rule_tags_u`
AFTER UPDATE
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'acc_rule_tags');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_rule_id', OLD.acc_rule_id, NEW.acc_rule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NEW.tag_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_type_enum', OLD.acc_type_enum, NEW.acc_type_enum);
  END;
DROP TRIGGER IF EXISTS c_account_number_format_d;
CREATE TRIGGER `c_account_number_format_d`
BEFORE DELETE
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'c_account_number_format');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix_type_enum', OLD.prefix_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS c_account_number_format_i;
CREATE TRIGGER `c_account_number_format_i`
AFTER INSERT
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'c_account_number_format');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type_enum', NEW.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'prefix_type_enum', NEW.prefix_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS c_account_number_format_u;
CREATE TRIGGER `c_account_number_format_u`
AFTER UPDATE
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'c_account_number_format');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NEW.account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix_type_enum', OLD.prefix_type_enum, NEW.prefix_type_enum);
  END;
DROP TRIGGER IF EXISTS c_cache_d;
CREATE TRIGGER `c_cache_d`
BEFORE DELETE
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'c_cache');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cache_type_enum', OLD.cache_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS c_cache_i;
CREATE TRIGGER `c_cache_i`
AFTER INSERT
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'c_cache');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cache_type_enum', NEW.cache_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS c_cache_u;
CREATE TRIGGER `c_cache_u`
AFTER UPDATE
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'c_cache');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cache_type_enum', OLD.cache_type_enum, NEW.cache_type_enum);
  END;
DROP TRIGGER IF EXISTS c_configuration_d;
CREATE TRIGGER `c_configuration_d`
BEFORE DELETE
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'c_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_trap_door', OLD.is_trap_door, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS c_configuration_i;
CREATE TRIGGER `c_configuration_i`
AFTER INSERT
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'c_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_value', NEW.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_trap_door', NEW.is_trap_door, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS c_configuration_u;
CREATE TRIGGER `c_configuration_u`
AFTER UPDATE
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'c_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NEW.date_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_trap_door', OLD.is_trap_door, NEW.is_trap_door);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS c_external_service_d;
CREATE TRIGGER `c_external_service_d`
BEFORE DELETE
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'c_external_service');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END;
DROP TRIGGER IF EXISTS c_external_service_i;
CREATE TRIGGER `c_external_service_i`
AFTER INSERT
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'c_external_service');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END;
DROP TRIGGER IF EXISTS c_external_service_u;
CREATE TRIGGER `c_external_service_u`
AFTER UPDATE
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'c_external_service');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END;
DROP TRIGGER IF EXISTS c_external_service_properties_d;
CREATE TRIGGER `c_external_service_properties_d`
BEFORE DELETE
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'c_external_service_properties');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_service_id', OLD.external_service_id, NULL);
  END;
DROP TRIGGER IF EXISTS c_external_service_properties_i;
CREATE TRIGGER `c_external_service_properties_i`
AFTER INSERT
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'c_external_service_properties');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_service_id', NEW.external_service_id, NULL);
  END;
DROP TRIGGER IF EXISTS c_external_service_properties_u;
CREATE TRIGGER `c_external_service_properties_u`
AFTER UPDATE
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'c_external_service_properties');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_service_id', OLD.external_service_id, NEW.external_service_id);
  END;
DROP TRIGGER IF EXISTS job_d;
CREATE TRIGGER `job_d`
BEFORE DELETE
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cron_expression', OLD.cron_expression, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_time', OLD.create_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'task_priority', OLD.task_priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_name', OLD.group_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_start_time', OLD.previous_run_start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_time', OLD.next_run_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_key', OLD.job_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'initializing_errorlog', OLD.initializing_errorlog, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currently_running', OLD.currently_running, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updates_allowed', OLD.updates_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scheduler_group', OLD.scheduler_group, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_misfired', OLD.is_misfired, NULL);
  END;
DROP TRIGGER IF EXISTS job_i;
CREATE TRIGGER `job_i`
AFTER INSERT
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cron_expression', NEW.cron_expression, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'create_time', NEW.create_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'task_priority', NEW.task_priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_name', NEW.group_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_start_time', NEW.previous_run_start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_run_time', NEW.next_run_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_key', NEW.job_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'initializing_errorlog', NEW.initializing_errorlog, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currently_running', NEW.currently_running, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updates_allowed', NEW.updates_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'scheduler_group', NEW.scheduler_group, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_misfired', NEW.is_misfired, NULL);
  END;
DROP TRIGGER IF EXISTS job_u;
CREATE TRIGGER `job_u`
AFTER UPDATE
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cron_expression', OLD.cron_expression, NEW.cron_expression);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_time', OLD.create_time, NEW.create_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'task_priority', OLD.task_priority, NEW.task_priority);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_name', OLD.group_name, NEW.group_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_start_time', OLD.previous_run_start_time, NEW.previous_run_start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_time', OLD.next_run_time, NEW.next_run_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_key', OLD.job_key, NEW.job_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'initializing_errorlog', OLD.initializing_errorlog, NEW.initializing_errorlog);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currently_running', OLD.currently_running, NEW.currently_running);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updates_allowed', OLD.updates_allowed, NEW.updates_allowed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scheduler_group', OLD.scheduler_group, NEW.scheduler_group);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_misfired', OLD.is_misfired, NEW.is_misfired);
  END;
DROP TRIGGER IF EXISTS job_run_history_d;
CREATE TRIGGER `job_run_history_d`
BEFORE DELETE
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'trigger_type', OLD.trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS job_run_history_i;
CREATE TRIGGER `job_run_history_i`
AFTER INSERT
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_id', NEW.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_time', NEW.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_time', NEW.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_message', NEW.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'trigger_type', NEW.trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS job_run_history_u;
CREATE TRIGGER `job_run_history_u`
AFTER UPDATE
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NEW.job_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NEW.start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NEW.end_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NEW.error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'trigger_type', OLD.trigger_type, NEW.trigger_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_details_d;
CREATE TRIGGER `m_account_transfer_details_d`
BEFORE DELETE
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_account_transfer_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_client_id', OLD.from_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_client_id', OLD.to_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_account_id', OLD.from_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_account_id', OLD.to_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_account_id', OLD.from_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_account_id', OLD.to_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_type', OLD.transfer_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_details_i;
CREATE TRIGGER `m_account_transfer_details_i`
AFTER INSERT
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_account_transfer_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_office_id', NEW.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_office_id', NEW.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_client_id', NEW.from_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_client_id', NEW.to_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_savings_account_id', NEW.from_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_savings_account_id', NEW.to_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_loan_account_id', NEW.from_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_loan_account_id', NEW.to_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_type', NEW.transfer_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_details_u;
CREATE TRIGGER `m_account_transfer_details_u`
AFTER UPDATE
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NEW.from_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NEW.to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_client_id', OLD.from_client_id, NEW.from_client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_client_id', OLD.to_client_id, NEW.to_client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_account_id', OLD.from_savings_account_id, NEW.from_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_account_id', OLD.to_savings_account_id, NEW.to_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_account_id', OLD.from_loan_account_id, NEW.from_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_account_id', OLD.to_loan_account_id, NEW.to_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_type', OLD.transfer_type, NEW.transfer_type);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_d;
CREATE TRIGGER `m_account_transfer_standing_instructions_d`
BEFORE DELETE
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_account_transfer_standing_instructions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'priority', OLD.priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instruction_type', OLD.instruction_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_till', OLD.valid_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_type', OLD.recurrence_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_frequency', OLD.recurrence_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_interval', OLD.recurrence_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_day', OLD.recurrence_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_month', OLD.recurrence_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_run_date', OLD.last_run_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_i;
CREATE TRIGGER `m_account_transfer_standing_instructions_i`
AFTER INSERT
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_account_transfer_standing_instructions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'priority', NEW.priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'instruction_type', NEW.instruction_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_till', NEW.valid_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_type', NEW.recurrence_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_frequency', NEW.recurrence_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_interval', NEW.recurrence_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_on_day', NEW.recurrence_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_on_month', NEW.recurrence_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_run_date', NEW.last_run_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_u;
CREATE TRIGGER `m_account_transfer_standing_instructions_u`
AFTER UPDATE
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_standing_instructions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'priority', OLD.priority, NEW.priority);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instruction_type', OLD.instruction_type, NEW.instruction_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_till', OLD.valid_till, NEW.valid_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_type', OLD.recurrence_type, NEW.recurrence_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_frequency', OLD.recurrence_frequency, NEW.recurrence_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_interval', OLD.recurrence_interval, NEW.recurrence_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_day', OLD.recurrence_on_day, NEW.recurrence_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_month', OLD.recurrence_on_month, NEW.recurrence_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_run_date', OLD.last_run_date, NEW.last_run_date);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_d;
CREATE TRIGGER `m_account_transfer_standing_instructions_history_d`
BEFORE DELETE
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_account_transfer_standing_instructions_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'standing_instruction_id', OLD.standing_instruction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_i;
CREATE TRIGGER `m_account_transfer_standing_instructions_history_i`
AFTER INSERT
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_account_transfer_standing_instructions_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'standing_instruction_id', NEW.standing_instruction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execution_time', NEW.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_u;
CREATE TRIGGER `m_account_transfer_standing_instructions_history_u`
AFTER UPDATE
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_standing_instructions_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'standing_instruction_id', OLD.standing_instruction_id, NEW.standing_instruction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NEW.execution_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_transaction_d;
CREATE TRIGGER `m_account_transfer_transaction_d`
BEFORE DELETE
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_account_transfer_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_transaction_id', OLD.from_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_transaction_id', OLD.from_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_transaction_id', OLD.to_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_transaction_id', OLD.to_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_transaction_i;
CREATE TRIGGER `m_account_transfer_transaction_i`
AFTER INSERT
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_account_transfer_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_savings_transaction_id', NEW.from_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_loan_transaction_id', NEW.from_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_savings_transaction_id', NEW.to_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_loan_transaction_id', NEW.to_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_account_transfer_transaction_u;
CREATE TRIGGER `m_account_transfer_transaction_u`
AFTER UPDATE
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_transaction_id', OLD.from_savings_transaction_id, NEW.from_savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_transaction_id', OLD.from_loan_transaction_id, NEW.from_loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_transaction_id', OLD.to_savings_transaction_id, NEW.to_savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_transaction_id', OLD.to_loan_transaction_id, NEW.to_loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS m_address_d;
CREATE TRIGGER `m_address_d`
BEFORE DELETE
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'street', OLD.street, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_3', OLD.address_line_3, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'town_village', OLD.town_village, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'county_district', OLD.county_district, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state_province_id', OLD.state_province_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_id', OLD.country_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'postal_code', OLD.postal_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'latitude', OLD.latitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'longitude', OLD.longitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_by', OLD.created_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NULL);
  END;
DROP TRIGGER IF EXISTS m_address_i;
CREATE TRIGGER `m_address_i`
AFTER INSERT
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'street', NEW.street, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_1', NEW.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_2', NEW.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_3', NEW.address_line_3, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'town_village', NEW.town_village, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'city', NEW.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'county_district', NEW.county_district, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state_province_id', NEW.state_province_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country_id', NEW.country_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'postal_code', NEW.postal_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'latitude', NEW.latitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'longitude', NEW.longitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_by', NEW.created_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_on', NEW.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_by', NEW.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_on', NEW.updated_on, NULL);
  END;
DROP TRIGGER IF EXISTS m_address_u;
CREATE TRIGGER `m_address_u`
AFTER UPDATE
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'street', OLD.street, NEW.street);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NEW.address_line_1);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NEW.address_line_2);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_3', OLD.address_line_3, NEW.address_line_3);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'town_village', OLD.town_village, NEW.town_village);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NEW.city);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'county_district', OLD.county_district, NEW.county_district);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state_province_id', OLD.state_province_id, NEW.state_province_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_id', OLD.country_id, NEW.country_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'postal_code', OLD.postal_code, NEW.postal_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'latitude', OLD.latitude, NEW.latitude);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'longitude', OLD.longitude, NEW.longitude);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_by', OLD.created_by, NEW.created_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NEW.created_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NEW.updated_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NEW.updated_on);
  END;
DROP TRIGGER IF EXISTS m_adhoc_d;
CREATE TRIGGER `m_adhoc_d`
BEFORE DELETE
  ON m_adhoc
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_adhoc');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'query', OLD.query, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'table_name', OLD.table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'table_fields', OLD.table_fields, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'IsActive', OLD.IsActive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_adhoc_i;
CREATE TRIGGER `m_adhoc_i`
AFTER INSERT
  ON m_adhoc
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_adhoc');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'query', NEW.query, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'table_name', NEW.table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'table_fields', NEW.table_fields, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email', NEW.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'IsActive', NEW.IsActive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_adhoc_u;
CREATE TRIGGER `m_adhoc_u`
AFTER UPDATE
  ON m_adhoc
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_adhoc');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'query', OLD.query, NEW.query);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'table_name', OLD.table_name, NEW.table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'table_fields', OLD.table_fields, NEW.table_fields);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NEW.email);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'IsActive', OLD.IsActive, NEW.IsActive);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_appuser_d;
CREATE TRIGGER `m_appuser_d`
BEFORE DELETE
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_appuser');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firsttime_login_remaining', OLD.firsttime_login_remaining, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired', OLD.nonexpired, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonlocked', OLD.nonlocked, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired_credentials', OLD.nonexpired_credentials, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_time_password_updated', OLD.last_time_password_updated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password_never_expires', OLD.password_never_expires, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_self_service_user', OLD.is_self_service_user, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_i;
CREATE TRIGGER `m_appuser_i`
AFTER INSERT
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_appuser');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'username', NEW.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password', NEW.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email', NEW.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firsttime_login_remaining', NEW.firsttime_login_remaining, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonexpired', NEW.nonexpired, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonlocked', NEW.nonlocked, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonexpired_credentials', NEW.nonexpired_credentials, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_time_password_updated', NEW.last_time_password_updated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password_never_expires', NEW.password_never_expires, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_self_service_user', NEW.is_self_service_user, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_u;
CREATE TRIGGER `m_appuser_u`
AFTER UPDATE
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_appuser');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NEW.username);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NEW.password);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NEW.email);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firsttime_login_remaining', OLD.firsttime_login_remaining, NEW.firsttime_login_remaining);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired', OLD.nonexpired, NEW.nonexpired);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonlocked', OLD.nonlocked, NEW.nonlocked);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired_credentials', OLD.nonexpired_credentials, NEW.nonexpired_credentials);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_time_password_updated', OLD.last_time_password_updated, NEW.last_time_password_updated);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password_never_expires', OLD.password_never_expires, NEW.password_never_expires);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_self_service_user', OLD.is_self_service_user, NEW.is_self_service_user);
  END;
DROP TRIGGER IF EXISTS m_appuser_previous_password_d;
CREATE TRIGGER `m_appuser_previous_password_d`
BEFORE DELETE
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_appuser_previous_password');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'removal_date', OLD.removal_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_previous_password_i;
CREATE TRIGGER `m_appuser_previous_password_i`
AFTER INSERT
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_appuser_previous_password');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_id', NEW.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password', NEW.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'removal_date', NEW.removal_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_previous_password_u;
CREATE TRIGGER `m_appuser_previous_password_u`
AFTER UPDATE
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_appuser_previous_password');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NEW.user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NEW.password);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'removal_date', OLD.removal_date, NEW.removal_date);
  END;
DROP TRIGGER IF EXISTS m_appuser_role_d;
CREATE TRIGGER `m_appuser_role_d`
BEFORE DELETE
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_appuser_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_role_i;
CREATE TRIGGER `m_appuser_role_i`
AFTER INSERT
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_appuser_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_id', NEW.role_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_appuser_role_u;
CREATE TRIGGER `m_appuser_role_u`
AFTER UPDATE
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_appuser_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NEW.role_id);
  END;
DROP TRIGGER IF EXISTS m_calendar_d;
CREATE TRIGGER `m_calendar_d`
BEFORE DELETE
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_calendar');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_time', OLD.meeting_time, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_i;
CREATE TRIGGER `m_calendar_i`
AFTER INSERT
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_calendar');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'title', NEW.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duration', NEW.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_type_enum', NEW.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repeating', NEW.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remind_by_enum', NEW.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'first_reminder', NEW.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_reminder', NEW.second_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_time', NEW.meeting_time, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_u;
CREATE TRIGGER `m_calendar_u`
AFTER UPDATE
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_calendar');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NEW.title);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NEW.duration);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NEW.calendar_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NEW.repeating);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NEW.remind_by_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NEW.first_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NEW.second_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_time', OLD.meeting_time, NEW.meeting_time);
  END;
DROP TRIGGER IF EXISTS m_calendar_history_d;
CREATE TRIGGER `m_calendar_history_d`
BEFORE DELETE
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_calendar_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_history_i;
CREATE TRIGGER `m_calendar_history_i`
AFTER INSERT
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_calendar_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_id', NEW.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'title', NEW.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duration', NEW.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_type_enum', NEW.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repeating', NEW.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remind_by_enum', NEW.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'first_reminder', NEW.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_reminder', NEW.second_reminder, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_history_u;
CREATE TRIGGER `m_calendar_history_u`
AFTER UPDATE
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_calendar_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NEW.calendar_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NEW.title);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NEW.duration);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NEW.calendar_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NEW.repeating);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NEW.remind_by_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NEW.first_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NEW.second_reminder);
  END;
DROP TRIGGER IF EXISTS m_calendar_instance_d;
CREATE TRIGGER `m_calendar_instance_d`
BEFORE DELETE
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_calendar_instance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_instance_i;
CREATE TRIGGER `m_calendar_instance_i`
AFTER INSERT
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_calendar_instance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_id', NEW.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type_enum', NEW.entity_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_calendar_instance_u;
CREATE TRIGGER `m_calendar_instance_u`
AFTER UPDATE
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_calendar_instance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NEW.calendar_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NEW.entity_type_enum);
  END;
DROP TRIGGER IF EXISTS m_cashier_transactions_d;
CREATE TRIGGER `m_cashier_transactions_d`
BEFORE DELETE
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_cashier_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cashier_id', OLD.cashier_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_type', OLD.txn_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_amount', OLD.txn_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_date', OLD.txn_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_note', OLD.txn_note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_cashier_transactions_i;
CREATE TRIGGER `m_cashier_transactions_i`
AFTER INSERT
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_cashier_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cashier_id', NEW.cashier_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_type', NEW.txn_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_amount', NEW.txn_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_date', NEW.txn_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type', NEW.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_note', NEW.txn_note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_cashier_transactions_u;
CREATE TRIGGER `m_cashier_transactions_u`
AFTER UPDATE
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_cashier_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cashier_id', OLD.cashier_id, NEW.cashier_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_type', OLD.txn_type, NEW.txn_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_amount', OLD.txn_amount, NEW.txn_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_date', OLD.txn_date, NEW.txn_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NEW.entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_note', OLD.txn_note, NEW.txn_note);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END;
DROP TRIGGER IF EXISTS m_cashiers_d;
CREATE TRIGGER `m_cashiers_d`
BEFORE DELETE
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_cashiers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'teller_id', OLD.teller_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'full_day', OLD.full_day, NULL);
  END;
DROP TRIGGER IF EXISTS m_cashiers_i;
CREATE TRIGGER `m_cashiers_i`
AFTER INSERT
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_cashiers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'teller_id', NEW.teller_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_time', NEW.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_time', NEW.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'full_day', NEW.full_day, NULL);
  END;
DROP TRIGGER IF EXISTS m_cashiers_u;
CREATE TRIGGER `m_cashiers_u`
AFTER UPDATE
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_cashiers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'teller_id', OLD.teller_id, NEW.teller_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NEW.start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NEW.end_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'full_day', OLD.full_day, NEW.full_day);
  END;
DROP TRIGGER IF EXISTS m_charge_d;
CREATE TRIGGER `m_charge_d`
BEFORE DELETE
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_applies_to_enum', OLD.charge_applies_to_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_frequency', OLD.fee_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'income_or_liability_account_id', OLD.income_or_liability_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_charge_i;
CREATE TRIGGER `m_charge_i`
AFTER INSERT
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_applies_to_enum', NEW.charge_applies_to_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_day', NEW.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_interval', NEW.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_month', NEW.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_frequency', NEW.fee_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'income_or_liability_account_id', NEW.income_or_liability_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_charge_u;
CREATE TRIGGER `m_charge_u`
AFTER UPDATE
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_applies_to_enum', OLD.charge_applies_to_enum, NEW.charge_applies_to_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NEW.fee_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NEW.fee_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NEW.fee_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_frequency', OLD.fee_frequency, NEW.fee_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'income_or_liability_account_id', OLD.income_or_liability_account_id, NEW.income_or_liability_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
  END;
DROP TRIGGER IF EXISTS m_client_d;
CREATE TRIGGER `m_client_d`
BEFORE DELETE
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status', OLD.sub_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_joining_date', OLD.office_joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_to_office_id', OLD.transfer_to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fullname', OLD.fullname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_staff', OLD.is_staff, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_product', OLD.default_savings_product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_account', OLD.default_savings_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_type_cv_id', OLD.client_type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_classification_cv_id', OLD.client_classification_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reject_reason_cv_id', OLD.reject_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', OLD.withdraw_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawn_on_date', OLD.withdrawn_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_on_userid', OLD.withdraw_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_date', OLD.reactivated_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_userid', OLD.reactivated_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'legal_form_enum', OLD.legal_form_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_on_date', OLD.reopened_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_by_userid', OLD.reopened_by_userid, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_i;
CREATE TRIGGER `m_client_i`
AFTER INSERT
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sub_status', NEW.sub_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activation_date', NEW.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_joining_date', NEW.office_joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_to_office_id', NEW.transfer_to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'middlename', NEW.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fullname', NEW.fullname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_staff', NEW.is_staff, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gender_cv_id', NEW.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_of_birth', NEW.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'image_id', NEW.image_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_reason_cv_id', NEW.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_by', NEW.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_on', NEW.updated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_savings_product', NEW.default_savings_product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_savings_account', NEW.default_savings_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_type_cv_id', NEW.client_type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_classification_cv_id', NEW.client_classification_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reject_reason_cv_id', NEW.reject_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', NEW.withdraw_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawn_on_date', NEW.withdrawn_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdraw_on_userid', NEW.withdraw_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reactivated_on_date', NEW.reactivated_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reactivated_on_userid', NEW.reactivated_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'legal_form_enum', NEW.legal_form_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reopened_on_date', NEW.reopened_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reopened_by_userid', NEW.reopened_by_userid, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_u;
CREATE TRIGGER `m_client_u`
AFTER UPDATE
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status', OLD.sub_status, NEW.sub_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NEW.activation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_joining_date', OLD.office_joining_date, NEW.office_joining_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_to_office_id', OLD.transfer_to_office_id, NEW.transfer_to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NEW.middlename);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fullname', OLD.fullname, NEW.fullname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_staff', OLD.is_staff, NEW.is_staff);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NEW.gender_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NEW.date_of_birth);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NEW.image_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NEW.closure_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NEW.updated_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NEW.updated_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_product', OLD.default_savings_product, NEW.default_savings_product);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_account', OLD.default_savings_account, NEW.default_savings_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_type_cv_id', OLD.client_type_cv_id, NEW.client_type_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_classification_cv_id', OLD.client_classification_cv_id, NEW.client_classification_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reject_reason_cv_id', OLD.reject_reason_cv_id, NEW.reject_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', OLD.withdraw_reason_cv_id, NEW.withdraw_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawn_on_date', OLD.withdrawn_on_date, NEW.withdrawn_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_on_userid', OLD.withdraw_on_userid, NEW.withdraw_on_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_date', OLD.reactivated_on_date, NEW.reactivated_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_userid', OLD.reactivated_on_userid, NEW.reactivated_on_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'legal_form_enum', OLD.legal_form_enum, NEW.legal_form_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_on_date', OLD.reopened_on_date, NEW.reopened_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_by_userid', OLD.reopened_by_userid, NEW.reopened_by_userid);
  END;
DROP TRIGGER IF EXISTS m_client_address_d;
CREATE TRIGGER `m_client_address_d`
BEFORE DELETE
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_id', OLD.address_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_type_id', OLD.address_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_address_i;
CREATE TRIGGER `m_client_address_i`
AFTER INSERT
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_id', NEW.address_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_type_id', NEW.address_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_address_u;
CREATE TRIGGER `m_client_address_u`
AFTER UPDATE
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_address');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_id', OLD.address_id, NEW.address_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_type_id', OLD.address_type_id, NEW.address_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_client_attendance_d;
CREATE TRIGGER `m_client_attendance_d`
BEFORE DELETE
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_attendance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_id', OLD.meeting_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attendance_type_enum', OLD.attendance_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_attendance_i;
CREATE TRIGGER `m_client_attendance_i`
AFTER INSERT
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_attendance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_id', NEW.meeting_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attendance_type_enum', NEW.attendance_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_attendance_u;
CREATE TRIGGER `m_client_attendance_u`
AFTER UPDATE
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_attendance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_id', OLD.meeting_id, NEW.meeting_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attendance_type_enum', OLD.attendance_type_enum, NEW.attendance_type_enum);
  END;
DROP TRIGGER IF EXISTS m_client_charge_d;
CREATE TRIGGER `m_client_charge_d`
BEFORE DELETE
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_charge_i;
CREATE TRIGGER `m_client_charge_i`
AFTER INSERT
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_due_date', NEW.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'inactivated_on_date', NEW.inactivated_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_charge_u;
CREATE TRIGGER `m_client_charge_u`
AFTER UPDATE
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NEW.charge_due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NEW.inactivated_on_date);
  END;
DROP TRIGGER IF EXISTS m_client_charge_paid_by_d;
CREATE TRIGGER `m_client_charge_paid_by_d`
BEFORE DELETE
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_charge_id', OLD.client_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_charge_paid_by_i;
CREATE TRIGGER `m_client_charge_paid_by_i`
AFTER INSERT
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_transaction_id', NEW.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_charge_id', NEW.client_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_charge_paid_by_u;
CREATE TRIGGER `m_client_charge_paid_by_u`
AFTER UPDATE
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NEW.client_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_charge_id', OLD.client_charge_id, NEW.client_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_client_identifier_d;
CREATE TRIGGER `m_client_identifier_d`
BEFORE DELETE
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_identifier');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_type_id', OLD.document_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_key', OLD.document_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_identifier_i;
CREATE TRIGGER `m_client_identifier_i`
AFTER INSERT
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_identifier');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'document_type_id', NEW.document_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'document_key', NEW.document_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'active', NEW.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_identifier_u;
CREATE TRIGGER `m_client_identifier_u`
AFTER UPDATE
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_identifier');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_type_id', OLD.document_type_id, NEW.document_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_key', OLD.document_key, NEW.document_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NEW.active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_client_non_person_d;
CREATE TRIGGER `m_client_non_person_d`
BEFORE DELETE
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_non_person');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'constitution_cv_id', OLD.constitution_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_no', OLD.incorp_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_validity_till', OLD.incorp_validity_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'main_business_line_cv_id', OLD.main_business_line_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remarks', OLD.remarks, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_non_person_i;
CREATE TRIGGER `m_client_non_person_i`
AFTER INSERT
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_non_person');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'constitution_cv_id', NEW.constitution_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incorp_no', NEW.incorp_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incorp_validity_till', NEW.incorp_validity_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'main_business_line_cv_id', NEW.main_business_line_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remarks', NEW.remarks, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_non_person_u;
CREATE TRIGGER `m_client_non_person_u`
AFTER UPDATE
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_non_person');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'constitution_cv_id', OLD.constitution_cv_id, NEW.constitution_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_no', OLD.incorp_no, NEW.incorp_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_validity_till', OLD.incorp_validity_till, NEW.incorp_validity_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'main_business_line_cv_id', OLD.main_business_line_cv_id, NEW.main_business_line_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remarks', OLD.remarks, NEW.remarks);
  END;
DROP TRIGGER IF EXISTS m_client_transaction_d;
CREATE TRIGGER `m_client_transaction_d`
BEFORE DELETE
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_client_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_transaction_i;
CREATE TRIGGER `m_client_transaction_i`
AFTER INSERT
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_client_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_client_transaction_u;
CREATE TRIGGER `m_client_transaction_u`
AFTER UPDATE
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_client_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
  END;
DROP TRIGGER IF EXISTS m_code_d;
CREATE TRIGGER `m_code_d`
BEFORE DELETE
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_code');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_defined', OLD.is_system_defined, NULL);
  END;
DROP TRIGGER IF EXISTS m_code_i;
CREATE TRIGGER `m_code_i`
AFTER INSERT
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_code');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_name', NEW.code_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_system_defined', NEW.is_system_defined, NULL);
  END;
DROP TRIGGER IF EXISTS m_code_u;
CREATE TRIGGER `m_code_u`
AFTER UPDATE
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_code');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NEW.code_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_defined', OLD.is_system_defined, NEW.is_system_defined);
  END;
DROP TRIGGER IF EXISTS m_code_value_d;
CREATE TRIGGER `m_code_value_d`
BEFORE DELETE
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_code_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_value', OLD.code_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_description', OLD.code_description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_score', OLD.code_score, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
  END;
DROP TRIGGER IF EXISTS m_code_value_i;
CREATE TRIGGER `m_code_value_i`
AFTER INSERT
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_code_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_id', NEW.code_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_value', NEW.code_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_description', NEW.code_description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'order_position', NEW.order_position, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_score', NEW.code_score, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
  END;
DROP TRIGGER IF EXISTS m_code_value_u;
CREATE TRIGGER `m_code_value_u`
AFTER UPDATE
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_code_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NEW.code_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_value', OLD.code_value, NEW.code_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_description', OLD.code_description, NEW.code_description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NEW.order_position);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_score', OLD.code_score, NEW.code_score);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_d;
CREATE TRIGGER `m_creditbureau_d`
BEFORE DELETE
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product', OLD.product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'implementationKey', OLD.implementationKey, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_i;
CREATE TRIGGER `m_creditbureau_i`
AFTER INSERT
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product', NEW.product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country', NEW.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'implementationKey', NEW.implementationKey, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_u;
CREATE TRIGGER `m_creditbureau_u`
AFTER UPDATE
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product', OLD.product, NEW.product);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NEW.country);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'implementationKey', OLD.implementationKey, NEW.implementationKey);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_configuration_d;
CREATE TRIGGER `m_creditbureau_configuration_d`
BEFORE DELETE
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_creditbureau_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'configkey', OLD.configkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_configuration_i;
CREATE TRIGGER `m_creditbureau_configuration_i`
AFTER INSERT
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_creditbureau_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'configkey', NEW.configkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_configuration_u;
CREATE TRIGGER `m_creditbureau_configuration_u`
AFTER UPDATE
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_creditbureau_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'configkey', OLD.configkey, NEW.configkey);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_d;
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_d`
BEFORE DELETE
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_creditbureau_loanproduct_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', OLD.is_creditcheck_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', OLD.skip_creditcheck_in_failure, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stale_period', OLD.stale_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_i;
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_i`
AFTER INSERT
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_creditbureau_loanproduct_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', NEW.is_creditcheck_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', NEW.skip_creditcheck_in_failure, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stale_period', NEW.stale_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_u;
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_u`
AFTER UPDATE
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_creditbureau_loanproduct_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', OLD.is_creditcheck_mandatory, NEW.is_creditcheck_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', OLD.skip_creditcheck_in_failure, NEW.skip_creditcheck_in_failure);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stale_period', OLD.stale_period, NEW.stale_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_currency_d;
CREATE TRIGGER `m_currency_d`
BEFORE DELETE
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_currency_i;
CREATE TRIGGER `m_currency_i`
AFTER INSERT
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_places', NEW.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_symbol', NEW.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'internationalized_name_code', NEW.internationalized_name_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_currency_u;
CREATE TRIGGER `m_currency_u`
AFTER UPDATE
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NEW.decimal_places);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NEW.display_symbol);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NEW.internationalized_name_code);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_d;
CREATE TRIGGER `m_deposit_account_on_hold_transaction_d`
BEFORE DELETE
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_account_on_hold_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_i;
CREATE TRIGGER `m_deposit_account_on_hold_transaction_i`
AFTER INSERT
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_account_on_hold_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_u;
CREATE TRIGGER `m_deposit_account_on_hold_transaction_u`
AFTER UPDATE
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_on_hold_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_d;
CREATE TRIGGER `m_deposit_account_recurring_detail_d`
BEFORE DELETE
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_account_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', OLD.mandatory_recommended_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_calendar_inherited', OLD.is_calendar_inherited, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_amount', OLD.total_overdue_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'no_of_overdue_installments', OLD.no_of_overdue_installments, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_i;
CREATE TRIGGER `m_deposit_account_recurring_detail_i`
AFTER INSERT
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_account_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', NEW.mandatory_recommended_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_withdrawal', NEW.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', NEW.adjust_advance_towards_future_payments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_calendar_inherited', NEW.is_calendar_inherited, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdue_amount', NEW.total_overdue_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'no_of_overdue_installments', NEW.no_of_overdue_installments, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_u;
CREATE TRIGGER `m_deposit_account_recurring_detail_u`
AFTER UPDATE
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', OLD.mandatory_recommended_deposit_amount, NEW.mandatory_recommended_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NEW.allow_withdrawal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NEW.adjust_advance_towards_future_payments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_calendar_inherited', OLD.is_calendar_inherited, NEW.is_calendar_inherited);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_amount', OLD.total_overdue_amount, NEW.total_overdue_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'no_of_overdue_installments', OLD.no_of_overdue_installments, NEW.no_of_overdue_installments);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_d;
CREATE TRIGGER `m_deposit_account_term_and_preclosure_d`
BEFORE DELETE
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_account_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period', OLD.deposit_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', OLD.deposit_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_amount', OLD.maturity_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_date', OLD.maturity_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_account_closure_enum', OLD.on_account_closure_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', OLD.expected_firstdepositon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', OLD.transfer_interest_to_linked_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_i;
CREATE TRIGGER `m_deposit_account_term_and_preclosure_i`
AFTER INSERT
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_account_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term', NEW.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term', NEW.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', NEW.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', NEW.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', NEW.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', NEW.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', NEW.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', NEW.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', NEW.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_period', NEW.deposit_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', NEW.deposit_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturity_amount', NEW.maturity_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturity_date', NEW.maturity_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'on_account_closure_enum', NEW.on_account_closure_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', NEW.expected_firstdepositon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', NEW.transfer_interest_to_linked_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_u;
CREATE TRIGGER `m_deposit_account_term_and_preclosure_u`
AFTER UPDATE
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NEW.min_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NEW.max_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NEW.min_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NEW.max_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NEW.in_multiples_of_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NEW.in_multiples_of_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NEW.pre_closure_penal_applicable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NEW.pre_closure_penal_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NEW.pre_closure_penal_interest_on_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period', OLD.deposit_period, NEW.deposit_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', OLD.deposit_period_frequency_enum, NEW.deposit_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_amount', OLD.maturity_amount, NEW.maturity_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_date', OLD.maturity_date, NEW.maturity_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_account_closure_enum', OLD.on_account_closure_enum, NEW.on_account_closure_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', OLD.expected_firstdepositon_date, NEW.expected_firstdepositon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', OLD.transfer_interest_to_linked_account, NEW.transfer_interest_to_linked_account);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_d;
CREATE TRIGGER `m_deposit_product_interest_rate_chart_d`
BEFORE DELETE
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_product_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_product_id', OLD.deposit_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_i;
CREATE TRIGGER `m_deposit_product_interest_rate_chart_i`
AFTER INSERT
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_product_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_product_id', NEW.deposit_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_chart_id', NEW.interest_rate_chart_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_u;
CREATE TRIGGER `m_deposit_product_interest_rate_chart_u`
AFTER UPDATE
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_product_id', OLD.deposit_product_id, NEW.deposit_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NEW.interest_rate_chart_id);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_d;
CREATE TRIGGER `m_deposit_product_recurring_detail_d`
BEFORE DELETE
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_product_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_i;
CREATE TRIGGER `m_deposit_product_recurring_detail_i`
AFTER INSERT
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_product_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_withdrawal', NEW.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', NEW.adjust_advance_towards_future_payments, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_u;
CREATE TRIGGER `m_deposit_product_recurring_detail_u`
AFTER UPDATE
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_recurring_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NEW.allow_withdrawal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NEW.adjust_advance_towards_future_payments);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_d;
CREATE TRIGGER `m_deposit_product_term_and_preclosure_d`
BEFORE DELETE
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_deposit_product_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_amount', OLD.min_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_amount', OLD.max_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_i;
CREATE TRIGGER `m_deposit_product_term_and_preclosure_i`
AFTER INSERT
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_deposit_product_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term', NEW.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term', NEW.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', NEW.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', NEW.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', NEW.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', NEW.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', NEW.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', NEW.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', NEW.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_amount', NEW.min_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_amount', NEW.max_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_u;
CREATE TRIGGER `m_deposit_product_term_and_preclosure_u`
AFTER UPDATE
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_term_and_preclosure');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NEW.min_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NEW.max_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NEW.min_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NEW.max_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NEW.in_multiples_of_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NEW.in_multiples_of_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NEW.pre_closure_penal_applicable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NEW.pre_closure_penal_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NEW.pre_closure_penal_interest_on_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_amount', OLD.min_deposit_amount, NEW.min_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_amount', OLD.max_deposit_amount, NEW.max_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
  END;
DROP TRIGGER IF EXISTS m_document_d;
CREATE TRIGGER `m_document_d`
BEFORE DELETE
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_document');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_type', OLD.parent_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_id', OLD.parent_entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'file_name', OLD.file_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'size', OLD.size, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_document_i;
CREATE TRIGGER `m_document_i`
AFTER INSERT
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_document');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_entity_type', NEW.parent_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_entity_id', NEW.parent_entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'file_name', NEW.file_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'size', NEW.size, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'storage_type_enum', NEW.storage_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_document_u;
CREATE TRIGGER `m_document_u`
AFTER UPDATE
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_document');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_type', OLD.parent_entity_type, NEW.parent_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_id', OLD.parent_entity_id, NEW.parent_entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'file_name', OLD.file_name, NEW.file_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'size', OLD.size, NEW.size);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NEW.storage_type_enum);
  END;
DROP TRIGGER IF EXISTS m_entity_datatable_check_d;
CREATE TRIGGER `m_entity_datatable_check_d`
BEFORE DELETE
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_entity_datatable_check');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'x_registered_table_name', OLD.x_registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_datatable_check_i;
CREATE TRIGGER `m_entity_datatable_check_i`
AFTER INSERT
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_entity_datatable_check');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'application_table_name', NEW.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'x_registered_table_name', NEW.x_registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'system_defined', NEW.system_defined, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_datatable_check_u;
CREATE TRIGGER `m_entity_datatable_check_u`
AFTER UPDATE
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_entity_datatable_check');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NEW.application_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'x_registered_table_name', OLD.x_registered_table_name, NEW.x_registered_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NEW.system_defined);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
  END;
DROP TRIGGER IF EXISTS m_entity_relation_d;
CREATE TRIGGER `m_entity_relation_d`
BEFORE DELETE
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_entity_relation');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_entity_type', OLD.from_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_entity_type', OLD.to_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_relation_i;
CREATE TRIGGER `m_entity_relation_i`
AFTER INSERT
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_entity_relation');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_entity_type', NEW.from_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_entity_type', NEW.to_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_name', NEW.code_name, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_relation_u;
CREATE TRIGGER `m_entity_relation_u`
AFTER UPDATE
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_entity_relation');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_entity_type', OLD.from_entity_type, NEW.from_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_entity_type', OLD.to_entity_type, NEW.to_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NEW.code_name);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_access_d;
CREATE TRIGGER `m_entity_to_entity_access_d`
BEFORE DELETE
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_entity_to_entity_access');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_type_code_value_id', OLD.access_type_code_value_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_type', OLD.second_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_id', OLD.second_entity_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_access_i;
CREATE TRIGGER `m_entity_to_entity_access_i`
AFTER INSERT
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_entity_to_entity_access');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type', NEW.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'access_type_code_value_id', NEW.access_type_code_value_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_entity_type', NEW.second_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_entity_id', NEW.second_entity_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_access_u;
CREATE TRIGGER `m_entity_to_entity_access_u`
AFTER UPDATE
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_entity_to_entity_access');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NEW.entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_type_code_value_id', OLD.access_type_code_value_id, NEW.access_type_code_value_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_type', OLD.second_entity_type, NEW.second_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_id', OLD.second_entity_id, NEW.second_entity_id);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_d;
CREATE TRIGGER `m_entity_to_entity_mapping_d`
BEFORE DELETE
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_entity_to_entity_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rel_id', OLD.rel_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_id', OLD.from_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_id', OLD.to_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_i;
CREATE TRIGGER `m_entity_to_entity_mapping_i`
AFTER INSERT
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_entity_to_entity_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rel_id', NEW.rel_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_id', NEW.from_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_id', NEW.to_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_u;
CREATE TRIGGER `m_entity_to_entity_mapping_u`
AFTER UPDATE
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_entity_to_entity_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rel_id', OLD.rel_id, NEW.rel_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_id', OLD.from_id, NEW.from_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_id', OLD.to_id, NEW.to_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
  END;
DROP TRIGGER IF EXISTS m_family_members_d;
CREATE TRIGGER `m_family_members_d`
BEFORE DELETE
  ON m_family_members
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_family_members');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'qualification', OLD.qualification, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'relationship_cv_id', OLD.relationship_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'marital_status_cv_id', OLD.marital_status_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'age', OLD.age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'profession_cv_id', OLD.profession_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dependent', OLD.is_dependent, NULL);
  END;
DROP TRIGGER IF EXISTS m_family_members_i;
CREATE TRIGGER `m_family_members_i`
AFTER INSERT
  ON m_family_members
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_family_members');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'middlename', NEW.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'qualification', NEW.qualification, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'relationship_cv_id', NEW.relationship_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'marital_status_cv_id', NEW.marital_status_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gender_cv_id', NEW.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_of_birth', NEW.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'age', NEW.age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'profession_cv_id', NEW.profession_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_number', NEW.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_dependent', NEW.is_dependent, NULL);
  END;
DROP TRIGGER IF EXISTS m_family_members_u;
CREATE TRIGGER `m_family_members_u`
AFTER UPDATE
  ON m_family_members
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_family_members');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NEW.middlename);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'qualification', OLD.qualification, NEW.qualification);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'relationship_cv_id', OLD.relationship_cv_id, NEW.relationship_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'marital_status_cv_id', OLD.marital_status_cv_id, NEW.marital_status_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NEW.gender_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NEW.date_of_birth);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'age', OLD.age, NEW.age);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'profession_cv_id', OLD.profession_cv_id, NEW.profession_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NEW.mobile_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dependent', OLD.is_dependent, NEW.is_dependent);
  END;
DROP TRIGGER IF EXISTS m_field_configuration_d;
CREATE TRIGGER `m_field_configuration_d`
BEFORE DELETE
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_field_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subentity', OLD.subentity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field', OLD.field, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_enabled', OLD.is_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'validation_regex', OLD.validation_regex, NULL);
  END;
DROP TRIGGER IF EXISTS m_field_configuration_i;
CREATE TRIGGER `m_field_configuration_i`
AFTER INSERT
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_field_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity', NEW.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'subentity', NEW.subentity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field', NEW.field, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_enabled', NEW.is_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'validation_regex', NEW.validation_regex, NULL);
  END;
DROP TRIGGER IF EXISTS m_field_configuration_u;
CREATE TRIGGER `m_field_configuration_u`
AFTER UPDATE
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_field_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NEW.entity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subentity', OLD.subentity, NEW.subentity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field', OLD.field, NEW.field);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_enabled', OLD.is_enabled, NEW.is_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'validation_regex', OLD.validation_regex, NEW.validation_regex);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_d;
CREATE TRIGGER `m_floating_rates_d`
BEFORE DELETE
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_base_lending_rate', OLD.is_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_i;
CREATE TRIGGER `m_floating_rates_i`
AFTER INSERT
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_base_lending_rate', NEW.is_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_u;
CREATE TRIGGER `m_floating_rates_u`
AFTER UPDATE
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_base_lending_rate', OLD.is_base_lending_rate, NEW.is_base_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_periods_d;
CREATE TRIGGER `m_floating_rates_periods_d`
BEFORE DELETE
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_floating_rates_periods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate', OLD.interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', OLD.is_differential_to_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_periods_i;
CREATE TRIGGER `m_floating_rates_periods_i`
AFTER INSERT
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_floating_rates_periods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'floating_rates_id', NEW.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate', NEW.interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', NEW.is_differential_to_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_floating_rates_periods_u;
CREATE TRIGGER `m_floating_rates_periods_u`
AFTER UPDATE
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_floating_rates_periods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NEW.floating_rates_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate', OLD.interest_rate, NEW.interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', OLD.is_differential_to_base_lending_rate, NEW.is_differential_to_base_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_fund_d;
CREATE TRIGGER `m_fund_d`
BEFORE DELETE
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_fund');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_fund_i;
CREATE TRIGGER `m_fund_i`
AFTER INSERT
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_fund');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_fund_u;
CREATE TRIGGER `m_fund_u`
AFTER UPDATE
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_fund');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
  END;
DROP TRIGGER IF EXISTS m_group_d;
CREATE TRIGGER `m_group_d`
BEFORE DELETE
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_id', OLD.level_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_i;
CREATE TRIGGER `m_group_i`
AFTER INSERT
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activation_date', NEW.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'level_id', NEW.level_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_reason_cv_id', NEW.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_u;
CREATE TRIGGER `m_group_u`
AFTER UPDATE
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NEW.activation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_id', OLD.level_id, NEW.level_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NEW.closure_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
  END;
DROP TRIGGER IF EXISTS m_group_client_d;
CREATE TRIGGER `m_group_client_d`
BEFORE DELETE
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_group_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_client_i;
CREATE TRIGGER `m_group_client_i`
AFTER INSERT
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_group_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_client_u;
CREATE TRIGGER `m_group_client_u`
AFTER UPDATE
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_group_client');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
  END;
DROP TRIGGER IF EXISTS m_group_level_d;
CREATE TRIGGER `m_group_level_d`
BEFORE DELETE
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_group_level');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'super_parent', OLD.super_parent, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_name', OLD.level_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recursable', OLD.recursable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_have_clients', OLD.can_have_clients, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_level_i;
CREATE TRIGGER `m_group_level_i`
AFTER INSERT
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_group_level');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'super_parent', NEW.super_parent, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'level_name', NEW.level_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recursable', NEW.recursable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_have_clients', NEW.can_have_clients, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_level_u;
CREATE TRIGGER `m_group_level_u`
AFTER UPDATE
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_group_level');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'super_parent', OLD.super_parent, NEW.super_parent);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_name', OLD.level_name, NEW.level_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recursable', OLD.recursable, NEW.recursable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_have_clients', OLD.can_have_clients, NEW.can_have_clients);
  END;
DROP TRIGGER IF EXISTS m_group_roles_d;
CREATE TRIGGER `m_group_roles_d`
BEFORE DELETE
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_group_roles');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_cv_id', OLD.role_cv_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_roles_i;
CREATE TRIGGER `m_group_roles_i`
AFTER INSERT
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_group_roles');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_cv_id', NEW.role_cv_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_group_roles_u;
CREATE TRIGGER `m_group_roles_u`
AFTER UPDATE
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_group_roles');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_cv_id', OLD.role_cv_id, NEW.role_cv_id);
  END;
DROP TRIGGER IF EXISTS m_guarantor_d;
CREATE TRIGGER `m_guarantor_d`
BEFORE DELETE
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_guarantor');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_reln_cv_id', OLD.client_reln_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dob', OLD.dob, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'zip', OLD.zip, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'house_phone_number', OLD.house_phone_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comment', OLD.comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_i;
CREATE TRIGGER `m_guarantor_i`
AFTER INSERT
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_guarantor');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_reln_cv_id', NEW.client_reln_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dob', NEW.dob, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_1', NEW.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_2', NEW.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'city', NEW.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state', NEW.state, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country', NEW.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'zip', NEW.zip, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'house_phone_number', NEW.house_phone_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_number', NEW.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'comment', NEW.comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_u;
CREATE TRIGGER `m_guarantor_u`
AFTER UPDATE
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_guarantor');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_reln_cv_id', OLD.client_reln_cv_id, NEW.client_reln_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dob', OLD.dob, NEW.dob);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NEW.address_line_1);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NEW.address_line_2);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NEW.city);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NEW.state);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NEW.country);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'zip', OLD.zip, NEW.zip);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'house_phone_number', OLD.house_phone_number, NEW.house_phone_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NEW.mobile_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comment', OLD.comment, NEW.comment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_guarantor_funding_details_d;
CREATE TRIGGER `m_guarantor_funding_details_d`
BEFORE DELETE
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_guarantor_funding_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_id', OLD.guarantor_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_associations_id', OLD.account_associations_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_released_derived', OLD.amount_released_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_remaining_derived', OLD.amount_remaining_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_transfered_derived', OLD.amount_transfered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_funding_details_i;
CREATE TRIGGER `m_guarantor_funding_details_i`
AFTER INSERT
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_guarantor_funding_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantor_id', NEW.guarantor_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_associations_id', NEW.account_associations_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_released_derived', NEW.amount_released_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_remaining_derived', NEW.amount_remaining_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_transfered_derived', NEW.amount_transfered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_funding_details_u;
CREATE TRIGGER `m_guarantor_funding_details_u`
AFTER UPDATE
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_guarantor_funding_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_id', OLD.guarantor_id, NEW.guarantor_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_associations_id', OLD.account_associations_id, NEW.account_associations_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_released_derived', OLD.amount_released_derived, NEW.amount_released_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_remaining_derived', OLD.amount_remaining_derived, NEW.amount_remaining_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_transfered_derived', OLD.amount_transfered_derived, NEW.amount_transfered_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
  END;
DROP TRIGGER IF EXISTS m_guarantor_transaction_d;
CREATE TRIGGER `m_guarantor_transaction_d`
BEFORE DELETE
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_guarantor_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', OLD.guarantor_fund_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', OLD.deposit_on_hold_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_transaction_i;
CREATE TRIGGER `m_guarantor_transaction_i`
AFTER INSERT
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_guarantor_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', NEW.guarantor_fund_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', NEW.deposit_on_hold_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
  END;
DROP TRIGGER IF EXISTS m_guarantor_transaction_u;
CREATE TRIGGER `m_guarantor_transaction_u`
AFTER UPDATE
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_guarantor_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', OLD.guarantor_fund_detail_id, NEW.guarantor_fund_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', OLD.deposit_on_hold_transaction_id, NEW.deposit_on_hold_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
  END;
DROP TRIGGER IF EXISTS m_holiday_d;
CREATE TRIGGER `m_holiday_d`
BEFORE DELETE
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_holiday');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_date', OLD.to_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', OLD.repayments_rescheduled_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processed', OLD.processed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduling_type', OLD.rescheduling_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_holiday_i;
CREATE TRIGGER `m_holiday_i`
AFTER INSERT
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_holiday');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_date', NEW.to_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', NEW.repayments_rescheduled_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'processed', NEW.processed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rescheduling_type', NEW.rescheduling_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_holiday_u;
CREATE TRIGGER `m_holiday_u`
AFTER UPDATE
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_holiday');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_date', OLD.to_date, NEW.to_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', OLD.repayments_rescheduled_to, NEW.repayments_rescheduled_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processed', OLD.processed, NEW.processed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduling_type', OLD.rescheduling_type, NEW.rescheduling_type);
  END;
DROP TRIGGER IF EXISTS m_holiday_office_d;
CREATE TRIGGER `m_holiday_office_d`
BEFORE DELETE
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_holiday_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'holiday_id', OLD.holiday_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_holiday_office_i;
CREATE TRIGGER `m_holiday_office_i`
AFTER INSERT
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_holiday_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'holiday_id', NEW.holiday_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_holiday_office_u;
CREATE TRIGGER `m_holiday_office_u`
AFTER UPDATE
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_holiday_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'holiday_id', OLD.holiday_id, NEW.holiday_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
  END;
DROP TRIGGER IF EXISTS m_hook_d;
CREATE TRIGGER `m_hook_d`
BEFORE DELETE
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_hook');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'template_id', OLD.template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ugd_template_id', OLD.ugd_template_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_i;
CREATE TRIGGER `m_hook_i`
AFTER INSERT
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_hook');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'template_id', NEW.template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ugd_template_id', NEW.ugd_template_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_u;
CREATE TRIGGER `m_hook_u`
AFTER UPDATE
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_hook');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'template_id', OLD.template_id, NEW.template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ugd_template_id', OLD.ugd_template_id, NEW.ugd_template_id);
  END;
DROP TRIGGER IF EXISTS m_hook_configuration_d;
CREATE TRIGGER `m_hook_configuration_d`
BEFORE DELETE
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_hook_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_value', OLD.field_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_configuration_i;
CREATE TRIGGER `m_hook_configuration_i`
AFTER INSERT
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_hook_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_id', NEW.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_type', NEW.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_name', NEW.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_value', NEW.field_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_configuration_u;
CREATE TRIGGER `m_hook_configuration_u`
AFTER UPDATE
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_hook_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NEW.hook_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NEW.field_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NEW.field_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_value', OLD.field_value, NEW.field_value);
  END;
DROP TRIGGER IF EXISTS m_hook_registered_events_d;
CREATE TRIGGER `m_hook_registered_events_d`
BEFORE DELETE
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_hook_registered_events');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_registered_events_i;
CREATE TRIGGER `m_hook_registered_events_i`
AFTER INSERT
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_hook_registered_events');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_id', NEW.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_registered_events_u;
CREATE TRIGGER `m_hook_registered_events_u`
AFTER UPDATE
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_hook_registered_events');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NEW.hook_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
  END;
DROP TRIGGER IF EXISTS m_hook_schema_d;
CREATE TRIGGER `m_hook_schema_d`
BEFORE DELETE
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_hook_schema');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_template_id', OLD.hook_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'placeholder', OLD.placeholder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'optional', OLD.optional, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_schema_i;
CREATE TRIGGER `m_hook_schema_i`
AFTER INSERT
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_hook_schema');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_template_id', NEW.hook_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_type', NEW.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_name', NEW.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'placeholder', NEW.placeholder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'optional', NEW.optional, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_schema_u;
CREATE TRIGGER `m_hook_schema_u`
AFTER UPDATE
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_hook_schema');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_template_id', OLD.hook_template_id, NEW.hook_template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NEW.field_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NEW.field_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'placeholder', OLD.placeholder, NEW.placeholder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'optional', OLD.optional, NEW.optional);
  END;
DROP TRIGGER IF EXISTS m_hook_templates_d;
CREATE TRIGGER `m_hook_templates_d`
BEFORE DELETE
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_hook_templates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_templates_i;
CREATE TRIGGER `m_hook_templates_i`
AFTER INSERT
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_hook_templates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END;
DROP TRIGGER IF EXISTS m_hook_templates_u;
CREATE TRIGGER `m_hook_templates_u`
AFTER UPDATE
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_hook_templates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END;
DROP TRIGGER IF EXISTS m_image_d;
CREATE TRIGGER `m_image_d`
BEFORE DELETE
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_image');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_image_i;
CREATE TRIGGER `m_image_i`
AFTER INSERT
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_image');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'storage_type_enum', NEW.storage_type_enum, NULL);
  END;
DROP TRIGGER IF EXISTS m_image_u;
CREATE TRIGGER `m_image_u`
AFTER UPDATE
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_image');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NEW.storage_type_enum);
  END;
DROP TRIGGER IF EXISTS m_interest_incentives_d;
CREATE TRIGGER `m_interest_incentives_d`
BEFORE DELETE
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_slab_id', OLD.interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_incentives_i;
CREATE TRIGGER `m_interest_incentives_i`
AFTER INSERT
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_slab_id', NEW.interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entiry_type', NEW.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_name', NEW.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'condition_type', NEW.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_value', NEW.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incentive_type', NEW.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_incentives_u;
CREATE TRIGGER `m_interest_incentives_u`
AFTER UPDATE
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_slab_id', OLD.interest_rate_slab_id, NEW.interest_rate_slab_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NEW.entiry_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NEW.attribute_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NEW.condition_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NEW.attribute_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NEW.incentive_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_chart_d;
CREATE TRIGGER `m_interest_rate_chart_d`
BEFORE DELETE
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_chart_i;
CREATE TRIGGER `m_interest_rate_chart_i`
AFTER INSERT
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', NEW.is_primary_grouping_by_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_chart_u;
CREATE TRIGGER `m_interest_rate_chart_u`
AFTER UPDATE
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NEW.is_primary_grouping_by_amount);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_slab_d;
CREATE TRIGGER `m_interest_rate_slab_d`
BEFORE DELETE
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_slab_i;
CREATE TRIGGER `m_interest_rate_slab_i`
AFTER INSERT
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_chart_id', NEW.interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'period_type_enum', NEW.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_period', NEW.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_period', NEW.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_from', NEW.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_to', NEW.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_interest_rate', NEW.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_interest_rate_slab_u;
CREATE TRIGGER `m_interest_rate_slab_u`
AFTER UPDATE
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NEW.interest_rate_chart_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NEW.period_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NEW.from_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NEW.to_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NEW.amount_range_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NEW.amount_range_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NEW.annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END;
DROP TRIGGER IF EXISTS m_loan_d;
CREATE TRIGGER `m_loan_d`
BEFORE DELETE
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', OLD.loanpurpose_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_status_id', OLD.loan_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_type_enum', OLD.loan_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount_proposed', OLD.principal_amount_proposed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_principal', OLD.approved_principal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate', OLD.is_floating_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_frequency', OLD.term_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_period_frequency_enum', OLD.term_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disbursedon_date', OLD.expected_disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', OLD.expected_firstrepaymenton_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_from_date', OLD.interest_calculated_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_userid', OLD.disbursedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_maturedon_date', OLD.expected_maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturedon_date', OLD.maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', OLD.total_charges_due_at_disbursement_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_disbursed_derived', OLD.principal_disbursed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_repaid_derived', OLD.principal_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_outstanding_derived', OLD.principal_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_charged_derived', OLD.interest_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_repaid_derived', OLD.interest_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_outstanding_derived', OLD.interest_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', OLD.fee_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', OLD.fee_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', OLD.fee_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', OLD.penalty_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', OLD.penalty_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', OLD.penalty_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', OLD.total_expected_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_repayment_derived', OLD.total_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', OLD.total_expected_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_costofloan_derived', OLD.total_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_waived_derived', OLD.total_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_writtenoff_derived', OLD.total_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_outstanding_derived', OLD.total_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overpaid_derived', OLD.total_overpaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_date', OLD.rescheduledon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_userid', OLD.rescheduledon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writtenoffon_date', OLD.writtenoffon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', OLD.sync_disbursement_with_meeting, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_counter', OLD.loan_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_counter', OLD.loan_product_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fixed_emi_amount', OLD.fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_npa', OLD.is_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_recovered_derived', OLD.total_recovered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrued_till', OLD.accrued_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalcualated_on', OLD.interest_recalcualated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantee_amount_derived', OLD.guarantee_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', OLD.create_standing_instruction_at_disbursement, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', OLD.writeoff_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_sub_status_id', OLD.loan_sub_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_topup', OLD.is_topup, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_i;
CREATE TRIGGER `m_loan_i`
AFTER INSERT
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fund_id', NEW.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_officer_id', NEW.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', NEW.loanpurpose_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_status_id', NEW.loan_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_type_enum', NEW.loan_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount_proposed', NEW.principal_amount_proposed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_principal', NEW.approved_principal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_floating_interest_rate', NEW.is_floating_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_differential', NEW.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', NEW.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', NEW.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', NEW.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', NEW.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_frequency', NEW.term_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_period_frequency_enum', NEW.term_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', NEW.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_repayments', NEW.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_principal_periods', NEW.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', NEW.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_interest_periods', NEW.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_interest_free_periods', NEW.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_disbursedon_date', NEW.expected_disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', NEW.expected_firstrepaymenton_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_from_date', NEW.interest_calculated_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_date', NEW.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_userid', NEW.disbursedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_maturedon_date', NEW.expected_maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturedon_date', NEW.maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', NEW.total_charges_due_at_disbursement_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_disbursed_derived', NEW.principal_disbursed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_repaid_derived', NEW.principal_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', NEW.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_outstanding_derived', NEW.principal_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_charged_derived', NEW.interest_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_repaid_derived', NEW.interest_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_waived_derived', NEW.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', NEW.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_outstanding_derived', NEW.interest_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', NEW.fee_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', NEW.fee_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', NEW.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', NEW.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', NEW.fee_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', NEW.penalty_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', NEW.penalty_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', NEW.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', NEW.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', NEW.penalty_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', NEW.total_expected_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_repayment_derived', NEW.total_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', NEW.total_expected_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_costofloan_derived', NEW.total_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_waived_derived', NEW.total_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_writtenoff_derived', NEW.total_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_outstanding_derived', NEW.total_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overpaid_derived', NEW.total_overpaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rescheduledon_date', NEW.rescheduledon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rescheduledon_userid', NEW.rescheduledon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_date', NEW.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_userid', NEW.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'writtenoffon_date', NEW.writtenoffon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', NEW.sync_disbursement_with_meeting, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_counter', NEW.loan_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_counter', NEW.loan_product_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fixed_emi_amount', NEW.fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', NEW.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_npa', NEW.is_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_recovered_derived', NEW.total_recovered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrued_till', NEW.accrued_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalcualated_on', NEW.interest_recalcualated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_month_enum', NEW.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_year_enum', NEW.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', NEW.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantee_amount_derived', NEW.guarantee_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', NEW.create_standing_instruction_at_disbursement, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', NEW.writeoff_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_sub_status_id', NEW.loan_sub_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_topup', NEW.is_topup, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_u;
CREATE TRIGGER `m_loan_u`
AFTER UPDATE
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NEW.fund_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NEW.loan_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', OLD.loanpurpose_cv_id, NEW.loanpurpose_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_status_id', OLD.loan_status_id, NEW.loan_status_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_type_enum', OLD.loan_type_enum, NEW.loan_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount_proposed', OLD.principal_amount_proposed, NEW.principal_amount_proposed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_principal', OLD.approved_principal, NEW.approved_principal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate', OLD.is_floating_interest_rate, NEW.is_floating_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NEW.interest_rate_differential);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NEW.nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NEW.interest_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NEW.annual_nominal_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NEW.allow_partial_period_interest_calcualtion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_frequency', OLD.term_frequency, NEW.term_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_period_frequency_enum', OLD.term_period_frequency_enum, NEW.term_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NEW.repayment_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NEW.number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NEW.grace_on_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NEW.recurring_moratorium_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NEW.grace_on_interest_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NEW.grace_interest_free_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disbursedon_date', OLD.expected_disbursedon_date, NEW.expected_disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', OLD.expected_firstrepaymenton_date, NEW.expected_firstrepaymenton_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_from_date', OLD.interest_calculated_from_date, NEW.interest_calculated_from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NEW.disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_userid', OLD.disbursedon_userid, NEW.disbursedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_maturedon_date', OLD.expected_maturedon_date, NEW.expected_maturedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturedon_date', OLD.maturedon_date, NEW.maturedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', OLD.total_charges_due_at_disbursement_derived, NEW.total_charges_due_at_disbursement_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_disbursed_derived', OLD.principal_disbursed_derived, NEW.principal_disbursed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_repaid_derived', OLD.principal_repaid_derived, NEW.principal_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NEW.principal_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_outstanding_derived', OLD.principal_outstanding_derived, NEW.principal_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_charged_derived', OLD.interest_charged_derived, NEW.interest_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_repaid_derived', OLD.interest_repaid_derived, NEW.interest_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NEW.interest_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NEW.interest_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_outstanding_derived', OLD.interest_outstanding_derived, NEW.interest_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', OLD.fee_charges_charged_derived, NEW.fee_charges_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', OLD.fee_charges_repaid_derived, NEW.fee_charges_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NEW.fee_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NEW.fee_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', OLD.fee_charges_outstanding_derived, NEW.fee_charges_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', OLD.penalty_charges_charged_derived, NEW.penalty_charges_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', OLD.penalty_charges_repaid_derived, NEW.penalty_charges_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NEW.penalty_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NEW.penalty_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', OLD.penalty_charges_outstanding_derived, NEW.penalty_charges_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', OLD.total_expected_repayment_derived, NEW.total_expected_repayment_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_repayment_derived', OLD.total_repayment_derived, NEW.total_repayment_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', OLD.total_expected_costofloan_derived, NEW.total_expected_costofloan_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_costofloan_derived', OLD.total_costofloan_derived, NEW.total_costofloan_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_waived_derived', OLD.total_waived_derived, NEW.total_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_writtenoff_derived', OLD.total_writtenoff_derived, NEW.total_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_outstanding_derived', OLD.total_outstanding_derived, NEW.total_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overpaid_derived', OLD.total_overpaid_derived, NEW.total_overpaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_date', OLD.rescheduledon_date, NEW.rescheduledon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_userid', OLD.rescheduledon_userid, NEW.rescheduledon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NEW.withdrawnon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NEW.withdrawnon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writtenoffon_date', OLD.writtenoffon_date, NEW.writtenoffon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', OLD.sync_disbursement_with_meeting, NEW.sync_disbursement_with_meeting);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_counter', OLD.loan_counter, NEW.loan_counter);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_counter', OLD.loan_product_counter, NEW.loan_product_counter);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fixed_emi_amount', OLD.fixed_emi_amount, NEW.fixed_emi_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NEW.max_outstanding_loan_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_npa', OLD.is_npa, NEW.is_npa);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_recovered_derived', OLD.total_recovered_derived, NEW.total_recovered_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrued_till', OLD.accrued_till, NEW.accrued_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalcualated_on', OLD.interest_recalcualated_on, NEW.interest_recalcualated_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NEW.days_in_month_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NEW.days_in_year_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NEW.interest_recalculation_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantee_amount_derived', OLD.guarantee_amount_derived, NEW.guarantee_amount_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', OLD.create_standing_instruction_at_disbursement, NEW.create_standing_instruction_at_disbursement);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', OLD.writeoff_reason_cv_id, NEW.writeoff_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_sub_status_id', OLD.loan_sub_status_id, NEW.loan_sub_status_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_topup', OLD.is_topup, NEW.is_topup);
  END;
DROP TRIGGER IF EXISTS m_loan_arrears_aging_d;
CREATE TRIGGER `m_loan_arrears_aging_d`
BEFORE DELETE
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_arrears_aging');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_overdue_derived', OLD.principal_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_overdue_derived', OLD.interest_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', OLD.fee_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', OLD.penalty_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_derived', OLD.total_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_since_date_derived', OLD.overdue_since_date_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_arrears_aging_i;
CREATE TRIGGER `m_loan_arrears_aging_i`
AFTER INSERT
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_arrears_aging');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_overdue_derived', NEW.principal_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_overdue_derived', NEW.interest_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', NEW.fee_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', NEW.penalty_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdue_derived', NEW.total_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_since_date_derived', NEW.overdue_since_date_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_arrears_aging_u;
CREATE TRIGGER `m_loan_arrears_aging_u`
AFTER UPDATE
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_arrears_aging');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_overdue_derived', OLD.principal_overdue_derived, NEW.principal_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_overdue_derived', OLD.interest_overdue_derived, NEW.interest_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', OLD.fee_charges_overdue_derived, NEW.fee_charges_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', OLD.penalty_charges_overdue_derived, NEW.penalty_charges_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_derived', OLD.total_overdue_derived, NEW.total_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_since_date_derived', OLD.overdue_since_date_derived, NEW.overdue_since_date_derived);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_d;
CREATE TRIGGER `m_loan_charge_d`
BEFORE DELETE
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', OLD.due_for_collection_as_of_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_i;
CREATE TRIGGER `m_loan_charge_i`
AFTER INSERT
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', NEW.due_for_collection_as_of_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', NEW.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_u;
CREATE TRIGGER `m_loan_charge_u`
AFTER UPDATE
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', OLD.due_for_collection_as_of_date, NEW.due_for_collection_as_of_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NEW.charge_amount_or_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_paid_by_d;
CREATE TRIGGER `m_loan_charge_paid_by_d`
BEFORE DELETE
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment_number', OLD.installment_number, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_paid_by_i;
CREATE TRIGGER `m_loan_charge_paid_by_i`
AFTER INSERT
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment_number', NEW.installment_number, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_charge_paid_by_u;
CREATE TRIGGER `m_loan_charge_paid_by_u`
AFTER UPDATE
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment_number', OLD.installment_number, NEW.installment_number);
  END;
DROP TRIGGER IF EXISTS m_loan_collateral_d;
CREATE TRIGGER `m_loan_collateral_d`
BEFORE DELETE
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_collateral');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_cv_id', OLD.type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_collateral_i;
CREATE TRIGGER `m_loan_collateral_i`
AFTER INSERT
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_collateral');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_cv_id', NEW.type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_collateral_u;
CREATE TRIGGER `m_loan_collateral_u`
AFTER UPDATE
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_collateral');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_cv_id', OLD.type_cv_id, NEW.type_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS m_loan_disbursement_detail_d;
CREATE TRIGGER `m_loan_disbursement_detail_d`
BEFORE DELETE
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_disbursement_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disburse_date', OLD.expected_disburse_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal', OLD.principal, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_disbursement_detail_i;
CREATE TRIGGER `m_loan_disbursement_detail_i`
AFTER INSERT
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_disbursement_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_disburse_date', NEW.expected_disburse_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_date', NEW.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal', NEW.principal, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_disbursement_detail_u;
CREATE TRIGGER `m_loan_disbursement_detail_u`
AFTER UPDATE
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_disbursement_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disburse_date', OLD.expected_disburse_date, NEW.expected_disburse_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NEW.disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal', OLD.principal, NEW.principal);
  END;
DROP TRIGGER IF EXISTS m_loan_installment_charge_d;
CREATE TRIGGER `m_loan_installment_charge_d`
BEFORE DELETE
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_date', OLD.due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_through_charge_payment', OLD.amount_through_charge_payment, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_installment_charge_i;
CREATE TRIGGER `m_loan_installment_charge_i`
AFTER INSERT
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_schedule_id', NEW.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'due_date', NEW.due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_through_charge_payment', NEW.amount_through_charge_payment, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_installment_charge_u;
CREATE TRIGGER `m_loan_installment_charge_u`
AFTER UPDATE
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NEW.loan_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_date', OLD.due_date, NEW.due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_through_charge_payment', OLD.amount_through_charge_payment, NEW.amount_through_charge_payment);
  END;
DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_d;
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_d`
BEFORE DELETE
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_interest_recalculation_additional_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'effective_date', OLD.effective_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_i;
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_i`
AFTER INSERT
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_interest_recalculation_additional_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', NEW.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'effective_date', NEW.effective_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_u;
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_u`
AFTER UPDATE
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_interest_recalculation_additional_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NEW.loan_repayment_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'effective_date', OLD.effective_date, NEW.effective_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_d;
CREATE TRIGGER `m_loan_officer_assignment_history_d`
BEFORE DELETE
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_i;
CREATE TRIGGER `m_loan_officer_assignment_history_i`
AFTER INSERT
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_officer_id', NEW.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_u;
CREATE TRIGGER `m_loan_officer_assignment_history_u`
AFTER UPDATE
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NEW.loan_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END;
DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_d;
CREATE TRIGGER `m_loan_overdue_installment_charge_d`
BEFORE DELETE
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_overdue_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'frequency_number', OLD.frequency_number, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_i;
CREATE TRIGGER `m_loan_overdue_installment_charge_i`
AFTER INSERT
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_overdue_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_schedule_id', NEW.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'frequency_number', NEW.frequency_number, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_u;
CREATE TRIGGER `m_loan_overdue_installment_charge_u`
AFTER UPDATE
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_overdue_installment_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NEW.loan_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'frequency_number', OLD.frequency_number, NEW.frequency_number);
  END;
DROP TRIGGER IF EXISTS m_loan_paid_in_advance_d;
CREATE TRIGGER `m_loan_paid_in_advance_d`
BEFORE DELETE
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_paid_in_advance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_in_advance_derived', OLD.principal_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_in_advance_derived', OLD.interest_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', OLD.fee_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', OLD.penalty_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_in_advance_derived', OLD.total_in_advance_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_paid_in_advance_i;
CREATE TRIGGER `m_loan_paid_in_advance_i`
AFTER INSERT
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_paid_in_advance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_in_advance_derived', NEW.principal_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_in_advance_derived', NEW.interest_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', NEW.fee_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', NEW.penalty_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_in_advance_derived', NEW.total_in_advance_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_paid_in_advance_u;
CREATE TRIGGER `m_loan_paid_in_advance_u`
AFTER UPDATE
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_paid_in_advance');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_in_advance_derived', OLD.principal_in_advance_derived, NEW.principal_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_in_advance_derived', OLD.interest_in_advance_derived, NEW.interest_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', OLD.fee_charges_in_advance_derived, NEW.fee_charges_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', OLD.penalty_charges_in_advance_derived, NEW.penalty_charges_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_in_advance_derived', OLD.total_in_advance_derived, NEW.total_in_advance_derived);
  END;
DROP TRIGGER IF EXISTS m_loan_recalculation_details_d;
CREATE TRIGGER `m_loan_recalculation_details_d`
BEFORE DELETE
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_recalculation_details_i;
CREATE TRIGGER `m_loan_recalculation_details_i`
AFTER INSERT
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compound_type_enum', NEW.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', NEW.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', NEW.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_interval', NEW.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', NEW.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_interval', NEW.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', NEW.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_on_day', NEW.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', NEW.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', NEW.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', NEW.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', NEW.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', NEW.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', NEW.allow_compounding_on_eod, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_recalculation_details_u;
CREATE TRIGGER `m_loan_recalculation_details_u`
AFTER UPDATE
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NEW.compound_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NEW.reschedule_strategy_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NEW.rest_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NEW.rest_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NEW.compounding_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NEW.compounding_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NEW.rest_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NEW.rest_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NEW.rest_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NEW.compounding_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NEW.compounding_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NEW.is_compounding_to_be_posted_as_transaction);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NEW.compounding_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NEW.allow_compounding_on_eod);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_d;
CREATE TRIGGER `m_loan_repayment_schedule_d`
BEFORE DELETE
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_repayment_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_completed_derived', OLD.principal_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_completed_derived', OLD.interest_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_interest_derived', OLD.accrual_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', OLD.fee_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', OLD.accrual_fee_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', OLD.penalty_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', OLD.accrual_penalty_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculated_interest_component', OLD.recalculated_interest_component, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_i;
CREATE TRIGGER `m_loan_repayment_schedule_i`
AFTER INSERT
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_repayment_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_completed_derived', NEW.principal_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', NEW.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_amount', NEW.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_completed_derived', NEW.interest_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', NEW.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_waived_derived', NEW.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_interest_derived', NEW.accrual_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_amount', NEW.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', NEW.fee_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', NEW.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', NEW.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', NEW.accrual_fee_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_amount', NEW.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', NEW.penalty_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', NEW.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', NEW.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', NEW.accrual_penalty_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', NEW.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_late_derived', NEW.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'completed_derived', NEW.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'obligations_met_on_date', NEW.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recalculated_interest_component', NEW.recalculated_interest_component, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_u;
CREATE TRIGGER `m_loan_repayment_schedule_u`
AFTER UPDATE
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_repayment_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_completed_derived', OLD.principal_completed_derived, NEW.principal_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NEW.principal_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NEW.interest_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_completed_derived', OLD.interest_completed_derived, NEW.interest_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NEW.interest_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NEW.interest_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_interest_derived', OLD.accrual_interest_derived, NEW.accrual_interest_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NEW.fee_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', OLD.fee_charges_completed_derived, NEW.fee_charges_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NEW.fee_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NEW.fee_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', OLD.accrual_fee_charges_derived, NEW.accrual_fee_charges_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NEW.penalty_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', OLD.penalty_charges_completed_derived, NEW.penalty_charges_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NEW.penalty_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NEW.penalty_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', OLD.accrual_penalty_charges_derived, NEW.accrual_penalty_charges_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NEW.total_paid_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NEW.total_paid_late_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NEW.completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NEW.obligations_met_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculated_interest_component', OLD.recalculated_interest_component, NEW.recalculated_interest_component);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_d;
CREATE TRIGGER `m_loan_repayment_schedule_history_d`
BEFORE DELETE
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_repayment_schedule_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_i;
CREATE TRIGGER `m_loan_repayment_schedule_history_i`
AFTER INSERT
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_repayment_schedule_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', NEW.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_amount', NEW.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_amount', NEW.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_amount', NEW.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_u;
CREATE TRIGGER `m_loan_repayment_schedule_history_u`
AFTER UPDATE
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_repayment_schedule_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NEW.loan_reschedule_request_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NEW.interest_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NEW.fee_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NEW.penalty_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_d;
CREATE TRIGGER `m_loan_reschedule_request_d`
BEFORE DELETE
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_reschedule_request');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_installment', OLD.reschedule_from_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_date', OLD.reschedule_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculate_interest', OLD.recalculate_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', OLD.reschedule_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_comment', OLD.reschedule_reason_comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_by_user_id', OLD.submitted_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_on_date', OLD.approved_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_by_user_id', OLD.approved_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_on_date', OLD.rejected_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_by_user_id', OLD.rejected_by_user_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_i;
CREATE TRIGGER `m_loan_reschedule_request_i`
AFTER INSERT
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_reschedule_request');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_from_installment', NEW.reschedule_from_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_from_date', NEW.reschedule_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recalculate_interest', NEW.recalculate_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', NEW.reschedule_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_reason_comment', NEW.reschedule_reason_comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_on_date', NEW.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_by_user_id', NEW.submitted_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_on_date', NEW.approved_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_by_user_id', NEW.approved_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_on_date', NEW.rejected_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_by_user_id', NEW.rejected_by_user_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_u;
CREATE TRIGGER `m_loan_reschedule_request_u`
AFTER UPDATE
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_reschedule_request');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_installment', OLD.reschedule_from_installment, NEW.reschedule_from_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_date', OLD.reschedule_from_date, NEW.reschedule_from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculate_interest', OLD.recalculate_interest, NEW.recalculate_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', OLD.reschedule_reason_cv_id, NEW.reschedule_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_comment', OLD.reschedule_reason_comment, NEW.reschedule_reason_comment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NEW.submitted_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_by_user_id', OLD.submitted_by_user_id, NEW.submitted_by_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_on_date', OLD.approved_on_date, NEW.approved_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_by_user_id', OLD.approved_by_user_id, NEW.approved_by_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_on_date', OLD.rejected_on_date, NEW.rejected_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_by_user_id', OLD.rejected_by_user_id, NEW.rejected_by_user_id);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_d;
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_d`
BEFORE DELETE
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_reschedule_request_term_variations_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_term_variations_id', OLD.loan_term_variations_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_i;
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_i`
AFTER INSERT
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_reschedule_request_term_variations_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', NEW.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_term_variations_id', NEW.loan_term_variations_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_u;
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_u`
AFTER UPDATE
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_reschedule_request_term_variations_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NEW.loan_reschedule_request_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_term_variations_id', OLD.loan_term_variations_id, NEW.loan_term_variations_id);
  END;
DROP TRIGGER IF EXISTS m_loan_term_variations_d;
CREATE TRIGGER `m_loan_term_variations_d`
BEFORE DELETE
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_term_variations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_type', OLD.term_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applicable_date', OLD.applicable_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_value', OLD.decimal_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_specific_to_installment', OLD.is_specific_to_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applied_on_loan_status', OLD.applied_on_loan_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_term_variations_i;
CREATE TRIGGER `m_loan_term_variations_i`
AFTER INSERT
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_term_variations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_type', NEW.term_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'applicable_date', NEW.applicable_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_value', NEW.decimal_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_value', NEW.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_specific_to_installment', NEW.is_specific_to_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'applied_on_loan_status', NEW.applied_on_loan_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_term_variations_u;
CREATE TRIGGER `m_loan_term_variations_u`
AFTER UPDATE
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_term_variations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_type', OLD.term_type, NEW.term_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applicable_date', OLD.applicable_date, NEW.applicable_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_value', OLD.decimal_value, NEW.decimal_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NEW.date_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_specific_to_installment', OLD.is_specific_to_installment, NEW.is_specific_to_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applied_on_loan_status', OLD.applied_on_loan_status, NEW.applied_on_loan_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
  END;
DROP TRIGGER IF EXISTS m_loan_topup_d;
CREATE TRIGGER `m_loan_topup_d`
BEFORE DELETE
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_topup');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_loan_id', OLD.closure_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'topup_amount', OLD.topup_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_topup_i;
CREATE TRIGGER `m_loan_topup_i`
AFTER INSERT
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_topup');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_loan_id', NEW.closure_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'topup_amount', NEW.topup_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_topup_u;
CREATE TRIGGER `m_loan_topup_u`
AFTER UPDATE
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_topup');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_loan_id', OLD.closure_loan_id, NEW.closure_loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'topup_amount', OLD.topup_amount, NEW.topup_amount);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_charges_d;
CREATE TRIGGER `m_loan_tranche_charges_d`
BEFORE DELETE
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_tranche_charges');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_charges_i;
CREATE TRIGGER `m_loan_tranche_charges_i`
AFTER INSERT
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_tranche_charges');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_charges_u;
CREATE TRIGGER `m_loan_tranche_charges_u`
AFTER UPDATE
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_tranche_charges');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_d;
CREATE TRIGGER `m_loan_tranche_disbursement_charge_d`
BEFORE DELETE
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_tranche_disbursement_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursement_detail_id', OLD.disbursement_detail_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_i;
CREATE TRIGGER `m_loan_tranche_disbursement_charge_i`
AFTER INSERT
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_tranche_disbursement_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursement_detail_id', NEW.disbursement_detail_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_u;
CREATE TRIGGER `m_loan_tranche_disbursement_charge_u`
AFTER UPDATE
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_tranche_disbursement_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursement_detail_id', OLD.disbursement_detail_id, NEW.disbursement_detail_id);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_d;
CREATE TRIGGER `m_loan_transaction_d`
BEFORE DELETE
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overpayment_portion_derived', OLD.overpayment_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unrecognized_income_portion', OLD.unrecognized_income_portion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', OLD.outstanding_loan_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', OLD.manually_adjusted_or_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_i;
CREATE TRIGGER `m_loan_transaction_i`
AFTER INSERT
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_portion_derived', NEW.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_portion_derived', NEW.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', NEW.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', NEW.penalty_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overpayment_portion_derived', NEW.overpayment_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unrecognized_income_portion', NEW.unrecognized_income_portion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', NEW.outstanding_loan_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_on_date', NEW.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', NEW.manually_adjusted_or_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_u;
CREATE TRIGGER `m_loan_transaction_u`
AFTER UPDATE
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NEW.principal_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NEW.interest_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NEW.fee_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NEW.penalty_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overpayment_portion_derived', OLD.overpayment_portion_derived, NEW.overpayment_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unrecognized_income_portion', OLD.unrecognized_income_portion, NEW.unrecognized_income_portion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', OLD.outstanding_loan_balance_derived, NEW.outstanding_loan_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NEW.submitted_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', OLD.manually_adjusted_or_reversed, NEW.manually_adjusted_or_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_d;
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_d`
BEFORE DELETE
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loan_transaction_repayment_schedule_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_i;
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_i`
AFTER INSERT
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loan_transaction_repayment_schedule_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', NEW.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_portion_derived', NEW.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_portion_derived', NEW.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', NEW.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', NEW.penalty_charges_portion_derived, NULL);
  END;
DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_u;
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_u`
AFTER UPDATE
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loan_transaction_repayment_schedule_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NEW.loan_repayment_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NEW.principal_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NEW.interest_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NEW.fee_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NEW.penalty_charges_portion_derived);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_d;
CREATE TRIGGER `m_loanproduct_provisioning_entry_d`
BEFORE DELETE
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loanproduct_provisioning_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'history_id', OLD.history_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_in_days', OLD.overdue_in_days, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reseve_amount', OLD.reseve_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_i;
CREATE TRIGGER `m_loanproduct_provisioning_entry_i`
AFTER INSERT
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loanproduct_provisioning_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'history_id', NEW.history_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_id', NEW.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_in_days', NEW.overdue_in_days, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reseve_amount', NEW.reseve_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'liability_account', NEW.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expense_account', NEW.expense_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_u;
CREATE TRIGGER `m_loanproduct_provisioning_entry_u`
AFTER UPDATE
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loanproduct_provisioning_entry');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'history_id', OLD.history_id, NEW.history_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NEW.category_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_in_days', OLD.overdue_in_days, NEW.overdue_in_days);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reseve_amount', OLD.reseve_amount, NEW.reseve_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NEW.liability_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NEW.expense_account);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_d;
CREATE TRIGGER `m_loanproduct_provisioning_mapping_d`
BEFORE DELETE
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_loanproduct_provisioning_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_i;
CREATE TRIGGER `m_loanproduct_provisioning_mapping_i`
AFTER INSERT
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_loanproduct_provisioning_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_u;
CREATE TRIGGER `m_loanproduct_provisioning_mapping_u`
AFTER UPDATE
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_loanproduct_provisioning_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
  END;
DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_d;
CREATE TRIGGER `m_mandatory_savings_schedule_d`
BEFORE DELETE
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_mandatory_savings_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', OLD.deposit_amount_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_i;
CREATE TRIGGER `m_mandatory_savings_schedule_i`
AFTER INSERT
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_mandatory_savings_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', NEW.deposit_amount_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', NEW.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_late_derived', NEW.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'completed_derived', NEW.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'obligations_met_on_date', NEW.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_u;
CREATE TRIGGER `m_mandatory_savings_schedule_u`
AFTER UPDATE
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_mandatory_savings_schedule');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', OLD.deposit_amount_completed_derived, NEW.deposit_amount_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NEW.total_paid_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NEW.total_paid_late_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NEW.completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NEW.obligations_met_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END;
DROP TRIGGER IF EXISTS m_meeting_d;
CREATE TRIGGER `m_meeting_d`
BEFORE DELETE
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_meeting');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_instance_id', OLD.calendar_instance_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_date', OLD.meeting_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_meeting_i;
CREATE TRIGGER `m_meeting_i`
AFTER INSERT
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_meeting');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_instance_id', NEW.calendar_instance_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_date', NEW.meeting_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_meeting_u;
CREATE TRIGGER `m_meeting_u`
AFTER UPDATE
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_meeting');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_instance_id', OLD.calendar_instance_id, NEW.calendar_instance_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_date', OLD.meeting_date, NEW.meeting_date);
  END;
DROP TRIGGER IF EXISTS m_note_d;
CREATE TRIGGER `m_note_d`
BEFORE DELETE
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_note');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_account_id', OLD.share_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note_type_enum', OLD.note_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note', OLD.note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_note_i;
CREATE TRIGGER `m_note_i`
AFTER INSERT
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_note');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_transaction_id', NEW.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_account_id', NEW.share_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'note_type_enum', NEW.note_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'note', NEW.note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_note_u;
CREATE TRIGGER `m_note_u`
AFTER UPDATE
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_note');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NEW.savings_account_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_account_id', OLD.share_account_id, NEW.share_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note_type_enum', OLD.note_type_enum, NEW.note_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note', OLD.note, NEW.note);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END;
DROP TRIGGER IF EXISTS m_office_d;
CREATE TRIGGER `m_office_d`
BEFORE DELETE
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'opening_date', OLD.opening_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_office_i;
CREATE TRIGGER `m_office_i`
AFTER INSERT
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'opening_date', NEW.opening_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_office_u;
CREATE TRIGGER `m_office_u`
AFTER UPDATE
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_office');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'opening_date', OLD.opening_date, NEW.opening_date);
  END;
DROP TRIGGER IF EXISTS m_office_transaction_d;
CREATE TRIGGER `m_office_transaction_d`
BEFORE DELETE
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_office_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_amount', OLD.transaction_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_office_transaction_i;
CREATE TRIGGER `m_office_transaction_i`
AFTER INSERT
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_office_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_office_id', NEW.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_office_id', NEW.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_amount', NEW.transaction_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_office_transaction_u;
CREATE TRIGGER `m_office_transaction_u`
AFTER UPDATE
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_office_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NEW.from_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NEW.to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_amount', OLD.transaction_amount, NEW.transaction_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS m_organisation_creditbureau_d;
CREATE TRIGGER `m_organisation_creditbureau_d`
BEFORE DELETE
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_organisation_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'alias', OLD.alias, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_organisation_creditbureau_i;
CREATE TRIGGER `m_organisation_creditbureau_i`
AFTER INSERT
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_organisation_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'alias', NEW.alias, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'creditbureau_id', NEW.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_organisation_creditbureau_u;
CREATE TRIGGER `m_organisation_creditbureau_u`
AFTER UPDATE
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_organisation_creditbureau');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'alias', OLD.alias, NEW.alias);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NEW.creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_organisation_currency_d;
CREATE TRIGGER `m_organisation_currency_d`
BEFORE DELETE
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_organisation_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_organisation_currency_i;
CREATE TRIGGER `m_organisation_currency_i`
AFTER INSERT
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_organisation_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_places', NEW.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_symbol', NEW.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'internationalized_name_code', NEW.internationalized_name_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_organisation_currency_u;
CREATE TRIGGER `m_organisation_currency_u`
AFTER UPDATE
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_organisation_currency');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NEW.decimal_places);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NEW.display_symbol);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NEW.internationalized_name_code);
  END;
DROP TRIGGER IF EXISTS m_password_validation_policy_d;
CREATE TRIGGER `m_password_validation_policy_d`
BEFORE DELETE
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_password_validation_policy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'regex', OLD.regex, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'key', OLD.key, NULL);
  END;
DROP TRIGGER IF EXISTS m_password_validation_policy_i;
CREATE TRIGGER `m_password_validation_policy_i`
AFTER INSERT
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_password_validation_policy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'regex', NEW.regex, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'active', NEW.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'key', NEW.key, NULL);
  END;
DROP TRIGGER IF EXISTS m_password_validation_policy_u;
CREATE TRIGGER `m_password_validation_policy_u`
AFTER UPDATE
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_password_validation_policy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'regex', OLD.regex, NEW.regex);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NEW.active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'key', OLD.key, NEW.key);
  END;
DROP TRIGGER IF EXISTS m_payment_detail_d;
CREATE TRIGGER `m_payment_detail_d`
BEFORE DELETE
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_payment_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type_id', OLD.payment_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'check_number', OLD.check_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'receipt_number', OLD.receipt_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'bank_number', OLD.bank_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'routing_code', OLD.routing_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_payment_detail_i;
CREATE TRIGGER `m_payment_detail_i`
AFTER INSERT
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_payment_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_type_id', NEW.payment_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_number', NEW.account_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'check_number', NEW.check_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'receipt_number', NEW.receipt_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'bank_number', NEW.bank_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'routing_code', NEW.routing_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_payment_detail_u;
CREATE TRIGGER `m_payment_detail_u`
AFTER UPDATE
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_payment_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type_id', OLD.payment_type_id, NEW.payment_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NEW.account_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'check_number', OLD.check_number, NEW.check_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'receipt_number', OLD.receipt_number, NEW.receipt_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'bank_number', OLD.bank_number, NEW.bank_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'routing_code', OLD.routing_code, NEW.routing_code);
  END;
DROP TRIGGER IF EXISTS m_payment_type_d;
CREATE TRIGGER `m_payment_type_d`
BEFORE DELETE
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_payment_type');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_cash_payment', OLD.is_cash_payment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NULL);
  END;
DROP TRIGGER IF EXISTS m_payment_type_i;
CREATE TRIGGER `m_payment_type_i`
AFTER INSERT
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_payment_type');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_cash_payment', NEW.is_cash_payment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'order_position', NEW.order_position, NULL);
  END;
DROP TRIGGER IF EXISTS m_payment_type_u;
CREATE TRIGGER `m_payment_type_u`
AFTER UPDATE
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_payment_type');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_cash_payment', OLD.is_cash_payment, NEW.is_cash_payment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NEW.order_position);
  END;
DROP TRIGGER IF EXISTS m_permission_d;
CREATE TRIGGER `m_permission_d`
BEFORE DELETE
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grouping', OLD.grouping, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_maker_checker', OLD.can_maker_checker, NULL);
  END;
DROP TRIGGER IF EXISTS m_permission_i;
CREATE TRIGGER `m_permission_i`
AFTER INSERT
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grouping', NEW.grouping, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_maker_checker', NEW.can_maker_checker, NULL);
  END;
DROP TRIGGER IF EXISTS m_permission_u;
CREATE TRIGGER `m_permission_u`
AFTER UPDATE
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grouping', OLD.grouping, NEW.grouping);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_maker_checker', OLD.can_maker_checker, NEW.can_maker_checker);
  END;
DROP TRIGGER IF EXISTS m_portfolio_account_associations_d;
CREATE TRIGGER `m_portfolio_account_associations_d`
BEFORE DELETE
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_portfolio_account_associations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_account_id', OLD.loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_loan_account_id', OLD.linked_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_savings_account_id', OLD.linked_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'association_type_enum', OLD.association_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_portfolio_account_associations_i;
CREATE TRIGGER `m_portfolio_account_associations_i`
AFTER INSERT
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_portfolio_account_associations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_account_id', NEW.loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'linked_loan_account_id', NEW.linked_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'linked_savings_account_id', NEW.linked_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'association_type_enum', NEW.association_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_portfolio_account_associations_u;
CREATE TRIGGER `m_portfolio_account_associations_u`
AFTER UPDATE
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_portfolio_account_associations');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_account_id', OLD.loan_account_id, NEW.loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_loan_account_id', OLD.linked_loan_account_id, NEW.linked_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_savings_account_id', OLD.linked_savings_account_id, NEW.linked_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'association_type_enum', OLD.association_type_enum, NEW.association_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_portfolio_command_source_d;
CREATE TRIGGER `m_portfolio_command_source_d`
BEFORE DELETE
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_portfolio_command_source');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'api_get_url', OLD.api_get_url, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_id', OLD.resource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subresource_id', OLD.subresource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'command_as_json', OLD.command_as_json, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maker_id', OLD.maker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'made_on_date', OLD.made_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checker_id', OLD.checker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checked_on_date', OLD.checked_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processing_result_enum', OLD.processing_result_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_portfolio_command_source_i;
CREATE TRIGGER `m_portfolio_command_source_i`
AFTER INSERT
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_portfolio_command_source');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'api_get_url', NEW.api_get_url, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'resource_id', NEW.resource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'subresource_id', NEW.subresource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'command_as_json', NEW.command_as_json, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maker_id', NEW.maker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'made_on_date', NEW.made_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checker_id', NEW.checker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checked_on_date', NEW.checked_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'processing_result_enum', NEW.processing_result_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_id', NEW.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'creditbureau_id', NEW.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_portfolio_command_source_u;
CREATE TRIGGER `m_portfolio_command_source_u`
AFTER UPDATE
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_portfolio_command_source');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'api_get_url', OLD.api_get_url, NEW.api_get_url);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_id', OLD.resource_id, NEW.resource_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subresource_id', OLD.subresource_id, NEW.subresource_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'command_as_json', OLD.command_as_json, NEW.command_as_json);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maker_id', OLD.maker_id, NEW.maker_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'made_on_date', OLD.made_on_date, NEW.made_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checker_id', OLD.checker_id, NEW.checker_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checked_on_date', OLD.checked_on_date, NEW.checked_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processing_result_enum', OLD.processing_result_enum, NEW.processing_result_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NEW.transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NEW.creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
  END;
DROP TRIGGER IF EXISTS m_product_loan_d;
CREATE TRIGGER `m_product_loan_d`
BEFORE DELETE
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_principal_amount', OLD.min_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_principal_amount', OLD.max_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', OLD.is_linked_to_floating_interest_rates, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_variabe_installments', OLD.allow_variabe_installments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', OLD.min_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', OLD.max_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_number_of_repayments', OLD.min_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_number_of_repayments', OLD.max_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', OLD.include_in_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_borrower_cycle', OLD.use_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'close_date', OLD.close_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', OLD.allow_multiple_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_disbursals', OLD.max_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_days_for_npa', OLD.overdue_days_for_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', OLD.min_days_between_disbursal_and_first_repayment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hold_guarantee_funds', OLD.hold_guarantee_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', OLD.principal_threshold_for_last_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', OLD.account_moves_out_of_npa_only_on_arrears_completion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', OLD.can_define_fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', OLD.instalment_amount_in_multiples_of, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_use_for_topup', OLD.can_use_for_topup, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', OLD.sync_expected_with_disbursement_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_i;
CREATE TRIGGER `m_product_loan_i`
AFTER INSERT
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_principal_amount', NEW.min_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_principal_amount', NEW.max_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fund_id', NEW.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', NEW.is_linked_to_floating_interest_rates, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_variabe_installments', NEW.allow_variabe_installments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', NEW.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', NEW.min_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', NEW.max_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', NEW.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', NEW.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', NEW.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', NEW.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_repayments', NEW.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_number_of_repayments', NEW.min_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_number_of_repayments', NEW.max_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_principal_periods', NEW.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', NEW.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_interest_periods', NEW.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_interest_free_periods', NEW.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', NEW.include_in_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'use_borrower_cycle', NEW.use_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'close_date', NEW.close_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', NEW.allow_multiple_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_disbursals', NEW.max_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', NEW.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_days_for_npa', NEW.overdue_days_for_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_month_enum', NEW.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_year_enum', NEW.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', NEW.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', NEW.min_days_between_disbursal_and_first_repayment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hold_guarantee_funds', NEW.hold_guarantee_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', NEW.principal_threshold_for_last_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', NEW.account_moves_out_of_npa_only_on_arrears_completion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', NEW.can_define_fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', NEW.instalment_amount_in_multiples_of, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_use_for_topup', NEW.can_use_for_topup, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', NEW.sync_expected_with_disbursement_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_u;
CREATE TRIGGER `m_product_loan_u`
AFTER UPDATE
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_principal_amount', OLD.min_principal_amount, NEW.min_principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_principal_amount', OLD.max_principal_amount, NEW.max_principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NEW.fund_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', OLD.is_linked_to_floating_interest_rates, NEW.is_linked_to_floating_interest_rates);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_variabe_installments', OLD.allow_variabe_installments, NEW.allow_variabe_installments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NEW.nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', OLD.min_nominal_interest_rate_per_period, NEW.min_nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', OLD.max_nominal_interest_rate_per_period, NEW.max_nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NEW.interest_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NEW.annual_nominal_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NEW.allow_partial_period_interest_calcualtion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NEW.repayment_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NEW.number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_number_of_repayments', OLD.min_number_of_repayments, NEW.min_number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_number_of_repayments', OLD.max_number_of_repayments, NEW.max_number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NEW.grace_on_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NEW.recurring_moratorium_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NEW.grace_on_interest_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NEW.grace_interest_free_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', OLD.include_in_borrower_cycle, NEW.include_in_borrower_cycle);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_borrower_cycle', OLD.use_borrower_cycle, NEW.use_borrower_cycle);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'close_date', OLD.close_date, NEW.close_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', OLD.allow_multiple_disbursals, NEW.allow_multiple_disbursals);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_disbursals', OLD.max_disbursals, NEW.max_disbursals);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NEW.max_outstanding_loan_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_days_for_npa', OLD.overdue_days_for_npa, NEW.overdue_days_for_npa);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NEW.days_in_month_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NEW.days_in_year_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NEW.interest_recalculation_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', OLD.min_days_between_disbursal_and_first_repayment, NEW.min_days_between_disbursal_and_first_repayment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hold_guarantee_funds', OLD.hold_guarantee_funds, NEW.hold_guarantee_funds);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', OLD.principal_threshold_for_last_installment, NEW.principal_threshold_for_last_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', OLD.account_moves_out_of_npa_only_on_arrears_completion, NEW.account_moves_out_of_npa_only_on_arrears_completion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', OLD.can_define_fixed_emi_amount, NEW.can_define_fixed_emi_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', OLD.instalment_amount_in_multiples_of, NEW.instalment_amount_in_multiples_of);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_use_for_topup', OLD.can_use_for_topup, NEW.can_use_for_topup);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', OLD.sync_expected_with_disbursement_date, NEW.sync_expected_with_disbursement_date);
  END;
DROP TRIGGER IF EXISTS m_product_loan_charge_d;
CREATE TRIGGER `m_product_loan_charge_d`
BEFORE DELETE
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_loan_id', OLD.product_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_charge_i;
CREATE TRIGGER `m_product_loan_charge_i`
AFTER INSERT
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_loan_id', NEW.product_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_charge_u;
CREATE TRIGGER `m_product_loan_charge_u`
AFTER UPDATE
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_loan_id', OLD.product_loan_id, NEW.product_loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END;
DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_d;
CREATE TRIGGER `m_product_loan_configurable_attributes_d`
BEFORE DELETE
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_configurable_attributes');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'moratorium', OLD.moratorium, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_i;
CREATE TRIGGER `m_product_loan_configurable_attributes_i`
AFTER INSERT
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_configurable_attributes');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'moratorium', NEW.moratorium, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_u;
CREATE TRIGGER `m_product_loan_configurable_attributes_u`
AFTER UPDATE
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_configurable_attributes');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'moratorium', OLD.moratorium, NEW.moratorium);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
  END;
DROP TRIGGER IF EXISTS m_product_loan_floating_rates_d;
CREATE TRIGGER `m_product_loan_floating_rates_d`
BEFORE DELETE
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_differential_lending_rate', OLD.min_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_differential_lending_rate', OLD.default_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_differential_lending_rate', OLD.max_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', OLD.is_floating_interest_rate_calculation_allowed, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_floating_rates_i;
CREATE TRIGGER `m_product_loan_floating_rates_i`
AFTER INSERT
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'floating_rates_id', NEW.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_differential', NEW.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_differential_lending_rate', NEW.min_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_differential_lending_rate', NEW.default_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_differential_lending_rate', NEW.max_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', NEW.is_floating_interest_rate_calculation_allowed, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_floating_rates_u;
CREATE TRIGGER `m_product_loan_floating_rates_u`
AFTER UPDATE
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_floating_rates');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NEW.floating_rates_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NEW.interest_rate_differential);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_differential_lending_rate', OLD.min_differential_lending_rate, NEW.min_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_differential_lending_rate', OLD.default_differential_lending_rate, NEW.default_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_differential_lending_rate', OLD.max_differential_lending_rate, NEW.max_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', OLD.is_floating_interest_rate_calculation_allowed, NEW.is_floating_interest_rate_calculation_allowed);
  END;
DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_d;
CREATE TRIGGER `m_product_loan_guarantee_details_d`
BEFORE DELETE
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_guarantee_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_guarantee', OLD.mandatory_guarantee, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', OLD.minimum_guarantee_from_own_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', OLD.minimum_guarantee_from_guarantor_funds, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_i;
CREATE TRIGGER `m_product_loan_guarantee_details_i`
AFTER INSERT
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_guarantee_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mandatory_guarantee', NEW.mandatory_guarantee, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', NEW.minimum_guarantee_from_own_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', NEW.minimum_guarantee_from_guarantor_funds, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_u;
CREATE TRIGGER `m_product_loan_guarantee_details_u`
AFTER UPDATE
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_guarantee_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_guarantee', OLD.mandatory_guarantee, NEW.mandatory_guarantee);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', OLD.minimum_guarantee_from_own_funds, NEW.minimum_guarantee_from_own_funds);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', OLD.minimum_guarantee_from_guarantor_funds, NEW.minimum_guarantee_from_guarantor_funds);
  END;
DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_d;
CREATE TRIGGER `m_product_loan_recalculation_details_d`
BEFORE DELETE
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', OLD.arrears_based_on_original_schedule, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', OLD.pre_close_interest_calculation_strategy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_i;
CREATE TRIGGER `m_product_loan_recalculation_details_i`
AFTER INSERT
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compound_type_enum', NEW.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', NEW.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', NEW.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_interval', NEW.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', NEW.arrears_based_on_original_schedule, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', NEW.pre_close_interest_calculation_strategy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', NEW.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_interval', NEW.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', NEW.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_on_day', NEW.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', NEW.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', NEW.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', NEW.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', NEW.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', NEW.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', NEW.allow_compounding_on_eod, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_u;
CREATE TRIGGER `m_product_loan_recalculation_details_u`
AFTER UPDATE
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_recalculation_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NEW.compound_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NEW.reschedule_strategy_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NEW.rest_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NEW.rest_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', OLD.arrears_based_on_original_schedule, NEW.arrears_based_on_original_schedule);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', OLD.pre_close_interest_calculation_strategy, NEW.pre_close_interest_calculation_strategy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NEW.compounding_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NEW.compounding_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NEW.rest_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NEW.rest_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NEW.rest_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NEW.compounding_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NEW.compounding_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NEW.compounding_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NEW.is_compounding_to_be_posted_as_transaction);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NEW.allow_compounding_on_eod);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_d;
CREATE TRIGGER `m_product_loan_variable_installment_config_d`
BEFORE DELETE
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_variable_installment_config');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_gap', OLD.minimum_gap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_gap', OLD.maximum_gap, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_i;
CREATE TRIGGER `m_product_loan_variable_installment_config_i`
AFTER INSERT
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_variable_installment_config');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_gap', NEW.minimum_gap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maximum_gap', NEW.maximum_gap, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_u;
CREATE TRIGGER `m_product_loan_variable_installment_config_u`
AFTER UPDATE
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_variable_installment_config');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_gap', OLD.minimum_gap, NEW.minimum_gap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_gap', OLD.maximum_gap, NEW.maximum_gap);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_d;
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_d`
BEFORE DELETE
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_loan_variations_borrower_cycle');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'borrower_cycle_number', OLD.borrower_cycle_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_condition', OLD.value_condition, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_type', OLD.param_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_value', OLD.default_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_value', OLD.max_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_value', OLD.min_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_i;
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_i`
AFTER INSERT
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_loan_variations_borrower_cycle');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'borrower_cycle_number', NEW.borrower_cycle_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_condition', NEW.value_condition, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'param_type', NEW.param_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_value', NEW.default_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_value', NEW.max_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_value', NEW.min_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_u;
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_u`
AFTER UPDATE
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_loan_variations_borrower_cycle');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'borrower_cycle_number', OLD.borrower_cycle_number, NEW.borrower_cycle_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_condition', OLD.value_condition, NEW.value_condition);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_type', OLD.param_type, NEW.param_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_value', OLD.default_value, NEW.default_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_value', OLD.max_value, NEW.max_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_value', OLD.min_value, NEW.min_value);
  END;
DROP TRIGGER IF EXISTS m_product_mix_d;
CREATE TRIGGER `m_product_mix_d`
BEFORE DELETE
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_product_mix');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'restricted_product_id', OLD.restricted_product_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_mix_i;
CREATE TRIGGER `m_product_mix_i`
AFTER INSERT
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_product_mix');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'restricted_product_id', NEW.restricted_product_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_product_mix_u;
CREATE TRIGGER `m_product_mix_u`
AFTER UPDATE
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_product_mix');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'restricted_product_id', OLD.restricted_product_id, NEW.restricted_product_id);
  END;
DROP TRIGGER IF EXISTS m_provision_category_d;
CREATE TRIGGER `m_provision_category_d`
BEFORE DELETE
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_provision_category');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_name', OLD.category_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_provision_category_i;
CREATE TRIGGER `m_provision_category_i`
AFTER INSERT
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_provision_category');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_name', NEW.category_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END;
DROP TRIGGER IF EXISTS m_provision_category_u;
CREATE TRIGGER `m_provision_category_u`
AFTER UPDATE
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_provision_category');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_name', OLD.category_name, NEW.category_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_d;
CREATE TRIGGER `m_provisioning_criteria_d`
BEFORE DELETE
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_provisioning_criteria');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_name', OLD.criteria_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_i;
CREATE TRIGGER `m_provisioning_criteria_i`
AFTER INSERT
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_provisioning_criteria');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_name', NEW.criteria_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_u;
CREATE TRIGGER `m_provisioning_criteria_u`
AFTER UPDATE
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_provisioning_criteria');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_name', OLD.criteria_name, NEW.criteria_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_d;
CREATE TRIGGER `m_provisioning_criteria_definition_d`
BEFORE DELETE
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_provisioning_criteria_definition');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_age', OLD.min_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_age', OLD.max_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provision_percentage', OLD.provision_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_i;
CREATE TRIGGER `m_provisioning_criteria_definition_i`
AFTER INSERT
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_provisioning_criteria_definition');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_id', NEW.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_age', NEW.min_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_age', NEW.max_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'provision_percentage', NEW.provision_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'liability_account', NEW.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expense_account', NEW.expense_account, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_u;
CREATE TRIGGER `m_provisioning_criteria_definition_u`
AFTER UPDATE
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_provisioning_criteria_definition');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NEW.category_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_age', OLD.min_age, NEW.min_age);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_age', OLD.max_age, NEW.max_age);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provision_percentage', OLD.provision_percentage, NEW.provision_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NEW.liability_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NEW.expense_account);
  END;
DROP TRIGGER IF EXISTS m_provisioning_history_d;
CREATE TRIGGER `m_provisioning_history_d`
BEFORE DELETE
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_provisioning_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'journal_entry_created', OLD.journal_entry_created, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_history_i;
CREATE TRIGGER `m_provisioning_history_i`
AFTER INSERT
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_provisioning_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'journal_entry_created', NEW.journal_entry_created, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_provisioning_history_u;
CREATE TRIGGER `m_provisioning_history_u`
AFTER UPDATE
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_provisioning_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'journal_entry_created', OLD.journal_entry_created, NEW.journal_entry_created);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_d;
CREATE TRIGGER `m_report_mailing_job_d`
BEFORE DELETE
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_recipients', OLD.email_recipients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_subject', OLD.email_subject, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_message', OLD.email_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_attachment_file_format', OLD.email_attachment_file_format, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_id', OLD.stretchy_report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_param_map', OLD.stretchy_report_param_map, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_datetime', OLD.previous_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_datetime', OLD.next_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_status', OLD.previous_run_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_log', OLD.previous_run_error_log, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_message', OLD.previous_run_error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_runs', OLD.number_of_runs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'run_as_userid', OLD.run_as_userid, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_i;
CREATE TRIGGER `m_report_mailing_job_i`
AFTER INSERT
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_datetime', NEW.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_recipients', NEW.email_recipients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_subject', NEW.email_subject, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_message', NEW.email_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_attachment_file_format', NEW.email_attachment_file_format, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stretchy_report_id', NEW.stretchy_report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stretchy_report_param_map', NEW.stretchy_report_param_map, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_datetime', NEW.previous_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_run_datetime', NEW.next_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_status', NEW.previous_run_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_error_log', NEW.previous_run_error_log, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_error_message', NEW.previous_run_error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_runs', NEW.number_of_runs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'run_as_userid', NEW.run_as_userid, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_u;
CREATE TRIGGER `m_report_mailing_job_u`
AFTER UPDATE
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NEW.start_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_recipients', OLD.email_recipients, NEW.email_recipients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_subject', OLD.email_subject, NEW.email_subject);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_message', OLD.email_message, NEW.email_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_attachment_file_format', OLD.email_attachment_file_format, NEW.email_attachment_file_format);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_id', OLD.stretchy_report_id, NEW.stretchy_report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_param_map', OLD.stretchy_report_param_map, NEW.stretchy_report_param_map);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_datetime', OLD.previous_run_datetime, NEW.previous_run_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_datetime', OLD.next_run_datetime, NEW.next_run_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_status', OLD.previous_run_status, NEW.previous_run_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_log', OLD.previous_run_error_log, NEW.previous_run_error_log);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_message', OLD.previous_run_error_message, NEW.previous_run_error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_runs', OLD.number_of_runs, NEW.number_of_runs);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'run_as_userid', OLD.run_as_userid, NEW.run_as_userid);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_d;
CREATE TRIGGER `m_report_mailing_job_configuration_d`
BEFORE DELETE
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_i;
CREATE TRIGGER `m_report_mailing_job_configuration_i`
AFTER INSERT
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_u;
CREATE TRIGGER `m_report_mailing_job_configuration_u`
AFTER UPDATE
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job_configuration');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_d;
CREATE TRIGGER `m_report_mailing_job_run_history_d`
BEFORE DELETE
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_datetime', OLD.end_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_i;
CREATE TRIGGER `m_report_mailing_job_run_history_i`
AFTER INSERT
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_id', NEW.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_datetime', NEW.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_datetime', NEW.end_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_message', NEW.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END;
DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_u;
CREATE TRIGGER `m_report_mailing_job_run_history_u`
AFTER UPDATE
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job_run_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NEW.job_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NEW.start_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_datetime', OLD.end_datetime, NEW.end_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NEW.error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END;
DROP TRIGGER IF EXISTS m_role_d;
CREATE TRIGGER `m_role_d`
BEFORE DELETE
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_disabled', OLD.is_disabled, NULL);
  END;
DROP TRIGGER IF EXISTS m_role_i;
CREATE TRIGGER `m_role_i`
AFTER INSERT
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_disabled', NEW.is_disabled, NULL);
  END;
DROP TRIGGER IF EXISTS m_role_u;
CREATE TRIGGER `m_role_u`
AFTER UPDATE
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_role');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_disabled', OLD.is_disabled, NEW.is_disabled);
  END;
DROP TRIGGER IF EXISTS m_role_permission_d;
CREATE TRIGGER `m_role_permission_d`
BEFORE DELETE
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_role_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'permission_id', OLD.permission_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_role_permission_i;
CREATE TRIGGER `m_role_permission_i`
AFTER INSERT
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_role_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_id', NEW.role_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'permission_id', NEW.permission_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_role_permission_u;
CREATE TRIGGER `m_role_permission_u`
AFTER UPDATE
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_role_permission');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NEW.role_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'permission_id', OLD.permission_id, NEW.permission_id);
  END;
DROP TRIGGER IF EXISTS m_savings_account_d;
CREATE TRIGGER `m_savings_account_d`
BEFORE DELETE
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_officer_id', OLD.field_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status_enum', OLD.sub_status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_date', OLD.activatedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', OLD.lockedin_until_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_deposits_derived', OLD.total_deposits_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawals_derived', OLD.total_withdrawals_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', OLD.total_withdrawal_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_fees_charge_derived', OLD.total_fees_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', OLD.total_penalty_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_annual_fees_derived', OLD.total_annual_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_earned_derived', OLD.total_interest_earned_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_posted_derived', OLD.total_interest_posted_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', OLD.total_overdraft_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', OLD.total_withhold_tax_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_balance_derived', OLD.account_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_interest_calculation_date', OLD.start_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_hold_funds_derived', OLD.on_hold_funds_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_interest_calculation_date', OLD.last_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_savings_amount_on_hold', OLD.total_savings_amount_on_hold, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_i;
CREATE TRIGGER `m_savings_account_i`
AFTER INSERT
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_officer_id', NEW.field_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sub_status_enum', NEW.sub_status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type_enum', NEW.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_type_enum', NEW.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_date', NEW.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_userid', NEW.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_date', NEW.activatedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', NEW.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', NEW.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_posting_period_enum', NEW.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', NEW.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', NEW.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_opening_balance', NEW.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', NEW.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_overdraft', NEW.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_limit', NEW.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', NEW.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', NEW.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', NEW.lockedin_until_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_deposits_derived', NEW.total_deposits_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withdrawals_derived', NEW.total_withdrawals_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', NEW.total_withdrawal_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_fees_charge_derived', NEW.total_fees_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', NEW.total_penalty_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_annual_fees_derived', NEW.total_annual_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_interest_earned_derived', NEW.total_interest_earned_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_interest_posted_derived', NEW.total_interest_posted_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', NEW.total_overdraft_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', NEW.total_withhold_tax_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_balance_derived', NEW.account_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_balance', NEW.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enforce_min_required_balance', NEW.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', NEW.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_interest_calculation_date', NEW.start_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'on_hold_funds_derived', NEW.on_hold_funds_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withhold_tax', NEW.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_interest_calculation_date', NEW.last_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_savings_amount_on_hold', NEW.total_savings_amount_on_hold, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_u;
CREATE TRIGGER `m_savings_account_u`
AFTER UPDATE
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_officer_id', OLD.field_officer_id, NEW.field_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status_enum', OLD.sub_status_enum, NEW.sub_status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NEW.account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NEW.deposit_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NEW.withdrawnon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NEW.withdrawnon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_date', OLD.activatedon_date, NEW.activatedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NEW.nominal_annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NEW.interest_compounding_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NEW.interest_posting_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NEW.interest_calculation_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NEW.interest_calculation_days_in_year_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NEW.min_required_opening_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NEW.withdrawal_fee_for_transfer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NEW.allow_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NEW.overdraft_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NEW.nominal_annual_interest_rate_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NEW.min_overdraft_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', OLD.lockedin_until_date_derived, NEW.lockedin_until_date_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_deposits_derived', OLD.total_deposits_derived, NEW.total_deposits_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawals_derived', OLD.total_withdrawals_derived, NEW.total_withdrawals_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', OLD.total_withdrawal_fees_derived, NEW.total_withdrawal_fees_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_fees_charge_derived', OLD.total_fees_charge_derived, NEW.total_fees_charge_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', OLD.total_penalty_charge_derived, NEW.total_penalty_charge_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_annual_fees_derived', OLD.total_annual_fees_derived, NEW.total_annual_fees_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_earned_derived', OLD.total_interest_earned_derived, NEW.total_interest_earned_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_posted_derived', OLD.total_interest_posted_derived, NEW.total_interest_posted_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', OLD.total_overdraft_interest_derived, NEW.total_overdraft_interest_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', OLD.total_withhold_tax_derived, NEW.total_withhold_tax_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_balance_derived', OLD.account_balance_derived, NEW.account_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NEW.min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NEW.enforce_min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NEW.min_balance_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_interest_calculation_date', OLD.start_interest_calculation_date, NEW.start_interest_calculation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_hold_funds_derived', OLD.on_hold_funds_derived, NEW.on_hold_funds_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NEW.withhold_tax);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_interest_calculation_date', OLD.last_interest_calculation_date, NEW.last_interest_calculation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_savings_amount_on_hold', OLD.total_savings_amount_on_hold, NEW.total_savings_amount_on_hold);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_d;
CREATE TRIGGER `m_savings_account_charge_d`
BEFORE DELETE
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_i;
CREATE TRIGGER `m_savings_account_charge_i`
AFTER INSERT
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_due_date', NEW.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_month', NEW.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_day', NEW.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_interval', NEW.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'inactivated_on_date', NEW.inactivated_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_u;
CREATE TRIGGER `m_savings_account_charge_u`
AFTER UPDATE
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NEW.charge_due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NEW.fee_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NEW.fee_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NEW.fee_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NEW.inactivated_on_date);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_d;
CREATE TRIGGER `m_savings_account_charge_paid_by_d`
BEFORE DELETE
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_charge_id', OLD.savings_account_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_i;
CREATE TRIGGER `m_savings_account_charge_paid_by_i`
AFTER INSERT
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_transaction_id', NEW.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_charge_id', NEW.savings_account_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_u;
CREATE TRIGGER `m_savings_account_charge_paid_by_u`
AFTER UPDATE
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NEW.savings_account_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_charge_id', OLD.savings_account_charge_id, NEW.savings_account_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_d;
CREATE TRIGGER `m_savings_account_interest_rate_chart_d`
BEFORE DELETE
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_i;
CREATE TRIGGER `m_savings_account_interest_rate_chart_i`
AFTER INSERT
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', NEW.is_primary_grouping_by_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_u;
CREATE TRIGGER `m_savings_account_interest_rate_chart_u`
AFTER UPDATE
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_interest_rate_chart');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NEW.is_primary_grouping_by_amount);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_d;
CREATE TRIGGER `m_savings_account_interest_rate_slab_d`
BEFORE DELETE
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', OLD.savings_account_interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_i;
CREATE TRIGGER `m_savings_account_interest_rate_slab_i`
AFTER INSERT
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', NEW.savings_account_interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'period_type_enum', NEW.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_period', NEW.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_period', NEW.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_from', NEW.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_to', NEW.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_interest_rate', NEW.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_u;
CREATE TRIGGER `m_savings_account_interest_rate_slab_u`
AFTER UPDATE
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_interest_rate_slab');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', OLD.savings_account_interest_rate_chart_id, NEW.savings_account_interest_rate_chart_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NEW.period_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NEW.from_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NEW.to_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NEW.amount_range_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NEW.amount_range_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NEW.annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_d;
CREATE TRIGGER `m_savings_account_transaction_d`
BEFORE DELETE
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_amount_derived', OLD.overdraft_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_end_date_derived', OLD.balance_end_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', OLD.balance_number_of_days_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'running_balance_derived', OLD.running_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cumulative_balance_derived', OLD.cumulative_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_manual', OLD.is_manual, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'release_id_of_hold_amount', OLD.release_id_of_hold_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_i;
CREATE TRIGGER `m_savings_account_transaction_i`
AFTER INSERT
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_amount_derived', NEW.overdraft_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'balance_end_date_derived', NEW.balance_end_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', NEW.balance_number_of_days_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'running_balance_derived', NEW.running_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cumulative_balance_derived', NEW.cumulative_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_manual', NEW.is_manual, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'release_id_of_hold_amount', NEW.release_id_of_hold_amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_u;
CREATE TRIGGER `m_savings_account_transaction_u`
AFTER UPDATE
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_transaction');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_amount_derived', OLD.overdraft_amount_derived, NEW.overdraft_amount_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_end_date_derived', OLD.balance_end_date_derived, NEW.balance_end_date_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', OLD.balance_number_of_days_derived, NEW.balance_number_of_days_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'running_balance_derived', OLD.running_balance_derived, NEW.running_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cumulative_balance_derived', OLD.cumulative_balance_derived, NEW.cumulative_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_manual', OLD.is_manual, NEW.is_manual);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'release_id_of_hold_amount', OLD.release_id_of_hold_amount, NEW.release_id_of_hold_amount);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_d;
CREATE TRIGGER `m_savings_account_transaction_tax_details_d`
BEFORE DELETE
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_account_transaction_tax_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_i;
CREATE TRIGGER `m_savings_account_transaction_tax_details_i`
AFTER INSERT
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_account_transaction_tax_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_u;
CREATE TRIGGER `m_savings_account_transaction_tax_details_u`
AFTER UPDATE
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_account_transaction_tax_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_savings_interest_incentives_d;
CREATE TRIGGER `m_savings_interest_incentives_d`
BEFORE DELETE
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', OLD.deposit_account_interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_interest_incentives_i;
CREATE TRIGGER `m_savings_interest_incentives_i`
AFTER INSERT
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', NEW.deposit_account_interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entiry_type', NEW.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_name', NEW.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'condition_type', NEW.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_value', NEW.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incentive_type', NEW.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_interest_incentives_u;
CREATE TRIGGER `m_savings_interest_incentives_u`
AFTER UPDATE
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_interest_incentives');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', OLD.deposit_account_interest_rate_slab_id, NEW.deposit_account_interest_rate_slab_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NEW.entiry_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NEW.attribute_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NEW.condition_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NEW.attribute_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NEW.incentive_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_d;
CREATE TRIGGER `m_savings_officer_assignment_history_d`
BEFORE DELETE
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_officer_id', OLD.savings_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_i;
CREATE TRIGGER `m_savings_officer_assignment_history_i`
AFTER INSERT
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_officer_id', NEW.savings_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_u;
CREATE TRIGGER `m_savings_officer_assignment_history_u`
AFTER UPDATE
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_officer_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_officer_id', OLD.savings_officer_id, NEW.savings_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END;
DROP TRIGGER IF EXISTS m_savings_product_d;
CREATE TRIGGER `m_savings_product_d`
BEFORE DELETE
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', OLD.withdrawal_fee_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', OLD.withdrawal_fee_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', OLD.is_dormancy_tracking_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_inactive', OLD.days_to_inactive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_dormancy', OLD.days_to_dormancy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_escheat', OLD.days_to_escheat, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_product_i;
CREATE TRIGGER `m_savings_product_i`
AFTER INSERT
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_type_enum', NEW.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', NEW.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', NEW.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_posting_period_enum', NEW.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', NEW.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', NEW.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_opening_balance', NEW.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', NEW.withdrawal_fee_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', NEW.withdrawal_fee_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', NEW.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_overdraft', NEW.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_limit', NEW.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', NEW.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', NEW.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_balance', NEW.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enforce_min_required_balance', NEW.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', NEW.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withhold_tax', NEW.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', NEW.is_dormancy_tracking_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_inactive', NEW.days_to_inactive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_dormancy', NEW.days_to_dormancy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_escheat', NEW.days_to_escheat, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_product_u;
CREATE TRIGGER `m_savings_product_u`
AFTER UPDATE
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NEW.deposit_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NEW.nominal_annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NEW.interest_compounding_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NEW.interest_posting_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NEW.interest_calculation_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NEW.interest_calculation_days_in_year_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NEW.min_required_opening_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', OLD.withdrawal_fee_amount, NEW.withdrawal_fee_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', OLD.withdrawal_fee_type_enum, NEW.withdrawal_fee_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NEW.withdrawal_fee_for_transfer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NEW.allow_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NEW.overdraft_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NEW.nominal_annual_interest_rate_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NEW.min_overdraft_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NEW.min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NEW.enforce_min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NEW.min_balance_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NEW.withhold_tax);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', OLD.is_dormancy_tracking_active, NEW.is_dormancy_tracking_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_inactive', OLD.days_to_inactive, NEW.days_to_inactive);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_dormancy', OLD.days_to_dormancy, NEW.days_to_dormancy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_escheat', OLD.days_to_escheat, NEW.days_to_escheat);
  END;
DROP TRIGGER IF EXISTS m_savings_product_charge_d;
CREATE TRIGGER `m_savings_product_charge_d`
BEFORE DELETE
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_savings_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_product_charge_i;
CREATE TRIGGER `m_savings_product_charge_i`
AFTER INSERT
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_savings_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_savings_product_charge_u;
CREATE TRIGGER `m_savings_product_charge_u`
AFTER UPDATE
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_savings_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END;
DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_d;
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_d`
BEFORE DELETE
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_selfservice_beneficiaries_tpt');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'app_user_id', OLD.app_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type', OLD.account_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_limit', OLD.transfer_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_i;
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_i`
AFTER INSERT
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_selfservice_beneficiaries_tpt');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'app_user_id', NEW.app_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type', NEW.account_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_limit', NEW.transfer_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_u;
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_u`
AFTER UPDATE
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_selfservice_beneficiaries_tpt');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'app_user_id', OLD.app_user_id, NEW.app_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type', OLD.account_type, NEW.account_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_limit', OLD.transfer_limit, NEW.transfer_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_d;
CREATE TRIGGER `m_selfservice_user_client_mapping_d`
BEFORE DELETE
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_selfservice_user_client_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_i;
CREATE TRIGGER `m_selfservice_user_client_mapping_i`
AFTER INSERT
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_selfservice_user_client_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_u;
CREATE TRIGGER `m_selfservice_user_client_mapping_u`
AFTER UPDATE
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_selfservice_user_client_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
  END;
DROP TRIGGER IF EXISTS m_share_account_d;
CREATE TRIGGER `m_share_account_d`
BEFORE DELETE
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_approved_shares', OLD.total_approved_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_pending_shares', OLD.total_pending_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_date', OLD.submitted_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_userid', OLD.submitted_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_date', OLD.approved_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_userid', OLD.approved_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_date', OLD.rejected_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_userid', OLD.rejected_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_date', OLD.activated_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_userid', OLD.activated_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_date', OLD.closed_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_userid', OLD.closed_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_i;
CREATE TRIGGER `m_share_account_i`
AFTER INSERT
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_approved_shares', NEW.total_approved_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_pending_shares', NEW.total_pending_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_date', NEW.submitted_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_userid', NEW.submitted_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_date', NEW.approved_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_userid', NEW.approved_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_date', NEW.rejected_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_userid', NEW.rejected_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activated_date', NEW.activated_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activated_userid', NEW.activated_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closed_date', NEW.closed_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closed_userid', NEW.closed_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', NEW.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', NEW.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', NEW.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_u;
CREATE TRIGGER `m_share_account_u`
AFTER UPDATE
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_account');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_approved_shares', OLD.total_approved_shares, NEW.total_approved_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_pending_shares', OLD.total_pending_shares, NEW.total_pending_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_date', OLD.submitted_date, NEW.submitted_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_userid', OLD.submitted_userid, NEW.submitted_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_date', OLD.approved_date, NEW.approved_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_userid', OLD.approved_userid, NEW.approved_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_date', OLD.rejected_date, NEW.rejected_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_userid', OLD.rejected_userid, NEW.rejected_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_date', OLD.activated_date, NEW.activated_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_userid', OLD.activated_userid, NEW.activated_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_date', OLD.closed_date, NEW.closed_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_userid', OLD.closed_userid, NEW.closed_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NEW.minimum_active_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NEW.minimum_active_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NEW.allow_dividends_inactive_clients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_d;
CREATE TRIGGER `m_share_account_charge_d`
BEFORE DELETE
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_i;
CREATE TRIGGER `m_share_account_charge_i`
AFTER INSERT
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', NEW.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_u;
CREATE TRIGGER `m_share_account_charge_u`
AFTER UPDATE
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_account_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NEW.charge_amount_or_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_d;
CREATE TRIGGER `m_share_account_charge_paid_by_d`
BEFORE DELETE
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_transaction_id', OLD.charge_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_i;
CREATE TRIGGER `m_share_account_charge_paid_by_i`
AFTER INSERT
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_transaction_id', NEW.share_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_transaction_id', NEW.charge_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_u;
CREATE TRIGGER `m_share_account_charge_paid_by_u`
AFTER UPDATE
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_account_charge_paid_by');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NEW.share_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_transaction_id', OLD.charge_transaction_id, NEW.charge_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END;
DROP TRIGGER IF EXISTS m_share_account_dividend_details_d;
CREATE TRIGGER `m_share_account_dividend_details_d`
BEFORE DELETE
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_account_dividend_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_pay_out_id', OLD.dividend_pay_out_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_dividend_details_i;
CREATE TRIGGER `m_share_account_dividend_details_i`
AFTER INSERT
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_account_dividend_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_pay_out_id', NEW.dividend_pay_out_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_dividend_details_u;
CREATE TRIGGER `m_share_account_dividend_details_u`
AFTER UPDATE
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_account_dividend_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_pay_out_id', OLD.dividend_pay_out_id, NEW.dividend_pay_out_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
  END;
DROP TRIGGER IF EXISTS m_share_account_transactions_d;
CREATE TRIGGER `m_share_account_transactions_d`
BEFORE DELETE
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_account_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount', OLD.charge_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid', OLD.amount_paid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_transactions_i;
CREATE TRIGGER `m_share_account_transactions_i`
AFTER INSERT
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_account_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_shares', NEW.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unit_price', NEW.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount', NEW.charge_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid', NEW.amount_paid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_account_transactions_u;
CREATE TRIGGER `m_share_account_transactions_u`
AFTER UPDATE
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_account_transactions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NEW.total_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NEW.unit_price);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount', OLD.charge_amount, NEW.charge_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid', OLD.amount_paid, NEW.amount_paid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END;
DROP TRIGGER IF EXISTS m_share_product_d;
CREATE TRIGGER `m_share_product_d`
BEFORE DELETE
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'issued_shares', OLD.issued_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'totalsubscribed_shares', OLD.totalsubscribed_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'capital_amount', OLD.capital_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_client_shares', OLD.minimum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_client_shares', OLD.nominal_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_client_shares', OLD.maximum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_i;
CREATE TRIGGER `m_share_product_i`
AFTER INSERT
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_shares', NEW.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'issued_shares', NEW.issued_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'totalsubscribed_shares', NEW.totalsubscribed_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unit_price', NEW.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'capital_amount', NEW.capital_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_client_shares', NEW.minimum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_client_shares', NEW.nominal_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maximum_client_shares', NEW.maximum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', NEW.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', NEW.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', NEW.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_u;
CREATE TRIGGER `m_share_product_u`
AFTER UPDATE
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_product');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NEW.total_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'issued_shares', OLD.issued_shares, NEW.issued_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'totalsubscribed_shares', OLD.totalsubscribed_shares, NEW.totalsubscribed_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NEW.unit_price);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'capital_amount', OLD.capital_amount, NEW.capital_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_client_shares', OLD.minimum_client_shares, NEW.minimum_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_client_shares', OLD.nominal_client_shares, NEW.nominal_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_client_shares', OLD.maximum_client_shares, NEW.maximum_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NEW.minimum_active_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NEW.minimum_active_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NEW.allow_dividends_inactive_clients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
  END;
DROP TRIGGER IF EXISTS m_share_product_charge_d;
CREATE TRIGGER `m_share_product_charge_d`
BEFORE DELETE
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_charge_i;
CREATE TRIGGER `m_share_product_charge_i`
AFTER INSERT
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_charge_u;
CREATE TRIGGER `m_share_product_charge_u`
AFTER UPDATE
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_product_charge');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END;
DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_d;
CREATE TRIGGER `m_share_product_dividend_pay_out_d`
BEFORE DELETE
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_product_dividend_pay_out');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_start_date', OLD.dividend_period_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_end_date', OLD.dividend_period_end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_i;
CREATE TRIGGER `m_share_product_dividend_pay_out_i`
AFTER INSERT
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_product_dividend_pay_out');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_period_start_date', NEW.dividend_period_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_period_end_date', NEW.dividend_period_end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_u;
CREATE TRIGGER `m_share_product_dividend_pay_out_u`
AFTER UPDATE
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_product_dividend_pay_out');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_start_date', OLD.dividend_period_start_date, NEW.dividend_period_start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_end_date', OLD.dividend_period_end_date, NEW.dividend_period_end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_share_product_market_price_d;
CREATE TRIGGER `m_share_product_market_price_d`
BEFORE DELETE
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_share_product_market_price');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_value', OLD.share_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_market_price_i;
CREATE TRIGGER `m_share_product_market_price_i`
AFTER INSERT
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_share_product_market_price');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_value', NEW.share_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_share_product_market_price_u;
CREATE TRIGGER `m_share_product_market_price_u`
AFTER UPDATE
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_share_product_market_price');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_value', OLD.share_value, NEW.share_value);
  END;
DROP TRIGGER IF EXISTS m_staff_d;
CREATE TRIGGER `m_staff_d`
BEFORE DELETE
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_staff');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_loan_officer', OLD.is_loan_officer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_enum', OLD.organisational_role_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', OLD.organisational_role_parent_staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'joining_date', OLD.joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_staff_i;
CREATE TRIGGER `m_staff_i`
AFTER INSERT
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_staff');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_loan_officer', NEW.is_loan_officer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisational_role_enum', NEW.organisational_role_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', NEW.organisational_role_parent_staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'joining_date', NEW.joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'image_id', NEW.image_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_staff_u;
CREATE TRIGGER `m_staff_u`
AFTER UPDATE
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_staff');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_loan_officer', OLD.is_loan_officer, NEW.is_loan_officer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_enum', OLD.organisational_role_enum, NEW.organisational_role_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', OLD.organisational_role_parent_staff_id, NEW.organisational_role_parent_staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'joining_date', OLD.joining_date, NEW.joining_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NEW.image_id);
  END;
DROP TRIGGER IF EXISTS m_staff_assignment_history_d;
CREATE TRIGGER `m_staff_assignment_history_d`
BEFORE DELETE
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_staff_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'centre_id', OLD.centre_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_staff_assignment_history_i;
CREATE TRIGGER `m_staff_assignment_history_i`
AFTER INSERT
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_staff_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'centre_id', NEW.centre_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_staff_assignment_history_u;
CREATE TRIGGER `m_staff_assignment_history_u`
AFTER UPDATE
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_staff_assignment_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'centre_id', OLD.centre_id, NEW.centre_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END;
DROP TRIGGER IF EXISTS m_survey_components_d;
CREATE TRIGGER `m_survey_components_d`
BEFORE DELETE
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_survey_components');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_components_i;
CREATE TRIGGER `m_survey_components_i`
AFTER INSERT
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_survey_components');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_components_u;
CREATE TRIGGER `m_survey_components_u`
AFTER UPDATE
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_survey_components');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END;
DROP TRIGGER IF EXISTS m_survey_lookup_tables_d;
CREATE TRIGGER `m_survey_lookup_tables_d`
BEFORE DELETE
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_survey_lookup_tables');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_from', OLD.value_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_to', OLD.value_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score', OLD.score, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_lookup_tables_i;
CREATE TRIGGER `m_survey_lookup_tables_i`
AFTER INSERT
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_survey_lookup_tables');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_from', NEW.value_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_to', NEW.value_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score', NEW.score, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_lookup_tables_u;
CREATE TRIGGER `m_survey_lookup_tables_u`
AFTER UPDATE
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_survey_lookup_tables');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_from', OLD.value_from, NEW.value_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_to', OLD.value_to, NEW.value_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score', OLD.score, NEW.score);
  END;
DROP TRIGGER IF EXISTS m_survey_questions_d;
CREATE TRIGGER `m_survey_questions_d`
BEFORE DELETE
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_survey_questions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'component_key', OLD.component_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_questions_i;
CREATE TRIGGER `m_survey_questions_i`
AFTER INSERT
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_survey_questions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'component_key', NEW.component_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_questions_u;
CREATE TRIGGER `m_survey_questions_u`
AFTER UPDATE
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_survey_questions');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'component_key', OLD.component_key, NEW.component_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END;
DROP TRIGGER IF EXISTS m_survey_responses_d;
CREATE TRIGGER `m_survey_responses_d`
BEFORE DELETE
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_survey_responses');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_responses_i;
CREATE TRIGGER `m_survey_responses_i`
AFTER INSERT
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_survey_responses');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'question_id', NEW.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_value', NEW.a_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_responses_u;
CREATE TRIGGER `m_survey_responses_u`
AFTER UPDATE
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_survey_responses');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NEW.question_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NEW.a_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END;
DROP TRIGGER IF EXISTS m_survey_scorecards_d;
CREATE TRIGGER `m_survey_scorecards_d`
BEFORE DELETE
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_survey_scorecards');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'response_id', OLD.response_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_scorecards_i;
CREATE TRIGGER `m_survey_scorecards_i`
AFTER INSERT
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_survey_scorecards');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'question_id', NEW.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'response_id', NEW.response_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_id', NEW.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_on', NEW.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_value', NEW.a_value, NULL);
  END;
DROP TRIGGER IF EXISTS m_survey_scorecards_u;
CREATE TRIGGER `m_survey_scorecards_u`
AFTER UPDATE
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_survey_scorecards');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NEW.question_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'response_id', OLD.response_id, NEW.response_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NEW.user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NEW.created_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NEW.a_value);
  END;
DROP TRIGGER IF EXISTS m_surveys_d;
CREATE TRIGGER `m_surveys_d`
BEFORE DELETE
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_surveys');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_name', OLD.a_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_code', OLD.country_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NULL);
  END;
DROP TRIGGER IF EXISTS m_surveys_i;
CREATE TRIGGER `m_surveys_i`
AFTER INSERT
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_surveys');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_name', NEW.a_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country_code', NEW.country_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_to', NEW.valid_to, NULL);
  END;
DROP TRIGGER IF EXISTS m_surveys_u;
CREATE TRIGGER `m_surveys_u`
AFTER UPDATE
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_surveys');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_name', OLD.a_name, NEW.a_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_code', OLD.country_code, NEW.country_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NEW.valid_to);
  END;
DROP TRIGGER IF EXISTS m_tax_component_d;
CREATE TRIGGER `m_tax_component_d`
BEFORE DELETE
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_tax_component');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_type_enum', OLD.debit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_type_enum', OLD.credit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_component_i;
CREATE TRIGGER `m_tax_component_i`
AFTER INSERT
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_tax_component');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'percentage', NEW.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_type_enum', NEW.debit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_type_enum', NEW.credit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_component_u;
CREATE TRIGGER `m_tax_component_u`
AFTER UPDATE
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_tax_component');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NEW.percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_type_enum', OLD.debit_account_type_enum, NEW.debit_account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_type_enum', OLD.credit_account_type_enum, NEW.credit_account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_tax_component_history_d;
CREATE TRIGGER `m_tax_component_history_d`
BEFORE DELETE
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_tax_component_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_component_history_i;
CREATE TRIGGER `m_tax_component_history_i`
AFTER INSERT
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_tax_component_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'percentage', NEW.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_component_history_u;
CREATE TRIGGER `m_tax_component_history_u`
AFTER UPDATE
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_tax_component_history');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NEW.percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_tax_group_d;
CREATE TRIGGER `m_tax_group_d`
BEFORE DELETE
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_tax_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_group_i;
CREATE TRIGGER `m_tax_group_i`
AFTER INSERT
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_tax_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_group_u;
CREATE TRIGGER `m_tax_group_u`
AFTER UPDATE
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_tax_group');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_tax_group_mappings_d;
CREATE TRIGGER `m_tax_group_mappings_d`
BEFORE DELETE
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_tax_group_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_group_mappings_i;
CREATE TRIGGER `m_tax_group_mappings_i`
AFTER INSERT
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_tax_group_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END;
DROP TRIGGER IF EXISTS m_tax_group_mappings_u;
CREATE TRIGGER `m_tax_group_mappings_u`
AFTER UPDATE
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_tax_group_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END;
DROP TRIGGER IF EXISTS m_tellers_d;
CREATE TRIGGER `m_tellers_d`
BEFORE DELETE
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_tellers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NULL);
  END;
DROP TRIGGER IF EXISTS m_tellers_i;
CREATE TRIGGER `m_tellers_i`
AFTER INSERT
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_tellers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_to', NEW.valid_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state', NEW.state, NULL);
  END;
DROP TRIGGER IF EXISTS m_tellers_u;
CREATE TRIGGER `m_tellers_u`
AFTER UPDATE
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_tellers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NEW.valid_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NEW.state);
  END;
DROP TRIGGER IF EXISTS m_template_d;
CREATE TRIGGER `m_template_d`
BEFORE DELETE
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_template');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'text', OLD.text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
  END;
DROP TRIGGER IF EXISTS m_template_i;
CREATE TRIGGER `m_template_i`
AFTER INSERT
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_template');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'text', NEW.text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity', NEW.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
  END;
DROP TRIGGER IF EXISTS m_template_u;
CREATE TRIGGER `m_template_u`
AFTER UPDATE
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_template');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'text', OLD.text, NEW.text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NEW.entity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
  END;
DROP TRIGGER IF EXISTS m_template_m_templatemappers_d;
CREATE TRIGGER `m_template_m_templatemappers_d`
BEFORE DELETE
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_template_m_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'm_template_id', OLD.m_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappers_id', OLD.mappers_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_template_m_templatemappers_i;
CREATE TRIGGER `m_template_m_templatemappers_i`
AFTER INSERT
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_template_m_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'm_template_id', NEW.m_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mappers_id', NEW.mappers_id, NULL);
  END;
DROP TRIGGER IF EXISTS m_template_m_templatemappers_u;
CREATE TRIGGER `m_template_m_templatemappers_u`
AFTER UPDATE
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_template_m_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'm_template_id', OLD.m_template_id, NEW.m_template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappers_id', OLD.mappers_id, NEW.mappers_id);
  END;
DROP TRIGGER IF EXISTS m_templatemappers_d;
CREATE TRIGGER `m_templatemappers_d`
BEFORE DELETE
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperkey', OLD.mapperkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperorder', OLD.mapperorder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappervalue', OLD.mappervalue, NULL);
  END;
DROP TRIGGER IF EXISTS m_templatemappers_i;
CREATE TRIGGER `m_templatemappers_i`
AFTER INSERT
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mapperkey', NEW.mapperkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mapperorder', NEW.mapperorder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mappervalue', NEW.mappervalue, NULL);
  END;
DROP TRIGGER IF EXISTS m_templatemappers_u;
CREATE TRIGGER `m_templatemappers_u`
AFTER UPDATE
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_templatemappers');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperkey', OLD.mapperkey, NEW.mapperkey);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperorder', OLD.mapperorder, NEW.mapperorder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappervalue', OLD.mappervalue, NEW.mappervalue);
  END;
DROP TRIGGER IF EXISTS m_working_days_d;
CREATE TRIGGER `m_working_days_d`
BEFORE DELETE
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'm_working_days');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', OLD.repayment_rescheduling_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', OLD.extend_term_daily_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', OLD.extend_term_holiday_repayment, NULL);
  END;
DROP TRIGGER IF EXISTS m_working_days_i;
CREATE TRIGGER `m_working_days_i`
AFTER INSERT
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'm_working_days');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', NEW.repayment_rescheduling_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', NEW.extend_term_daily_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', NEW.extend_term_holiday_repayment, NULL);
  END;
DROP TRIGGER IF EXISTS m_working_days_u;
CREATE TRIGGER `m_working_days_u`
AFTER UPDATE
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'm_working_days');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', OLD.repayment_rescheduling_enum, NEW.repayment_rescheduling_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', OLD.extend_term_daily_repayments, NEW.extend_term_daily_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', OLD.extend_term_holiday_repayment, NEW.extend_term_holiday_repayment);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_d;
CREATE TRIGGER `mix_taxonomy_d`
BEFORE DELETE
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'mix_taxonomy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'namespace_id', OLD.namespace_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dimension', OLD.dimension, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'need_mapping', OLD.need_mapping, NULL);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_i;
CREATE TRIGGER `mix_taxonomy_i`
AFTER INSERT
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'mix_taxonomy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'namespace_id', NEW.namespace_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dimension', NEW.dimension, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'need_mapping', NEW.need_mapping, NULL);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_u;
CREATE TRIGGER `mix_taxonomy_u`
AFTER UPDATE
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'mix_taxonomy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'namespace_id', OLD.namespace_id, NEW.namespace_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dimension', OLD.dimension, NEW.dimension);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'need_mapping', OLD.need_mapping, NEW.need_mapping);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_mapping_d;
CREATE TRIGGER `mix_taxonomy_mapping_d`
BEFORE DELETE
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'mix_taxonomy_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'identifier', OLD.identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'config', OLD.config, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_update_date', OLD.last_update_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency', OLD.currency, NULL);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_mapping_i;
CREATE TRIGGER `mix_taxonomy_mapping_i`
AFTER INSERT
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'mix_taxonomy_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'identifier', NEW.identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'config', NEW.config, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_update_date', NEW.last_update_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency', NEW.currency, NULL);
  END;
DROP TRIGGER IF EXISTS mix_taxonomy_mapping_u;
CREATE TRIGGER `mix_taxonomy_mapping_u`
AFTER UPDATE
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'mix_taxonomy_mapping');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'identifier', OLD.identifier, NEW.identifier);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'config', OLD.config, NEW.config);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_update_date', OLD.last_update_date, NEW.last_update_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency', OLD.currency, NEW.currency);
  END;
DROP TRIGGER IF EXISTS mix_xbrl_namespace_d;
CREATE TRIGGER `mix_xbrl_namespace_d`
BEFORE DELETE
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'mix_xbrl_namespace');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix', OLD.prefix, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'url', OLD.url, NULL);
  END;
DROP TRIGGER IF EXISTS mix_xbrl_namespace_i;
CREATE TRIGGER `mix_xbrl_namespace_i`
AFTER INSERT
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'mix_xbrl_namespace');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'prefix', NEW.prefix, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'url', NEW.url, NULL);
  END;
DROP TRIGGER IF EXISTS mix_xbrl_namespace_u;
CREATE TRIGGER `mix_xbrl_namespace_u`
AFTER UPDATE
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'mix_xbrl_namespace');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix', OLD.prefix, NEW.prefix);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'url', OLD.url, NEW.url);
  END;
DROP TRIGGER IF EXISTS notification_generator_d;
CREATE TRIGGER `notification_generator_d`
BEFORE DELETE
  ON notification_generator
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'notification_generator');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'object_type', OLD.object_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'object_identifier', OLD.object_identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action', OLD.action, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'actor', OLD.actor, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_generated', OLD.is_system_generated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'notification_content', OLD.notification_content, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_at', OLD.created_at, NULL);
  END;
DROP TRIGGER IF EXISTS notification_generator_i;
CREATE TRIGGER `notification_generator_i`
AFTER INSERT
  ON notification_generator
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'notification_generator');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'object_type', NEW.object_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'object_identifier', NEW.object_identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action', NEW.action, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'actor', NEW.actor, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_system_generated', NEW.is_system_generated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'notification_content', NEW.notification_content, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_at', NEW.created_at, NULL);
  END;
DROP TRIGGER IF EXISTS notification_generator_u;
CREATE TRIGGER `notification_generator_u`
AFTER UPDATE
  ON notification_generator
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'notification_generator');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'object_type', OLD.object_type, NEW.object_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'object_identifier', OLD.object_identifier, NEW.object_identifier);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action', OLD.action, NEW.action);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'actor', OLD.actor, NEW.actor);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_generated', OLD.is_system_generated, NEW.is_system_generated);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'notification_content', OLD.notification_content, NEW.notification_content);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_at', OLD.created_at, NEW.created_at);
  END;
DROP TRIGGER IF EXISTS notification_mapper_d;
CREATE TRIGGER `notification_mapper_d`
BEFORE DELETE
  ON notification_mapper
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'notification_mapper');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'notification_id', OLD.notification_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_read', OLD.is_read, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_at', OLD.created_at, NULL);
  END;
DROP TRIGGER IF EXISTS notification_mapper_i;
CREATE TRIGGER `notification_mapper_i`
AFTER INSERT
  ON notification_mapper
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'notification_mapper');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'notification_id', NEW.notification_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_id', NEW.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_read', NEW.is_read, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_at', NEW.created_at, NULL);
  END;
DROP TRIGGER IF EXISTS notification_mapper_u;
CREATE TRIGGER `notification_mapper_u`
AFTER UPDATE
  ON notification_mapper
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'notification_mapper');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'notification_id', OLD.notification_id, NEW.notification_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NEW.user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_read', OLD.is_read, NEW.is_read);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_at', OLD.created_at, NEW.created_at);
  END;
DROP TRIGGER IF EXISTS oauth_access_token_d;
CREATE TRIGGER `oauth_access_token_d`
BEFORE DELETE
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'oauth_access_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_id', OLD.authentication_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_name', OLD.user_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token', OLD.refresh_token, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_access_token_i;
CREATE TRIGGER `oauth_access_token_i`
AFTER INSERT
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'oauth_access_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token_id', NEW.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token', NEW.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication_id', NEW.authentication_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_name', NEW.user_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication', NEW.authentication, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'refresh_token', NEW.refresh_token, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_access_token_u;
CREATE TRIGGER `oauth_access_token_u`
AFTER UPDATE
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'oauth_access_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NEW.token_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NEW.token);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_id', OLD.authentication_id, NEW.authentication_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_name', OLD.user_name, NEW.user_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NEW.authentication);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token', OLD.refresh_token, NEW.refresh_token);
  END;
DROP TRIGGER IF EXISTS oauth_client_details_d;
CREATE TRIGGER `oauth_client_details_d`
BEFORE DELETE
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'oauth_client_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_ids', OLD.resource_ids, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_secret', OLD.client_secret, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scope', OLD.scope, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorized_grant_types', OLD.authorized_grant_types, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'web_server_redirect_uri', OLD.web_server_redirect_uri, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorities', OLD.authorities, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_token_validity', OLD.access_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token_validity', OLD.refresh_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'additional_information', OLD.additional_information, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'autoapprove', OLD.autoapprove, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_client_details_i;
CREATE TRIGGER `oauth_client_details_i`
AFTER INSERT
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'oauth_client_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'resource_ids', NEW.resource_ids, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_secret', NEW.client_secret, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'scope', NEW.scope, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authorized_grant_types', NEW.authorized_grant_types, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'web_server_redirect_uri', NEW.web_server_redirect_uri, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authorities', NEW.authorities, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'access_token_validity', NEW.access_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'refresh_token_validity', NEW.refresh_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'additional_information', NEW.additional_information, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'autoapprove', NEW.autoapprove, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_client_details_u;
CREATE TRIGGER `oauth_client_details_u`
AFTER UPDATE
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'oauth_client_details');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_ids', OLD.resource_ids, NEW.resource_ids);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_secret', OLD.client_secret, NEW.client_secret);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scope', OLD.scope, NEW.scope);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorized_grant_types', OLD.authorized_grant_types, NEW.authorized_grant_types);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'web_server_redirect_uri', OLD.web_server_redirect_uri, NEW.web_server_redirect_uri);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorities', OLD.authorities, NEW.authorities);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_token_validity', OLD.access_token_validity, NEW.access_token_validity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token_validity', OLD.refresh_token_validity, NEW.refresh_token_validity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'additional_information', OLD.additional_information, NEW.additional_information);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'autoapprove', OLD.autoapprove, NEW.autoapprove);
  END;
DROP TRIGGER IF EXISTS oauth_refresh_token_d;
CREATE TRIGGER `oauth_refresh_token_d`
BEFORE DELETE
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'oauth_refresh_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_refresh_token_i;
CREATE TRIGGER `oauth_refresh_token_i`
AFTER INSERT
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'oauth_refresh_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token_id', NEW.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token', NEW.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication', NEW.authentication, NULL);
  END;
DROP TRIGGER IF EXISTS oauth_refresh_token_u;
CREATE TRIGGER `oauth_refresh_token_u`
AFTER UPDATE
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'oauth_refresh_token');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NEW.token_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NEW.token);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NEW.authentication);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_d;
CREATE TRIGGER `ppi_likelihoods_d`
BEFORE DELETE
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'ppi_likelihoods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_i;
CREATE TRIGGER `ppi_likelihoods_i`
AFTER INSERT
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'ppi_likelihoods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_u;
CREATE TRIGGER `ppi_likelihoods_u`
AFTER UPDATE
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'ppi_likelihoods');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_d;
CREATE TRIGGER `ppi_likelihoods_ppi_d`
BEFORE DELETE
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'ppi_likelihoods_ppi');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'likelihood_id', OLD.likelihood_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ppi_name', OLD.ppi_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_i;
CREATE TRIGGER `ppi_likelihoods_ppi_i`
AFTER INSERT
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'ppi_likelihoods_ppi');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'likelihood_id', NEW.likelihood_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ppi_name', NEW.ppi_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_u;
CREATE TRIGGER `ppi_likelihoods_ppi_u`
AFTER UPDATE
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'ppi_likelihoods_ppi');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'likelihood_id', OLD.likelihood_id, NEW.likelihood_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ppi_name', OLD.ppi_name, NEW.ppi_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
  END;
DROP TRIGGER IF EXISTS ppi_scores_d;
CREATE TRIGGER `ppi_scores_d`
BEFORE DELETE
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'ppi_scores');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_from', OLD.score_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_to', OLD.score_to, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_scores_i;
CREATE TRIGGER `ppi_scores_i`
AFTER INSERT
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'ppi_scores');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score_from', NEW.score_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score_to', NEW.score_to, NULL);
  END;
DROP TRIGGER IF EXISTS ppi_scores_u;
CREATE TRIGGER `ppi_scores_u`
AFTER UPDATE
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'ppi_scores');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_from', OLD.score_from, NEW.score_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_to', OLD.score_to, NEW.score_to);
  END;
DROP TRIGGER IF EXISTS r_enum_value_d;
CREATE TRIGGER `r_enum_value_d`
BEFORE DELETE
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'r_enum_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_name', OLD.enum_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_id', OLD.enum_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_message_property', OLD.enum_message_property, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_value', OLD.enum_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_type', OLD.enum_type, NULL);
  END;
DROP TRIGGER IF EXISTS r_enum_value_i;
CREATE TRIGGER `r_enum_value_i`
AFTER INSERT
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'r_enum_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_name', NEW.enum_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_id', NEW.enum_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_message_property', NEW.enum_message_property, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_value', NEW.enum_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_type', NEW.enum_type, NULL);
  END;
DROP TRIGGER IF EXISTS r_enum_value_u;
CREATE TRIGGER `r_enum_value_u`
AFTER UPDATE
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'r_enum_value');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_name', OLD.enum_name, NEW.enum_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_id', OLD.enum_id, NEW.enum_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_message_property', OLD.enum_message_property, NEW.enum_message_property);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_value', OLD.enum_value, NEW.enum_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_type', OLD.enum_type, NEW.enum_type);
  END;
DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_d;
CREATE TRIGGER `ref_loan_transaction_processing_strategy_d`
BEFORE DELETE
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'ref_loan_transaction_processing_strategy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sort_order', OLD.sort_order, NULL);
  END;
DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_i;
CREATE TRIGGER `ref_loan_transaction_processing_strategy_i`
AFTER INSERT
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'ref_loan_transaction_processing_strategy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sort_order', NEW.sort_order, NULL);
  END;
DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_u;
CREATE TRIGGER `ref_loan_transaction_processing_strategy_u`
AFTER UPDATE
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'ref_loan_transaction_processing_strategy');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sort_order', OLD.sort_order, NEW.sort_order);
  END;
DROP TRIGGER IF EXISTS request_audit_table_d;
CREATE TRIGGER `request_audit_table_d`
BEFORE DELETE
  ON request_audit_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'request_audit_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_token', OLD.authentication_token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NULL);
  END;
DROP TRIGGER IF EXISTS request_audit_table_i;
CREATE TRIGGER `request_audit_table_i`
AFTER INSERT
  ON request_audit_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'request_audit_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'username', NEW.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_number', NEW.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication_token', NEW.authentication_token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password', NEW.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email', NEW.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_number', NEW.account_number, NULL);
  END;
DROP TRIGGER IF EXISTS request_audit_table_u;
CREATE TRIGGER `request_audit_table_u`
AFTER UPDATE
  ON request_audit_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'request_audit_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NEW.username);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NEW.mobile_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_token', OLD.authentication_token, NEW.authentication_token);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NEW.password);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NEW.email);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NEW.account_number);
  END;
DROP TRIGGER IF EXISTS rpt_sequence_d;
CREATE TRIGGER `rpt_sequence_d`
BEFORE DELETE
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'rpt_sequence');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
  END;
DROP TRIGGER IF EXISTS rpt_sequence_i;
CREATE TRIGGER `rpt_sequence_i`
AFTER INSERT
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'rpt_sequence');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
  END;
DROP TRIGGER IF EXISTS rpt_sequence_u;
CREATE TRIGGER `rpt_sequence_u`
AFTER UPDATE
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'rpt_sequence');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
  END;
DROP TRIGGER IF EXISTS scheduler_detail_d;
CREATE TRIGGER `scheduler_detail_d`
BEFORE DELETE
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'scheduler_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_suspended', OLD.is_suspended, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execute_misfired_jobs', OLD.execute_misfired_jobs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', OLD.reset_scheduler_on_bootup, NULL);
  END;
DROP TRIGGER IF EXISTS scheduler_detail_i;
CREATE TRIGGER `scheduler_detail_i`
AFTER INSERT
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'scheduler_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_suspended', NEW.is_suspended, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execute_misfired_jobs', NEW.execute_misfired_jobs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', NEW.reset_scheduler_on_bootup, NULL);
  END;
DROP TRIGGER IF EXISTS scheduler_detail_u;
CREATE TRIGGER `scheduler_detail_u`
AFTER UPDATE
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'scheduler_detail');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_suspended', OLD.is_suspended, NEW.is_suspended);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execute_misfired_jobs', OLD.execute_misfired_jobs, NEW.execute_misfired_jobs);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', OLD.reset_scheduler_on_bootup, NEW.reset_scheduler_on_bootup);
  END;
DROP TRIGGER IF EXISTS schema_version_d;
CREATE TRIGGER `schema_version_d`
BEFORE DELETE
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'schema_version');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version_rank', OLD.version_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_rank', OLD.installed_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'script', OLD.script, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checksum', OLD.checksum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_by', OLD.installed_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_on', OLD.installed_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'success', OLD.success, NULL);
  END;
DROP TRIGGER IF EXISTS schema_version_i;
CREATE TRIGGER `schema_version_i`
AFTER INSERT
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'schema_version');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version_rank', NEW.version_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_rank', NEW.installed_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'script', NEW.script, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checksum', NEW.checksum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_by', NEW.installed_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_on', NEW.installed_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execution_time', NEW.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'success', NEW.success, NULL);
  END;
DROP TRIGGER IF EXISTS schema_version_u;
CREATE TRIGGER `schema_version_u`
AFTER UPDATE
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'schema_version');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version_rank', OLD.version_rank, NEW.version_rank);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_rank', OLD.installed_rank, NEW.installed_rank);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'script', OLD.script, NEW.script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checksum', OLD.checksum, NEW.checksum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_by', OLD.installed_by, NEW.installed_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_on', OLD.installed_on, NEW.installed_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NEW.execution_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'success', OLD.success, NEW.success);
  END;
DROP TRIGGER IF EXISTS sms_campaign_d;
CREATE TRIGGER `sms_campaign_d`
BEFORE DELETE
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'sms_campaign');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_name', OLD.campaign_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_type', OLD.campaign_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_trigger_type', OLD.campaign_trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provider_id', OLD.provider_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_value', OLD.param_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_trigger_date', OLD.next_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_trigger_date', OLD.last_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_start_date', OLD.recurrence_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_visible', OLD.is_visible, NULL);
  END;
DROP TRIGGER IF EXISTS sms_campaign_i;
CREATE TRIGGER `sms_campaign_i`
AFTER INSERT
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'sms_campaign');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_name', NEW.campaign_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_type', NEW.campaign_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_trigger_type', NEW.campaign_trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_id', NEW.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'provider_id', NEW.provider_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'param_value', NEW.param_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'message', NEW.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_trigger_date', NEW.next_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_trigger_date', NEW.last_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_start_date', NEW.recurrence_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_visible', NEW.is_visible, NULL);
  END;
DROP TRIGGER IF EXISTS sms_campaign_u;
CREATE TRIGGER `sms_campaign_u`
AFTER UPDATE
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'sms_campaign');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_name', OLD.campaign_name, NEW.campaign_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_type', OLD.campaign_type, NEW.campaign_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_trigger_type', OLD.campaign_trigger_type, NEW.campaign_trigger_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NEW.report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provider_id', OLD.provider_id, NEW.provider_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_value', OLD.param_value, NEW.param_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NEW.message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_trigger_date', OLD.next_trigger_date, NEW.next_trigger_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_trigger_date', OLD.last_trigger_date, NEW.last_trigger_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_start_date', OLD.recurrence_start_date, NEW.recurrence_start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_visible', OLD.is_visible, NEW.is_visible);
  END;
DROP TRIGGER IF EXISTS sms_messages_outbound_d;
CREATE TRIGGER `sms_messages_outbound_d`
BEFORE DELETE
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'sms_messages_outbound');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_id', OLD.campaign_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'delivered_on_date', OLD.delivered_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS sms_messages_outbound_i;
CREATE TRIGGER `sms_messages_outbound_i`
AFTER INSERT
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'sms_messages_outbound');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'message', NEW.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_id', NEW.campaign_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'delivered_on_date', NEW.delivered_on_date, NULL);
  END;
DROP TRIGGER IF EXISTS sms_messages_outbound_u;
CREATE TRIGGER `sms_messages_outbound_u`
AFTER UPDATE
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'sms_messages_outbound');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NEW.message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_id', OLD.campaign_id, NEW.campaign_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'delivered_on_date', OLD.delivered_on_date, NEW.delivered_on_date);
  END;
DROP TRIGGER IF EXISTS stretchy_parameter_d;
CREATE TRIGGER `stretchy_parameter_d`
BEFORE DELETE
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'stretchy_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_name', OLD.parameter_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_variable', OLD.parameter_variable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_label', OLD.parameter_label, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_displayType', OLD.parameter_displayType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_FormatType', OLD.parameter_FormatType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_default', OLD.parameter_default, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'special', OLD.special, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectOne', OLD.selectOne, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectAll', OLD.selectAll, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_sql', OLD.parameter_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_parameter_i;
CREATE TRIGGER `stretchy_parameter_i`
AFTER INSERT
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'stretchy_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_name', NEW.parameter_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_variable', NEW.parameter_variable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_label', NEW.parameter_label, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_displayType', NEW.parameter_displayType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_FormatType', NEW.parameter_FormatType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_default', NEW.parameter_default, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'special', NEW.special, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'selectOne', NEW.selectOne, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'selectAll', NEW.selectAll, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_sql', NEW.parameter_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_parameter_u;
CREATE TRIGGER `stretchy_parameter_u`
AFTER UPDATE
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'stretchy_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_name', OLD.parameter_name, NEW.parameter_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_variable', OLD.parameter_variable, NEW.parameter_variable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_label', OLD.parameter_label, NEW.parameter_label);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_displayType', OLD.parameter_displayType, NEW.parameter_displayType);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_FormatType', OLD.parameter_FormatType, NEW.parameter_FormatType);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_default', OLD.parameter_default, NEW.parameter_default);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'special', OLD.special, NEW.special);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectOne', OLD.selectOne, NEW.selectOne);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectAll', OLD.selectAll, NEW.selectAll);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_sql', OLD.parameter_sql, NEW.parameter_sql);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
  END;
DROP TRIGGER IF EXISTS stretchy_report_d;
CREATE TRIGGER `stretchy_report_d`
BEFORE DELETE
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'stretchy_report');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_name', OLD.report_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_type', OLD.report_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_subtype', OLD.report_subtype, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_category', OLD.report_category, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_sql', OLD.report_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'core_report', OLD.core_report, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_report', OLD.use_report, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_report_i;
CREATE TRIGGER `stretchy_report_i`
AFTER INSERT
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'stretchy_report');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_name', NEW.report_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_type', NEW.report_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_subtype', NEW.report_subtype, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_category', NEW.report_category, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_sql', NEW.report_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'core_report', NEW.core_report, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'use_report', NEW.use_report, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_report_u;
CREATE TRIGGER `stretchy_report_u`
AFTER UPDATE
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'stretchy_report');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_name', OLD.report_name, NEW.report_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_type', OLD.report_type, NEW.report_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_subtype', OLD.report_subtype, NEW.report_subtype);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_category', OLD.report_category, NEW.report_category);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_sql', OLD.report_sql, NEW.report_sql);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'core_report', OLD.core_report, NEW.core_report);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_report', OLD.use_report, NEW.use_report);
  END;
DROP TRIGGER IF EXISTS stretchy_report_parameter_d;
CREATE TRIGGER `stretchy_report_parameter_d`
BEFORE DELETE
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'stretchy_report_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_id', OLD.parameter_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_parameter_name', OLD.report_parameter_name, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_report_parameter_i;
CREATE TRIGGER `stretchy_report_parameter_i`
AFTER INSERT
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'stretchy_report_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_id', NEW.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_id', NEW.parameter_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_parameter_name', NEW.report_parameter_name, NULL);
  END;
DROP TRIGGER IF EXISTS stretchy_report_parameter_u;
CREATE TRIGGER `stretchy_report_parameter_u`
AFTER UPDATE
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'stretchy_report_parameter');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NEW.report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_id', OLD.parameter_id, NEW.parameter_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_parameter_name', OLD.report_parameter_name, NEW.report_parameter_name);
  END;
DROP TRIGGER IF EXISTS x_registered_table_d;
CREATE TRIGGER `x_registered_table_d`
BEFORE DELETE
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'x_registered_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'registered_table_name', OLD.registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category', OLD.category, NULL);
  END;
DROP TRIGGER IF EXISTS x_registered_table_i;
CREATE TRIGGER `x_registered_table_i`
AFTER INSERT
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'x_registered_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'registered_table_name', NEW.registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'application_table_name', NEW.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category', NEW.category, NULL);
  END;
DROP TRIGGER IF EXISTS x_registered_table_u;
CREATE TRIGGER `x_registered_table_u`
AFTER UPDATE
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'x_registered_table');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'registered_table_name', OLD.registered_table_name, NEW.registered_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NEW.application_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category', OLD.category, NEW.category);
  END;
DROP TRIGGER IF EXISTS x_table_column_code_mappings_d;
CREATE TRIGGER `x_table_column_code_mappings_d`
BEFORE DELETE
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'DELETE', 'x_table_column_code_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'column_alias_name', OLD.column_alias_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NULL);
  END;
DROP TRIGGER IF EXISTS x_table_column_code_mappings_i;
CREATE TRIGGER `x_table_column_code_mappings_i`
AFTER INSERT
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'INSERT', 'x_table_column_code_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'column_alias_name', NEW.column_alias_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_id', NEW.code_id, NULL);
  END;
DROP TRIGGER IF EXISTS x_table_column_code_mappings_u;
CREATE TRIGGER `x_table_column_code_mappings_u`
AFTER UPDATE
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table) VALUES (_id, now(), 'UPDATE', 'x_table_column_code_mappings');
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'column_alias_name', OLD.column_alias_name, NEW.column_alias_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NEW.code_id);
  END;
