delimiter %%
DROP TRIGGER IF EXISTS acc_accounting_rule_d%%
CREATE TRIGGER `acc_accounting_rule_d`
BEFORE DELETE
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_accounting_rule WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_accounting_rule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_debits', OLD.allow_multiple_debits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_credits', OLD.allow_multiple_credits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_accounting_rule_i%%
CREATE TRIGGER `acc_accounting_rule_i`
AFTER INSERT
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_accounting_rule(id, name, office_id, debit_account_id, allow_multiple_debits, credit_account_id, allow_multiple_credits, description, system_defined) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.debit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.debit_account_id, '", ')), IF(NEW.allow_multiple_debits IS NULL, 'NULL, ', CONCAT('"', NEW.allow_multiple_debits, '", ')), IF(NEW.credit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.credit_account_id, '", ')), IF(NEW.allow_multiple_credits IS NULL, 'NULL, ', CONCAT('"', NEW.allow_multiple_credits, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.system_defined IS NULL, 'NULL', CONCAT('"', NEW.system_defined, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_accounting_rule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_debits', NEW.allow_multiple_debits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_credits', NEW.allow_multiple_credits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'system_defined', NEW.system_defined, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_accounting_rule_u%%
CREATE TRIGGER `acc_accounting_rule_u`
AFTER UPDATE
  ON acc_accounting_rule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_accounting_rule SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', debit_account_id = ', IF(NEW.debit_account_id IS NULL, 'NULL', CONCAT('"', NEW.debit_account_id, '"')), ', allow_multiple_debits = ', IF(NEW.allow_multiple_debits IS NULL, 'NULL', CONCAT('"', NEW.allow_multiple_debits, '"')), ', credit_account_id = ', IF(NEW.credit_account_id IS NULL, 'NULL', CONCAT('"', NEW.credit_account_id, '"')), ', allow_multiple_credits = ', IF(NEW.allow_multiple_credits IS NULL, 'NULL', CONCAT('"', NEW.allow_multiple_credits, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', system_defined = ', IF(NEW.system_defined IS NULL, 'NULL', CONCAT('"', NEW.system_defined, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_accounting_rule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_debits', OLD.allow_multiple_debits, NEW.allow_multiple_debits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_credits', OLD.allow_multiple_credits, NEW.allow_multiple_credits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NEW.system_defined);
  END%%


DROP TRIGGER IF EXISTS acc_gl_account_d%%
CREATE TRIGGER `acc_gl_account_d`
BEFORE DELETE
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_gl_account WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_gl_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_code', OLD.gl_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disabled', OLD.disabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', OLD.manual_journal_entries_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_usage', OLD.account_usage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'classification_enum', OLD.classification_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_account_i%%
CREATE TRIGGER `acc_gl_account_i`
AFTER INSERT
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_gl_account(id, name, parent_id, hierarchy, gl_code, disabled, manual_journal_entries_allowed, account_usage, classification_enum, tag_id, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.parent_id IS NULL, 'NULL, ', CONCAT('"', NEW.parent_id, '", ')), IF(NEW.hierarchy IS NULL, 'NULL, ', CONCAT('"', NEW.hierarchy, '", ')), IF(NEW.gl_code IS NULL, 'NULL, ', CONCAT('"', NEW.gl_code, '", ')), IF(NEW.disabled IS NULL, 'NULL, ', CONCAT('"', NEW.disabled, '", ')), IF(NEW.manual_journal_entries_allowed IS NULL, 'NULL, ', CONCAT('"', NEW.manual_journal_entries_allowed, '", ')), IF(NEW.account_usage IS NULL, 'NULL, ', CONCAT('"', NEW.account_usage, '", ')), IF(NEW.classification_enum IS NULL, 'NULL, ', CONCAT('"', NEW.classification_enum, '", ')), IF(NEW.tag_id IS NULL, 'NULL, ', CONCAT('"', NEW.tag_id, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_gl_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_code', NEW.gl_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disabled', NEW.disabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', NEW.manual_journal_entries_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_usage', NEW.account_usage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'classification_enum', NEW.classification_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tag_id', NEW.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_account_u%%
CREATE TRIGGER `acc_gl_account_u`
AFTER UPDATE
  ON acc_gl_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_gl_account SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ', hierarchy = ', IF(NEW.hierarchy IS NULL, 'NULL', CONCAT('"', NEW.hierarchy, '"')), ', gl_code = ', IF(NEW.gl_code IS NULL, 'NULL', CONCAT('"', NEW.gl_code, '"')), ', disabled = ', IF(NEW.disabled IS NULL, 'NULL', CONCAT('"', NEW.disabled, '"')), ', manual_journal_entries_allowed = ', IF(NEW.manual_journal_entries_allowed IS NULL, 'NULL', CONCAT('"', NEW.manual_journal_entries_allowed, '"')), ', account_usage = ', IF(NEW.account_usage IS NULL, 'NULL', CONCAT('"', NEW.account_usage, '"')), ', classification_enum = ', IF(NEW.classification_enum IS NULL, 'NULL', CONCAT('"', NEW.classification_enum, '"')), ', tag_id = ', IF(NEW.tag_id IS NULL, 'NULL', CONCAT('"', NEW.tag_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_gl_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_code', OLD.gl_code, NEW.gl_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disabled', OLD.disabled, NEW.disabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_journal_entries_allowed', OLD.manual_journal_entries_allowed, NEW.manual_journal_entries_allowed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_usage', OLD.account_usage, NEW.account_usage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'classification_enum', OLD.classification_enum, NEW.classification_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NEW.tag_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS acc_gl_closure_d%%
CREATE TRIGGER `acc_gl_closure_d`
BEFORE DELETE
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_gl_closure WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_gl_closure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closing_date', OLD.closing_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comments', OLD.comments, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_closure_i%%
CREATE TRIGGER `acc_gl_closure_i`
AFTER INSERT
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_gl_closure(id, office_id, closing_date, is_deleted, createdby_id, lastmodifiedby_id, created_date, lastmodified_date, comments) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.closing_date IS NULL, 'NULL, ', CONCAT('"', NEW.closing_date, '", ')), IF(NEW.is_deleted IS NULL, 'NULL, ', CONCAT('"', NEW.is_deleted, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.comments IS NULL, 'NULL', CONCAT('"', NEW.comments, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_gl_closure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closing_date', NEW.closing_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'comments', NEW.comments, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_closure_u%%
CREATE TRIGGER `acc_gl_closure_u`
AFTER UPDATE
  ON acc_gl_closure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_gl_closure SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', closing_date = ', IF(NEW.closing_date IS NULL, 'NULL', CONCAT('"', NEW.closing_date, '"')), ', is_deleted = ', IF(NEW.is_deleted IS NULL, 'NULL', CONCAT('"', NEW.is_deleted, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', comments = ', IF(NEW.comments IS NULL, 'NULL', CONCAT('"', NEW.comments, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_gl_closure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closing_date', OLD.closing_date, NEW.closing_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comments', OLD.comments, NEW.comments);
  END%%


DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_d%%
CREATE TRIGGER `acc_gl_financial_activity_account_d`
BEFORE DELETE
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_gl_financial_activity_account WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_gl_financial_activity_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_activity_type', OLD.financial_activity_type, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_i%%
CREATE TRIGGER `acc_gl_financial_activity_account_i`
AFTER INSERT
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_gl_financial_activity_account(id, gl_account_id, financial_activity_type) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.gl_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.gl_account_id, '", ')), IF(NEW.financial_activity_type IS NULL, 'NULL', CONCAT('"', NEW.financial_activity_type, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_gl_financial_activity_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_account_id', NEW.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'financial_activity_type', NEW.financial_activity_type, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_financial_activity_account_u%%
CREATE TRIGGER `acc_gl_financial_activity_account_u`
AFTER UPDATE
  ON acc_gl_financial_activity_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_gl_financial_activity_account SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', gl_account_id = ', IF(NEW.gl_account_id IS NULL, 'NULL', CONCAT('"', NEW.gl_account_id, '"')), ', financial_activity_type = ', IF(NEW.financial_activity_type IS NULL, 'NULL', CONCAT('"', NEW.financial_activity_type, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_gl_financial_activity_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NEW.gl_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_activity_type', OLD.financial_activity_type, NEW.financial_activity_type);
  END%%


DROP TRIGGER IF EXISTS acc_gl_journal_entry_d%%
CREATE TRIGGER `acc_gl_journal_entry_d`
BEFORE DELETE
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_gl_journal_entry WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_gl_journal_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversal_id', OLD.reversal_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversed', OLD.reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ref_num', OLD.ref_num, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_entry', OLD.manual_entry, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entry_date', OLD.entry_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_running_balance_calculated', OLD.is_running_balance_calculated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_running_balance', OLD.office_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organization_running_balance', OLD.organization_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_details_id', OLD.payment_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_journal_entry_i%%
CREATE TRIGGER `acc_gl_journal_entry_i`
AFTER INSERT
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_gl_journal_entry(id, account_id, office_id, reversal_id, currency_code, transaction_id, loan_transaction_id, savings_transaction_id, client_transaction_id, reversed, ref_num, manual_entry, entry_date, type_enum, amount, description, entity_type_enum, entity_id, createdby_id, lastmodifiedby_id, created_date, lastmodified_date, is_running_balance_calculated, office_running_balance, organization_running_balance, payment_details_id, share_transaction_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.reversal_id IS NULL, 'NULL, ', CONCAT('"', NEW.reversal_id, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_id, '", ')), IF(NEW.loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_id, '", ')), IF(NEW.savings_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_transaction_id, '", ')), IF(NEW.client_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_transaction_id, '", ')), IF(NEW.reversed IS NULL, 'NULL, ', CONCAT('"', NEW.reversed, '", ')), IF(NEW.ref_num IS NULL, 'NULL, ', CONCAT('"', NEW.ref_num, '", ')), IF(NEW.manual_entry IS NULL, 'NULL, ', CONCAT('"', NEW.manual_entry, '", ')), IF(NEW.entry_date IS NULL, 'NULL, ', CONCAT('"', NEW.entry_date, '", ')), IF(NEW.type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.type_enum, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.entity_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.entity_type_enum, '", ')), IF(NEW.entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.entity_id, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.is_running_balance_calculated IS NULL, 'NULL, ', CONCAT('"', NEW.is_running_balance_calculated, '", ')), IF(NEW.office_running_balance IS NULL, 'NULL, ', CONCAT('"', NEW.office_running_balance, '", ')), IF(NEW.organization_running_balance IS NULL, 'NULL, ', CONCAT('"', NEW.organization_running_balance, '", ')), IF(NEW.payment_details_id IS NULL, 'NULL, ', CONCAT('"', NEW.payment_details_id, '", ')), IF(NEW.share_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.share_transaction_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_gl_journal_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reversal_id', NEW.reversal_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_id', NEW.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_transaction_id', NEW.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reversed', NEW.reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ref_num', NEW.ref_num, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manual_entry', NEW.manual_entry, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entry_date', NEW.entry_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type_enum', NEW.entity_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_running_balance_calculated', NEW.is_running_balance_calculated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_running_balance', NEW.office_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organization_running_balance', NEW.organization_running_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_details_id', NEW.payment_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_transaction_id', NEW.share_transaction_id, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_gl_journal_entry_u%%
CREATE TRIGGER `acc_gl_journal_entry_u`
AFTER UPDATE
  ON acc_gl_journal_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_gl_journal_entry SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', reversal_id = ', IF(NEW.reversal_id IS NULL, 'NULL', CONCAT('"', NEW.reversal_id, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', transaction_id = ', IF(NEW.transaction_id IS NULL, 'NULL', CONCAT('"', NEW.transaction_id, '"')), ', loan_transaction_id = ', IF(NEW.loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_id, '"')), ', savings_transaction_id = ', IF(NEW.savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_transaction_id, '"')), ', client_transaction_id = ', IF(NEW.client_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.client_transaction_id, '"')), ', reversed = ', IF(NEW.reversed IS NULL, 'NULL', CONCAT('"', NEW.reversed, '"')), ', ref_num = ', IF(NEW.ref_num IS NULL, 'NULL', CONCAT('"', NEW.ref_num, '"')), ', manual_entry = ', IF(NEW.manual_entry IS NULL, 'NULL', CONCAT('"', NEW.manual_entry, '"')), ', entry_date = ', IF(NEW.entry_date IS NULL, 'NULL', CONCAT('"', NEW.entry_date, '"')), ', type_enum = ', IF(NEW.type_enum IS NULL, 'NULL', CONCAT('"', NEW.type_enum, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', entity_type_enum = ', IF(NEW.entity_type_enum IS NULL, 'NULL', CONCAT('"', NEW.entity_type_enum, '"')), ', entity_id = ', IF(NEW.entity_id IS NULL, 'NULL', CONCAT('"', NEW.entity_id, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', is_running_balance_calculated = ', IF(NEW.is_running_balance_calculated IS NULL, 'NULL', CONCAT('"', NEW.is_running_balance_calculated, '"')), ', office_running_balance = ', IF(NEW.office_running_balance IS NULL, 'NULL', CONCAT('"', NEW.office_running_balance, '"')), ', organization_running_balance = ', IF(NEW.organization_running_balance IS NULL, 'NULL', CONCAT('"', NEW.organization_running_balance, '"')), ', payment_details_id = ', IF(NEW.payment_details_id IS NULL, 'NULL', CONCAT('"', NEW.payment_details_id, '"')), ', share_transaction_id = ', IF(NEW.share_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.share_transaction_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_gl_journal_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversal_id', OLD.reversal_id, NEW.reversal_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NEW.transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NEW.client_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reversed', OLD.reversed, NEW.reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ref_num', OLD.ref_num, NEW.ref_num);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manual_entry', OLD.manual_entry, NEW.manual_entry);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entry_date', OLD.entry_date, NEW.entry_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NEW.entity_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_running_balance_calculated', OLD.is_running_balance_calculated, NEW.is_running_balance_calculated);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_running_balance', OLD.office_running_balance, NEW.office_running_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organization_running_balance', OLD.organization_running_balance, NEW.organization_running_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_details_id', OLD.payment_details_id, NEW.payment_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NEW.share_transaction_id);
  END%%


DROP TRIGGER IF EXISTS acc_product_mapping_d%%
CREATE TRIGGER `acc_product_mapping_d`
BEFORE DELETE
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_product_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_product_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_type', OLD.product_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type', OLD.payment_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_account_type', OLD.financial_account_type, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_product_mapping_i%%
CREATE TRIGGER `acc_product_mapping_i`
AFTER INSERT
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_product_mapping(id, gl_account_id, product_id, product_type, payment_type, charge_id, financial_account_type) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.gl_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.gl_account_id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.product_type IS NULL, 'NULL, ', CONCAT('"', NEW.product_type, '", ')), IF(NEW.payment_type IS NULL, 'NULL, ', CONCAT('"', NEW.payment_type, '", ')), IF(NEW.charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_id, '", ')), IF(NEW.financial_account_type IS NULL, 'NULL', CONCAT('"', NEW.financial_account_type, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_product_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gl_account_id', NEW.gl_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_type', NEW.product_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_type', NEW.payment_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'financial_account_type', NEW.financial_account_type, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_product_mapping_u%%
CREATE TRIGGER `acc_product_mapping_u`
AFTER UPDATE
  ON acc_product_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_product_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', gl_account_id = ', IF(NEW.gl_account_id IS NULL, 'NULL', CONCAT('"', NEW.gl_account_id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', product_type = ', IF(NEW.product_type IS NULL, 'NULL', CONCAT('"', NEW.product_type, '"')), ', payment_type = ', IF(NEW.payment_type IS NULL, 'NULL', CONCAT('"', NEW.payment_type, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ', financial_account_type = ', IF(NEW.financial_account_type IS NULL, 'NULL', CONCAT('"', NEW.financial_account_type, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_product_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gl_account_id', OLD.gl_account_id, NEW.gl_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_type', OLD.product_type, NEW.product_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type', OLD.payment_type, NEW.payment_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'financial_account_type', OLD.financial_account_type, NEW.financial_account_type);
  END%%


DROP TRIGGER IF EXISTS acc_rule_tags_d%%
CREATE TRIGGER `acc_rule_tags_d`
BEFORE DELETE
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM acc_rule_tags WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'acc_rule_tags', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_rule_id', OLD.acc_rule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_type_enum', OLD.acc_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_rule_tags_i%%
CREATE TRIGGER `acc_rule_tags_i`
AFTER INSERT
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO acc_rule_tags(id, acc_rule_id, tag_id, acc_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.acc_rule_id IS NULL, 'NULL, ', CONCAT('"', NEW.acc_rule_id, '", ')), IF(NEW.tag_id IS NULL, 'NULL, ', CONCAT('"', NEW.tag_id, '", ')), IF(NEW.acc_type_enum IS NULL, 'NULL', CONCAT('"', NEW.acc_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'acc_rule_tags', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'acc_rule_id', NEW.acc_rule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tag_id', NEW.tag_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'acc_type_enum', NEW.acc_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS acc_rule_tags_u%%
CREATE TRIGGER `acc_rule_tags_u`
AFTER UPDATE
  ON acc_rule_tags
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE acc_rule_tags SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', acc_rule_id = ', IF(NEW.acc_rule_id IS NULL, 'NULL', CONCAT('"', NEW.acc_rule_id, '"')), ', tag_id = ', IF(NEW.tag_id IS NULL, 'NULL', CONCAT('"', NEW.tag_id, '"')), ', acc_type_enum = ', IF(NEW.acc_type_enum IS NULL, 'NULL', CONCAT('"', NEW.acc_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'acc_rule_tags', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_rule_id', OLD.acc_rule_id, NEW.acc_rule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tag_id', OLD.tag_id, NEW.tag_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'acc_type_enum', OLD.acc_type_enum, NEW.acc_type_enum);
  END%%


DROP TRIGGER IF EXISTS c_account_number_format_d%%
CREATE TRIGGER `c_account_number_format_d`
BEFORE DELETE
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM c_account_number_format WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'c_account_number_format', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix_type_enum', OLD.prefix_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS c_account_number_format_i%%
CREATE TRIGGER `c_account_number_format_i`
AFTER INSERT
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO c_account_number_format(id, account_type_enum, prefix_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.account_type_enum, '", ')), IF(NEW.prefix_type_enum IS NULL, 'NULL', CONCAT('"', NEW.prefix_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'c_account_number_format', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type_enum', NEW.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'prefix_type_enum', NEW.prefix_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS c_account_number_format_u%%
CREATE TRIGGER `c_account_number_format_u`
AFTER UPDATE
  ON c_account_number_format
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE c_account_number_format SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_type_enum = ', IF(NEW.account_type_enum IS NULL, 'NULL', CONCAT('"', NEW.account_type_enum, '"')), ', prefix_type_enum = ', IF(NEW.prefix_type_enum IS NULL, 'NULL', CONCAT('"', NEW.prefix_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'c_account_number_format', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NEW.account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix_type_enum', OLD.prefix_type_enum, NEW.prefix_type_enum);
  END%%


DROP TRIGGER IF EXISTS c_cache_d%%
CREATE TRIGGER `c_cache_d`
BEFORE DELETE
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM c_cache WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'c_cache', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cache_type_enum', OLD.cache_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS c_cache_i%%
CREATE TRIGGER `c_cache_i`
AFTER INSERT
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO c_cache(id, cache_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.cache_type_enum IS NULL, 'NULL', CONCAT('"', NEW.cache_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'c_cache', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cache_type_enum', NEW.cache_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS c_cache_u%%
CREATE TRIGGER `c_cache_u`
AFTER UPDATE
  ON c_cache
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE c_cache SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', cache_type_enum = ', IF(NEW.cache_type_enum IS NULL, 'NULL', CONCAT('"', NEW.cache_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'c_cache', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cache_type_enum', OLD.cache_type_enum, NEW.cache_type_enum);
  END%%


DROP TRIGGER IF EXISTS c_configuration_d%%
CREATE TRIGGER `c_configuration_d`
BEFORE DELETE
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM c_configuration WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'c_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_trap_door', OLD.is_trap_door, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS c_configuration_i%%
CREATE TRIGGER `c_configuration_i`
AFTER INSERT
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO c_configuration(id, name, value, date_value, enabled, is_trap_door, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.value IS NULL, 'NULL, ', CONCAT('"', NEW.value, '", ')), IF(NEW.date_value IS NULL, 'NULL, ', CONCAT('"', NEW.date_value, '", ')), IF(NEW.enabled IS NULL, 'NULL, ', CONCAT('"', NEW.enabled, '", ')), IF(NEW.is_trap_door IS NULL, 'NULL, ', CONCAT('"', NEW.is_trap_door, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'c_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_value', NEW.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_trap_door', NEW.is_trap_door, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS c_configuration_u%%
CREATE TRIGGER `c_configuration_u`
AFTER UPDATE
  ON c_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE c_configuration SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ', date_value = ', IF(NEW.date_value IS NULL, 'NULL', CONCAT('"', NEW.date_value, '"')), ', enabled = ', IF(NEW.enabled IS NULL, 'NULL', CONCAT('"', NEW.enabled, '"')), ', is_trap_door = ', IF(NEW.is_trap_door IS NULL, 'NULL', CONCAT('"', NEW.is_trap_door, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'c_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NEW.date_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_trap_door', OLD.is_trap_door, NEW.is_trap_door);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS c_external_service_d%%
CREATE TRIGGER `c_external_service_d`
BEFORE DELETE
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM c_external_service WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'c_external_service', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END%%
DROP TRIGGER IF EXISTS c_external_service_i%%
CREATE TRIGGER `c_external_service_i`
AFTER INSERT
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO c_external_service(id, name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'c_external_service', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END%%
DROP TRIGGER IF EXISTS c_external_service_u%%
CREATE TRIGGER `c_external_service_u`
AFTER UPDATE
  ON c_external_service
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE c_external_service SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'c_external_service', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END%%


DROP TRIGGER IF EXISTS c_external_service_properties_d%%
CREATE TRIGGER `c_external_service_properties_d`
BEFORE DELETE
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM c_external_service_properties WHERE name = "', OLD.name, '"', ' AND external_service_id = "', OLD.external_service_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'c_external_service_properties', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_service_id', OLD.external_service_id, NULL);
  END%%
DROP TRIGGER IF EXISTS c_external_service_properties_i%%
CREATE TRIGGER `c_external_service_properties_i`
AFTER INSERT
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO c_external_service_properties(name, value, external_service_id) VALUES(', IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.value IS NULL, 'NULL, ', CONCAT('"', NEW.value, '", ')), IF(NEW.external_service_id IS NULL, 'NULL', CONCAT('"', NEW.external_service_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'c_external_service_properties', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_service_id', NEW.external_service_id, NULL);
  END%%
DROP TRIGGER IF EXISTS c_external_service_properties_u%%
CREATE TRIGGER `c_external_service_properties_u`
AFTER UPDATE
  ON c_external_service_properties
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE c_external_service_properties SET name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ', external_service_id = ', IF(NEW.external_service_id IS NULL, 'NULL', CONCAT('"', NEW.external_service_id, '"')), ' WHERE name = "', NEW.name, '"', ' AND external_service_id = "', OLD.external_service_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'c_external_service_properties', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_service_id', OLD.external_service_id, NEW.external_service_id);
  END%%


DROP TRIGGER IF EXISTS job_d%%
CREATE TRIGGER `job_d`
BEFORE DELETE
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM job WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cron_expression', OLD.cron_expression, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_time', OLD.create_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'task_priority', OLD.task_priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_name', OLD.group_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_start_time', OLD.previous_run_start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_time', OLD.next_run_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_key', OLD.job_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'initializing_errorlog', OLD.initializing_errorlog, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currently_running', OLD.currently_running, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updates_allowed', OLD.updates_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scheduler_group', OLD.scheduler_group, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_misfired', OLD.is_misfired, NULL);
  END%%
DROP TRIGGER IF EXISTS job_i%%
CREATE TRIGGER `job_i`
AFTER INSERT
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO job(id, name, display_name, cron_expression, create_time, task_priority, group_name, previous_run_start_time, next_run_time, job_key, initializing_errorlog, is_active, currently_running, updates_allowed, scheduler_group, is_misfired) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.display_name IS NULL, 'NULL, ', CONCAT('"', NEW.display_name, '", ')), IF(NEW.cron_expression IS NULL, 'NULL, ', CONCAT('"', NEW.cron_expression, '", ')), IF(NEW.create_time IS NULL, 'NULL, ', CONCAT('"', NEW.create_time, '", ')), IF(NEW.task_priority IS NULL, 'NULL, ', CONCAT('"', NEW.task_priority, '", ')), IF(NEW.group_name IS NULL, 'NULL, ', CONCAT('"', NEW.group_name, '", ')), IF(NEW.previous_run_start_time IS NULL, 'NULL, ', CONCAT('"', NEW.previous_run_start_time, '", ')), IF(NEW.next_run_time IS NULL, 'NULL, ', CONCAT('"', NEW.next_run_time, '", ')), IF(NEW.job_key IS NULL, 'NULL, ', CONCAT('"', NEW.job_key, '", ')), IF(NEW.initializing_errorlog IS NULL, 'NULL, ', CONCAT('"', NEW.initializing_errorlog, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.currently_running IS NULL, 'NULL, ', CONCAT('"', NEW.currently_running, '", ')), IF(NEW.updates_allowed IS NULL, 'NULL, ', CONCAT('"', NEW.updates_allowed, '", ')), IF(NEW.scheduler_group IS NULL, 'NULL, ', CONCAT('"', NEW.scheduler_group, '", ')), IF(NEW.is_misfired IS NULL, 'NULL', CONCAT('"', NEW.is_misfired, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cron_expression', NEW.cron_expression, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'create_time', NEW.create_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'task_priority', NEW.task_priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_name', NEW.group_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_start_time', NEW.previous_run_start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_run_time', NEW.next_run_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_key', NEW.job_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'initializing_errorlog', NEW.initializing_errorlog, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currently_running', NEW.currently_running, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updates_allowed', NEW.updates_allowed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'scheduler_group', NEW.scheduler_group, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_misfired', NEW.is_misfired, NULL);
  END%%
DROP TRIGGER IF EXISTS job_u%%
CREATE TRIGGER `job_u`
AFTER UPDATE
  ON job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE job SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', display_name = ', IF(NEW.display_name IS NULL, 'NULL', CONCAT('"', NEW.display_name, '"')), ', cron_expression = ', IF(NEW.cron_expression IS NULL, 'NULL', CONCAT('"', NEW.cron_expression, '"')), ', create_time = ', IF(NEW.create_time IS NULL, 'NULL', CONCAT('"', NEW.create_time, '"')), ', task_priority = ', IF(NEW.task_priority IS NULL, 'NULL', CONCAT('"', NEW.task_priority, '"')), ', group_name = ', IF(NEW.group_name IS NULL, 'NULL', CONCAT('"', NEW.group_name, '"')), ', previous_run_start_time = ', IF(NEW.previous_run_start_time IS NULL, 'NULL', CONCAT('"', NEW.previous_run_start_time, '"')), ', next_run_time = ', IF(NEW.next_run_time IS NULL, 'NULL', CONCAT('"', NEW.next_run_time, '"')), ', job_key = ', IF(NEW.job_key IS NULL, 'NULL', CONCAT('"', NEW.job_key, '"')), ', initializing_errorlog = ', IF(NEW.initializing_errorlog IS NULL, 'NULL', CONCAT('"', NEW.initializing_errorlog, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', currently_running = ', IF(NEW.currently_running IS NULL, 'NULL', CONCAT('"', NEW.currently_running, '"')), ', updates_allowed = ', IF(NEW.updates_allowed IS NULL, 'NULL', CONCAT('"', NEW.updates_allowed, '"')), ', scheduler_group = ', IF(NEW.scheduler_group IS NULL, 'NULL', CONCAT('"', NEW.scheduler_group, '"')), ', is_misfired = ', IF(NEW.is_misfired IS NULL, 'NULL', CONCAT('"', NEW.is_misfired, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cron_expression', OLD.cron_expression, NEW.cron_expression);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_time', OLD.create_time, NEW.create_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'task_priority', OLD.task_priority, NEW.task_priority);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_name', OLD.group_name, NEW.group_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_start_time', OLD.previous_run_start_time, NEW.previous_run_start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_time', OLD.next_run_time, NEW.next_run_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_key', OLD.job_key, NEW.job_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'initializing_errorlog', OLD.initializing_errorlog, NEW.initializing_errorlog);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currently_running', OLD.currently_running, NEW.currently_running);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updates_allowed', OLD.updates_allowed, NEW.updates_allowed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scheduler_group', OLD.scheduler_group, NEW.scheduler_group);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_misfired', OLD.is_misfired, NEW.is_misfired);
  END%%


DROP TRIGGER IF EXISTS job_run_history_d%%
CREATE TRIGGER `job_run_history_d`
BEFORE DELETE
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM job_run_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'trigger_type', OLD.trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS job_run_history_i%%
CREATE TRIGGER `job_run_history_i`
AFTER INSERT
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO job_run_history(id, job_id, version, start_time, end_time, status, error_message, trigger_type, error_log) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.job_id IS NULL, 'NULL, ', CONCAT('"', NEW.job_id, '", ')), IF(NEW.version IS NULL, 'NULL, ', CONCAT('"', NEW.version, '", ')), IF(NEW.start_time IS NULL, 'NULL, ', CONCAT('"', NEW.start_time, '", ')), IF(NEW.end_time IS NULL, 'NULL, ', CONCAT('"', NEW.end_time, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.error_message IS NULL, 'NULL, ', CONCAT('"', NEW.error_message, '", ')), IF(NEW.trigger_type IS NULL, 'NULL, ', CONCAT('"', NEW.trigger_type, '", ')), IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_id', NEW.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_time', NEW.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_time', NEW.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_message', NEW.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'trigger_type', NEW.trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS job_run_history_u%%
CREATE TRIGGER `job_run_history_u`
AFTER UPDATE
  ON job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE job_run_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', job_id = ', IF(NEW.job_id IS NULL, 'NULL', CONCAT('"', NEW.job_id, '"')), ', version = ', IF(NEW.version IS NULL, 'NULL', CONCAT('"', NEW.version, '"')), ', start_time = ', IF(NEW.start_time IS NULL, 'NULL', CONCAT('"', NEW.start_time, '"')), ', end_time = ', IF(NEW.end_time IS NULL, 'NULL', CONCAT('"', NEW.end_time, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', error_message = ', IF(NEW.error_message IS NULL, 'NULL', CONCAT('"', NEW.error_message, '"')), ', trigger_type = ', IF(NEW.trigger_type IS NULL, 'NULL', CONCAT('"', NEW.trigger_type, '"')), ', error_log = ', IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NEW.job_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NEW.start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NEW.end_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NEW.error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'trigger_type', OLD.trigger_type, NEW.trigger_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END%%


DROP TRIGGER IF EXISTS m_account_transfer_details_d%%
CREATE TRIGGER `m_account_transfer_details_d`
BEFORE DELETE
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_account_transfer_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_account_transfer_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_client_id', OLD.from_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_client_id', OLD.to_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_account_id', OLD.from_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_account_id', OLD.to_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_account_id', OLD.from_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_account_id', OLD.to_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_type', OLD.transfer_type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_details_i%%
CREATE TRIGGER `m_account_transfer_details_i`
AFTER INSERT
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_account_transfer_details(id, from_office_id, to_office_id, from_client_id, to_client_id, from_savings_account_id, to_savings_account_id, from_loan_account_id, to_loan_account_id, transfer_type) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.from_office_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_office_id, '", ')), IF(NEW.to_office_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_office_id, '", ')), IF(NEW.from_client_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_client_id, '", ')), IF(NEW.to_client_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_client_id, '", ')), IF(NEW.from_savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_savings_account_id, '", ')), IF(NEW.to_savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_savings_account_id, '", ')), IF(NEW.from_loan_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_loan_account_id, '", ')), IF(NEW.to_loan_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_loan_account_id, '", ')), IF(NEW.transfer_type IS NULL, 'NULL', CONCAT('"', NEW.transfer_type, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_account_transfer_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_office_id', NEW.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_office_id', NEW.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_client_id', NEW.from_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_client_id', NEW.to_client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_savings_account_id', NEW.from_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_savings_account_id', NEW.to_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_loan_account_id', NEW.from_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_loan_account_id', NEW.to_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_type', NEW.transfer_type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_details_u%%
CREATE TRIGGER `m_account_transfer_details_u`
AFTER UPDATE
  ON m_account_transfer_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_account_transfer_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', from_office_id = ', IF(NEW.from_office_id IS NULL, 'NULL', CONCAT('"', NEW.from_office_id, '"')), ', to_office_id = ', IF(NEW.to_office_id IS NULL, 'NULL', CONCAT('"', NEW.to_office_id, '"')), ', from_client_id = ', IF(NEW.from_client_id IS NULL, 'NULL', CONCAT('"', NEW.from_client_id, '"')), ', to_client_id = ', IF(NEW.to_client_id IS NULL, 'NULL', CONCAT('"', NEW.to_client_id, '"')), ', from_savings_account_id = ', IF(NEW.from_savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.from_savings_account_id, '"')), ', to_savings_account_id = ', IF(NEW.to_savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.to_savings_account_id, '"')), ', from_loan_account_id = ', IF(NEW.from_loan_account_id IS NULL, 'NULL', CONCAT('"', NEW.from_loan_account_id, '"')), ', to_loan_account_id = ', IF(NEW.to_loan_account_id IS NULL, 'NULL', CONCAT('"', NEW.to_loan_account_id, '"')), ', transfer_type = ', IF(NEW.transfer_type IS NULL, 'NULL', CONCAT('"', NEW.transfer_type, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NEW.from_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NEW.to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_client_id', OLD.from_client_id, NEW.from_client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_client_id', OLD.to_client_id, NEW.to_client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_account_id', OLD.from_savings_account_id, NEW.from_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_account_id', OLD.to_savings_account_id, NEW.to_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_account_id', OLD.from_loan_account_id, NEW.from_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_account_id', OLD.to_loan_account_id, NEW.to_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_type', OLD.transfer_type, NEW.transfer_type);
  END%%


DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_d%%
CREATE TRIGGER `m_account_transfer_standing_instructions_d`
BEFORE DELETE
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_account_transfer_standing_instructions WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_account_transfer_standing_instructions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'priority', OLD.priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instruction_type', OLD.instruction_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_till', OLD.valid_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_type', OLD.recurrence_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_frequency', OLD.recurrence_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_interval', OLD.recurrence_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_day', OLD.recurrence_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_month', OLD.recurrence_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_run_date', OLD.last_run_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_i%%
CREATE TRIGGER `m_account_transfer_standing_instructions_i`
AFTER INSERT
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_account_transfer_standing_instructions(id, name, account_transfer_details_id, priority, status, instruction_type, amount, valid_from, valid_till, recurrence_type, recurrence_frequency, recurrence_interval, recurrence_on_day, recurrence_on_month, last_run_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.account_transfer_details_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_transfer_details_id, '", ')), IF(NEW.priority IS NULL, 'NULL, ', CONCAT('"', NEW.priority, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.instruction_type IS NULL, 'NULL, ', CONCAT('"', NEW.instruction_type, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.valid_from IS NULL, 'NULL, ', CONCAT('"', NEW.valid_from, '", ')), IF(NEW.valid_till IS NULL, 'NULL, ', CONCAT('"', NEW.valid_till, '", ')), IF(NEW.recurrence_type IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_type, '", ')), IF(NEW.recurrence_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_frequency, '", ')), IF(NEW.recurrence_interval IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_interval, '", ')), IF(NEW.recurrence_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_on_day, '", ')), IF(NEW.recurrence_on_month IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_on_month, '", ')), IF(NEW.last_run_date IS NULL, 'NULL', CONCAT('"', NEW.last_run_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_account_transfer_standing_instructions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'priority', NEW.priority, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'instruction_type', NEW.instruction_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_till', NEW.valid_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_type', NEW.recurrence_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_frequency', NEW.recurrence_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_interval', NEW.recurrence_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_on_day', NEW.recurrence_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_on_month', NEW.recurrence_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_run_date', NEW.last_run_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_u%%
CREATE TRIGGER `m_account_transfer_standing_instructions_u`
AFTER UPDATE
  ON m_account_transfer_standing_instructions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_account_transfer_standing_instructions SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', account_transfer_details_id = ', IF(NEW.account_transfer_details_id IS NULL, 'NULL', CONCAT('"', NEW.account_transfer_details_id, '"')), ', priority = ', IF(NEW.priority IS NULL, 'NULL', CONCAT('"', NEW.priority, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', instruction_type = ', IF(NEW.instruction_type IS NULL, 'NULL', CONCAT('"', NEW.instruction_type, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', valid_from = ', IF(NEW.valid_from IS NULL, 'NULL', CONCAT('"', NEW.valid_from, '"')), ', valid_till = ', IF(NEW.valid_till IS NULL, 'NULL', CONCAT('"', NEW.valid_till, '"')), ', recurrence_type = ', IF(NEW.recurrence_type IS NULL, 'NULL', CONCAT('"', NEW.recurrence_type, '"')), ', recurrence_frequency = ', IF(NEW.recurrence_frequency IS NULL, 'NULL', CONCAT('"', NEW.recurrence_frequency, '"')), ', recurrence_interval = ', IF(NEW.recurrence_interval IS NULL, 'NULL', CONCAT('"', NEW.recurrence_interval, '"')), ', recurrence_on_day = ', IF(NEW.recurrence_on_day IS NULL, 'NULL', CONCAT('"', NEW.recurrence_on_day, '"')), ', recurrence_on_month = ', IF(NEW.recurrence_on_month IS NULL, 'NULL', CONCAT('"', NEW.recurrence_on_month, '"')), ', last_run_date = ', IF(NEW.last_run_date IS NULL, 'NULL', CONCAT('"', NEW.last_run_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_standing_instructions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'priority', OLD.priority, NEW.priority);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instruction_type', OLD.instruction_type, NEW.instruction_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_till', OLD.valid_till, NEW.valid_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_type', OLD.recurrence_type, NEW.recurrence_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_frequency', OLD.recurrence_frequency, NEW.recurrence_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_interval', OLD.recurrence_interval, NEW.recurrence_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_day', OLD.recurrence_on_day, NEW.recurrence_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_on_month', OLD.recurrence_on_month, NEW.recurrence_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_run_date', OLD.last_run_date, NEW.last_run_date);
  END%%


DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_d%%
CREATE TRIGGER `m_account_transfer_standing_instructions_history_d`
BEFORE DELETE
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_account_transfer_standing_instructions_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_account_transfer_standing_instructions_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'standing_instruction_id', OLD.standing_instruction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_i%%
CREATE TRIGGER `m_account_transfer_standing_instructions_history_i`
AFTER INSERT
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_account_transfer_standing_instructions_history(id, standing_instruction_id, status, execution_time, amount, error_log) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.standing_instruction_id IS NULL, 'NULL, ', CONCAT('"', NEW.standing_instruction_id, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.execution_time IS NULL, 'NULL, ', CONCAT('"', NEW.execution_time, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_account_transfer_standing_instructions_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'standing_instruction_id', NEW.standing_instruction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execution_time', NEW.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_standing_instructions_history_u%%
CREATE TRIGGER `m_account_transfer_standing_instructions_history_u`
AFTER UPDATE
  ON m_account_transfer_standing_instructions_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_account_transfer_standing_instructions_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', standing_instruction_id = ', IF(NEW.standing_instruction_id IS NULL, 'NULL', CONCAT('"', NEW.standing_instruction_id, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', execution_time = ', IF(NEW.execution_time IS NULL, 'NULL', CONCAT('"', NEW.execution_time, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', error_log = ', IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_standing_instructions_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'standing_instruction_id', OLD.standing_instruction_id, NEW.standing_instruction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NEW.execution_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END%%


DROP TRIGGER IF EXISTS m_account_transfer_transaction_d%%
CREATE TRIGGER `m_account_transfer_transaction_d`
BEFORE DELETE
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_account_transfer_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_account_transfer_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_transaction_id', OLD.from_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_transaction_id', OLD.from_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_transaction_id', OLD.to_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_transaction_id', OLD.to_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_transaction_i%%
CREATE TRIGGER `m_account_transfer_transaction_i`
AFTER INSERT
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_account_transfer_transaction(id, account_transfer_details_id, from_savings_transaction_id, from_loan_transaction_id, to_savings_transaction_id, to_loan_transaction_id, is_reversed, transaction_date, currency_code, currency_digits, currency_multiplesof, amount, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_transfer_details_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_transfer_details_id, '", ')), IF(NEW.from_savings_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_savings_transaction_id, '", ')), IF(NEW.from_loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_loan_transaction_id, '", ')), IF(NEW.to_savings_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_savings_transaction_id, '", ')), IF(NEW.to_loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_loan_transaction_id, '", ')), IF(NEW.is_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.is_reversed, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_account_transfer_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_savings_transaction_id', NEW.from_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_loan_transaction_id', NEW.from_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_savings_transaction_id', NEW.to_savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_loan_transaction_id', NEW.to_loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_account_transfer_transaction_u%%
CREATE TRIGGER `m_account_transfer_transaction_u`
AFTER UPDATE
  ON m_account_transfer_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_account_transfer_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_transfer_details_id = ', IF(NEW.account_transfer_details_id IS NULL, 'NULL', CONCAT('"', NEW.account_transfer_details_id, '"')), ', from_savings_transaction_id = ', IF(NEW.from_savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.from_savings_transaction_id, '"')), ', from_loan_transaction_id = ', IF(NEW.from_loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.from_loan_transaction_id, '"')), ', to_savings_transaction_id = ', IF(NEW.to_savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.to_savings_transaction_id, '"')), ', to_loan_transaction_id = ', IF(NEW.to_loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.to_loan_transaction_id, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_account_transfer_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_savings_transaction_id', OLD.from_savings_transaction_id, NEW.from_savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_loan_transaction_id', OLD.from_loan_transaction_id, NEW.from_loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_savings_transaction_id', OLD.to_savings_transaction_id, NEW.to_savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_loan_transaction_id', OLD.to_loan_transaction_id, NEW.to_loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_address_d%%
CREATE TRIGGER `m_address_d`
BEFORE DELETE
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_address WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'street', OLD.street, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_3', OLD.address_line_3, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'town_village', OLD.town_village, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'county_district', OLD.county_district, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state_province_id', OLD.state_province_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_id', OLD.country_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'postal_code', OLD.postal_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'latitude', OLD.latitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'longitude', OLD.longitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_by', OLD.created_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NULL);
  END%%
DROP TRIGGER IF EXISTS m_address_i%%
CREATE TRIGGER `m_address_i`
AFTER INSERT
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_address(id, street, address_line_1, address_line_2, address_line_3, town_village, city, county_district, state_province_id, country_id, postal_code, latitude, longitude, created_by, created_on, updated_by, updated_on) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.street IS NULL, 'NULL, ', CONCAT('"', NEW.street, '", ')), IF(NEW.address_line_1 IS NULL, 'NULL, ', CONCAT('"', NEW.address_line_1, '", ')), IF(NEW.address_line_2 IS NULL, 'NULL, ', CONCAT('"', NEW.address_line_2, '", ')), IF(NEW.address_line_3 IS NULL, 'NULL, ', CONCAT('"', NEW.address_line_3, '", ')), IF(NEW.town_village IS NULL, 'NULL, ', CONCAT('"', NEW.town_village, '", ')), IF(NEW.city IS NULL, 'NULL, ', CONCAT('"', NEW.city, '", ')), IF(NEW.county_district IS NULL, 'NULL, ', CONCAT('"', NEW.county_district, '", ')), IF(NEW.state_province_id IS NULL, 'NULL, ', CONCAT('"', NEW.state_province_id, '", ')), IF(NEW.country_id IS NULL, 'NULL, ', CONCAT('"', NEW.country_id, '", ')), IF(NEW.postal_code IS NULL, 'NULL, ', CONCAT('"', NEW.postal_code, '", ')), IF(NEW.latitude IS NULL, 'NULL, ', CONCAT('"', NEW.latitude, '", ')), IF(NEW.longitude IS NULL, 'NULL, ', CONCAT('"', NEW.longitude, '", ')), IF(NEW.created_by IS NULL, 'NULL, ', CONCAT('"', NEW.created_by, '", ')), IF(NEW.created_on IS NULL, 'NULL, ', CONCAT('"', NEW.created_on, '", ')), IF(NEW.updated_by IS NULL, 'NULL, ', CONCAT('"', NEW.updated_by, '", ')), IF(NEW.updated_on IS NULL, 'NULL', CONCAT('"', NEW.updated_on, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'street', NEW.street, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_1', NEW.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_2', NEW.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_3', NEW.address_line_3, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'town_village', NEW.town_village, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'city', NEW.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'county_district', NEW.county_district, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state_province_id', NEW.state_province_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country_id', NEW.country_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'postal_code', NEW.postal_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'latitude', NEW.latitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'longitude', NEW.longitude, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_by', NEW.created_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_on', NEW.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_by', NEW.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_on', NEW.updated_on, NULL);
  END%%
DROP TRIGGER IF EXISTS m_address_u%%
CREATE TRIGGER `m_address_u`
AFTER UPDATE
  ON m_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_address SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', street = ', IF(NEW.street IS NULL, 'NULL', CONCAT('"', NEW.street, '"')), ', address_line_1 = ', IF(NEW.address_line_1 IS NULL, 'NULL', CONCAT('"', NEW.address_line_1, '"')), ', address_line_2 = ', IF(NEW.address_line_2 IS NULL, 'NULL', CONCAT('"', NEW.address_line_2, '"')), ', address_line_3 = ', IF(NEW.address_line_3 IS NULL, 'NULL', CONCAT('"', NEW.address_line_3, '"')), ', town_village = ', IF(NEW.town_village IS NULL, 'NULL', CONCAT('"', NEW.town_village, '"')), ', city = ', IF(NEW.city IS NULL, 'NULL', CONCAT('"', NEW.city, '"')), ', county_district = ', IF(NEW.county_district IS NULL, 'NULL', CONCAT('"', NEW.county_district, '"')), ', state_province_id = ', IF(NEW.state_province_id IS NULL, 'NULL', CONCAT('"', NEW.state_province_id, '"')), ', country_id = ', IF(NEW.country_id IS NULL, 'NULL', CONCAT('"', NEW.country_id, '"')), ', postal_code = ', IF(NEW.postal_code IS NULL, 'NULL', CONCAT('"', NEW.postal_code, '"')), ', latitude = ', IF(NEW.latitude IS NULL, 'NULL', CONCAT('"', NEW.latitude, '"')), ', longitude = ', IF(NEW.longitude IS NULL, 'NULL', CONCAT('"', NEW.longitude, '"')), ', created_by = ', IF(NEW.created_by IS NULL, 'NULL', CONCAT('"', NEW.created_by, '"')), ', created_on = ', IF(NEW.created_on IS NULL, 'NULL', CONCAT('"', NEW.created_on, '"')), ', updated_by = ', IF(NEW.updated_by IS NULL, 'NULL', CONCAT('"', NEW.updated_by, '"')), ', updated_on = ', IF(NEW.updated_on IS NULL, 'NULL', CONCAT('"', NEW.updated_on, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'street', OLD.street, NEW.street);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NEW.address_line_1);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NEW.address_line_2);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_3', OLD.address_line_3, NEW.address_line_3);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'town_village', OLD.town_village, NEW.town_village);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NEW.city);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'county_district', OLD.county_district, NEW.county_district);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state_province_id', OLD.state_province_id, NEW.state_province_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_id', OLD.country_id, NEW.country_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'postal_code', OLD.postal_code, NEW.postal_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'latitude', OLD.latitude, NEW.latitude);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'longitude', OLD.longitude, NEW.longitude);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_by', OLD.created_by, NEW.created_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NEW.created_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NEW.updated_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NEW.updated_on);
  END%%


DROP TRIGGER IF EXISTS m_appuser_d%%
CREATE TRIGGER `m_appuser_d`
BEFORE DELETE
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_appuser WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_appuser', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firsttime_login_remaining', OLD.firsttime_login_remaining, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired', OLD.nonexpired, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonlocked', OLD.nonlocked, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired_credentials', OLD.nonexpired_credentials, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_time_password_updated', OLD.last_time_password_updated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password_never_expires', OLD.password_never_expires, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_self_service_user', OLD.is_self_service_user, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_i%%
CREATE TRIGGER `m_appuser_i`
AFTER INSERT
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_appuser(id, is_deleted, office_id, staff_id, username, firstname, lastname, password, email, firsttime_login_remaining, nonexpired, nonlocked, nonexpired_credentials, enabled, last_time_password_updated, password_never_expires, is_self_service_user) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.is_deleted IS NULL, 'NULL, ', CONCAT('"', NEW.is_deleted, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.username IS NULL, 'NULL, ', CONCAT('"', NEW.username, '", ')), IF(NEW.firstname IS NULL, 'NULL, ', CONCAT('"', NEW.firstname, '", ')), IF(NEW.lastname IS NULL, 'NULL, ', CONCAT('"', NEW.lastname, '", ')), IF(NEW.password IS NULL, 'NULL, ', CONCAT('"', NEW.password, '", ')), IF(NEW.email IS NULL, 'NULL, ', CONCAT('"', NEW.email, '", ')), IF(NEW.firsttime_login_remaining IS NULL, 'NULL, ', CONCAT('"', NEW.firsttime_login_remaining, '", ')), IF(NEW.nonexpired IS NULL, 'NULL, ', CONCAT('"', NEW.nonexpired, '", ')), IF(NEW.nonlocked IS NULL, 'NULL, ', CONCAT('"', NEW.nonlocked, '", ')), IF(NEW.nonexpired_credentials IS NULL, 'NULL, ', CONCAT('"', NEW.nonexpired_credentials, '", ')), IF(NEW.enabled IS NULL, 'NULL, ', CONCAT('"', NEW.enabled, '", ')), IF(NEW.last_time_password_updated IS NULL, 'NULL, ', CONCAT('"', NEW.last_time_password_updated, '", ')), IF(NEW.password_never_expires IS NULL, 'NULL, ', CONCAT('"', NEW.password_never_expires, '", ')), IF(NEW.is_self_service_user IS NULL, 'NULL', CONCAT('"', NEW.is_self_service_user, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_appuser', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'username', NEW.username, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password', NEW.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email', NEW.email, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firsttime_login_remaining', NEW.firsttime_login_remaining, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonexpired', NEW.nonexpired, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonlocked', NEW.nonlocked, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nonexpired_credentials', NEW.nonexpired_credentials, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_time_password_updated', NEW.last_time_password_updated, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password_never_expires', NEW.password_never_expires, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_self_service_user', NEW.is_self_service_user, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_u%%
CREATE TRIGGER `m_appuser_u`
AFTER UPDATE
  ON m_appuser
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_appuser SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', is_deleted = ', IF(NEW.is_deleted IS NULL, 'NULL', CONCAT('"', NEW.is_deleted, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', username = ', IF(NEW.username IS NULL, 'NULL', CONCAT('"', NEW.username, '"')), ', firstname = ', IF(NEW.firstname IS NULL, 'NULL', CONCAT('"', NEW.firstname, '"')), ', lastname = ', IF(NEW.lastname IS NULL, 'NULL', CONCAT('"', NEW.lastname, '"')), ', password = ', IF(NEW.password IS NULL, 'NULL', CONCAT('"', NEW.password, '"')), ', email = ', IF(NEW.email IS NULL, 'NULL', CONCAT('"', NEW.email, '"')), ', firsttime_login_remaining = ', IF(NEW.firsttime_login_remaining IS NULL, 'NULL', CONCAT('"', NEW.firsttime_login_remaining, '"')), ', nonexpired = ', IF(NEW.nonexpired IS NULL, 'NULL', CONCAT('"', NEW.nonexpired, '"')), ', nonlocked = ', IF(NEW.nonlocked IS NULL, 'NULL', CONCAT('"', NEW.nonlocked, '"')), ', nonexpired_credentials = ', IF(NEW.nonexpired_credentials IS NULL, 'NULL', CONCAT('"', NEW.nonexpired_credentials, '"')), ', enabled = ', IF(NEW.enabled IS NULL, 'NULL', CONCAT('"', NEW.enabled, '"')), ', last_time_password_updated = ', IF(NEW.last_time_password_updated IS NULL, 'NULL', CONCAT('"', NEW.last_time_password_updated, '"')), ', password_never_expires = ', IF(NEW.password_never_expires IS NULL, 'NULL', CONCAT('"', NEW.password_never_expires, '"')), ', is_self_service_user = ', IF(NEW.is_self_service_user IS NULL, 'NULL', CONCAT('"', NEW.is_self_service_user, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_appuser', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'username', OLD.username, NEW.username);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NEW.password);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email', OLD.email, NEW.email);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firsttime_login_remaining', OLD.firsttime_login_remaining, NEW.firsttime_login_remaining);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired', OLD.nonexpired, NEW.nonexpired);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonlocked', OLD.nonlocked, NEW.nonlocked);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nonexpired_credentials', OLD.nonexpired_credentials, NEW.nonexpired_credentials);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_time_password_updated', OLD.last_time_password_updated, NEW.last_time_password_updated);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password_never_expires', OLD.password_never_expires, NEW.password_never_expires);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_self_service_user', OLD.is_self_service_user, NEW.is_self_service_user);
  END%%


DROP TRIGGER IF EXISTS m_appuser_previous_password_d%%
CREATE TRIGGER `m_appuser_previous_password_d`
BEFORE DELETE
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_appuser_previous_password WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_appuser_previous_password', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'removal_date', OLD.removal_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_previous_password_i%%
CREATE TRIGGER `m_appuser_previous_password_i`
AFTER INSERT
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_appuser_previous_password(id, user_id, password, removal_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.user_id IS NULL, 'NULL, ', CONCAT('"', NEW.user_id, '", ')), IF(NEW.password IS NULL, 'NULL, ', CONCAT('"', NEW.password, '", ')), IF(NEW.removal_date IS NULL, 'NULL', CONCAT('"', NEW.removal_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_appuser_previous_password', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_id', NEW.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'password', NEW.password, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'removal_date', NEW.removal_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_previous_password_u%%
CREATE TRIGGER `m_appuser_previous_password_u`
AFTER UPDATE
  ON m_appuser_previous_password
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_appuser_previous_password SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', user_id = ', IF(NEW.user_id IS NULL, 'NULL', CONCAT('"', NEW.user_id, '"')), ', password = ', IF(NEW.password IS NULL, 'NULL', CONCAT('"', NEW.password, '"')), ', removal_date = ', IF(NEW.removal_date IS NULL, 'NULL', CONCAT('"', NEW.removal_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_appuser_previous_password', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NEW.user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'password', OLD.password, NEW.password);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'removal_date', OLD.removal_date, NEW.removal_date);
  END%%


DROP TRIGGER IF EXISTS m_appuser_role_d%%
CREATE TRIGGER `m_appuser_role_d`
BEFORE DELETE
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_appuser_role WHERE appuser_id = "', OLD.appuser_id, '"', ' AND role_id = "', OLD.role_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_appuser_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_role_i%%
CREATE TRIGGER `m_appuser_role_i`
AFTER INSERT
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_appuser_role(appuser_id, role_id) VALUES(', IF(NEW.appuser_id IS NULL, 'NULL, ', CONCAT('"', NEW.appuser_id, '", ')), IF(NEW.role_id IS NULL, 'NULL', CONCAT('"', NEW.role_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_appuser_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_id', NEW.role_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_appuser_role_u%%
CREATE TRIGGER `m_appuser_role_u`
AFTER UPDATE
  ON m_appuser_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_appuser_role SET appuser_id = ', IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ', role_id = ', IF(NEW.role_id IS NULL, 'NULL', CONCAT('"', NEW.role_id, '"')), ' WHERE appuser_id = "', NEW.appuser_id, '"', ' AND role_id = "', OLD.role_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_appuser_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NEW.role_id);
  END%%


DROP TRIGGER IF EXISTS m_calendar_d%%
CREATE TRIGGER `m_calendar_d`
BEFORE DELETE
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_calendar WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_calendar', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_time', OLD.meeting_time, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_i%%
CREATE TRIGGER `m_calendar_i`
AFTER INSERT
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_calendar(id, title, description, location, start_date, end_date, duration, calendar_type_enum, repeating, recurrence, remind_by_enum, first_reminder, second_reminder, createdby_id, lastmodifiedby_id, created_date, lastmodified_date, meeting_time) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.title IS NULL, 'NULL, ', CONCAT('"', NEW.title, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.location IS NULL, 'NULL, ', CONCAT('"', NEW.location, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.duration IS NULL, 'NULL, ', CONCAT('"', NEW.duration, '", ')), IF(NEW.calendar_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.calendar_type_enum, '", ')), IF(NEW.repeating IS NULL, 'NULL, ', CONCAT('"', NEW.repeating, '", ')), IF(NEW.recurrence IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence, '", ')), IF(NEW.remind_by_enum IS NULL, 'NULL, ', CONCAT('"', NEW.remind_by_enum, '", ')), IF(NEW.first_reminder IS NULL, 'NULL, ', CONCAT('"', NEW.first_reminder, '", ')), IF(NEW.second_reminder IS NULL, 'NULL, ', CONCAT('"', NEW.second_reminder, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.meeting_time IS NULL, 'NULL', CONCAT('"', NEW.meeting_time, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_calendar', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'title', NEW.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duration', NEW.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_type_enum', NEW.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repeating', NEW.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remind_by_enum', NEW.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'first_reminder', NEW.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_reminder', NEW.second_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_time', NEW.meeting_time, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_u%%
CREATE TRIGGER `m_calendar_u`
AFTER UPDATE
  ON m_calendar
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_calendar SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', title = ', IF(NEW.title IS NULL, 'NULL', CONCAT('"', NEW.title, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', location = ', IF(NEW.location IS NULL, 'NULL', CONCAT('"', NEW.location, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', duration = ', IF(NEW.duration IS NULL, 'NULL', CONCAT('"', NEW.duration, '"')), ', calendar_type_enum = ', IF(NEW.calendar_type_enum IS NULL, 'NULL', CONCAT('"', NEW.calendar_type_enum, '"')), ', repeating = ', IF(NEW.repeating IS NULL, 'NULL', CONCAT('"', NEW.repeating, '"')), ', recurrence = ', IF(NEW.recurrence IS NULL, 'NULL', CONCAT('"', NEW.recurrence, '"')), ', remind_by_enum = ', IF(NEW.remind_by_enum IS NULL, 'NULL', CONCAT('"', NEW.remind_by_enum, '"')), ', first_reminder = ', IF(NEW.first_reminder IS NULL, 'NULL', CONCAT('"', NEW.first_reminder, '"')), ', second_reminder = ', IF(NEW.second_reminder IS NULL, 'NULL', CONCAT('"', NEW.second_reminder, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', meeting_time = ', IF(NEW.meeting_time IS NULL, 'NULL', CONCAT('"', NEW.meeting_time, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_calendar', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NEW.title);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NEW.duration);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NEW.calendar_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NEW.repeating);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NEW.remind_by_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NEW.first_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NEW.second_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_time', OLD.meeting_time, NEW.meeting_time);
  END%%


DROP TRIGGER IF EXISTS m_calendar_history_d%%
CREATE TRIGGER `m_calendar_history_d`
BEFORE DELETE
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_calendar_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_calendar_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_history_i%%
CREATE TRIGGER `m_calendar_history_i`
AFTER INSERT
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_calendar_history(id, calendar_id, title, description, location, start_date, end_date, duration, calendar_type_enum, repeating, recurrence, remind_by_enum, first_reminder, second_reminder) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.calendar_id IS NULL, 'NULL, ', CONCAT('"', NEW.calendar_id, '", ')), IF(NEW.title IS NULL, 'NULL, ', CONCAT('"', NEW.title, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.location IS NULL, 'NULL, ', CONCAT('"', NEW.location, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.duration IS NULL, 'NULL, ', CONCAT('"', NEW.duration, '", ')), IF(NEW.calendar_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.calendar_type_enum, '", ')), IF(NEW.repeating IS NULL, 'NULL, ', CONCAT('"', NEW.repeating, '", ')), IF(NEW.recurrence IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence, '", ')), IF(NEW.remind_by_enum IS NULL, 'NULL, ', CONCAT('"', NEW.remind_by_enum, '", ')), IF(NEW.first_reminder IS NULL, 'NULL, ', CONCAT('"', NEW.first_reminder, '", ')), IF(NEW.second_reminder IS NULL, 'NULL', CONCAT('"', NEW.second_reminder, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_calendar_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_id', NEW.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'title', NEW.title, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duration', NEW.duration, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_type_enum', NEW.calendar_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repeating', NEW.repeating, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remind_by_enum', NEW.remind_by_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'first_reminder', NEW.first_reminder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_reminder', NEW.second_reminder, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_history_u%%
CREATE TRIGGER `m_calendar_history_u`
AFTER UPDATE
  ON m_calendar_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_calendar_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', calendar_id = ', IF(NEW.calendar_id IS NULL, 'NULL', CONCAT('"', NEW.calendar_id, '"')), ', title = ', IF(NEW.title IS NULL, 'NULL', CONCAT('"', NEW.title, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', location = ', IF(NEW.location IS NULL, 'NULL', CONCAT('"', NEW.location, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', duration = ', IF(NEW.duration IS NULL, 'NULL', CONCAT('"', NEW.duration, '"')), ', calendar_type_enum = ', IF(NEW.calendar_type_enum IS NULL, 'NULL', CONCAT('"', NEW.calendar_type_enum, '"')), ', repeating = ', IF(NEW.repeating IS NULL, 'NULL', CONCAT('"', NEW.repeating, '"')), ', recurrence = ', IF(NEW.recurrence IS NULL, 'NULL', CONCAT('"', NEW.recurrence, '"')), ', remind_by_enum = ', IF(NEW.remind_by_enum IS NULL, 'NULL', CONCAT('"', NEW.remind_by_enum, '"')), ', first_reminder = ', IF(NEW.first_reminder IS NULL, 'NULL', CONCAT('"', NEW.first_reminder, '"')), ', second_reminder = ', IF(NEW.second_reminder IS NULL, 'NULL', CONCAT('"', NEW.second_reminder, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_calendar_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NEW.calendar_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'title', OLD.title, NEW.title);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duration', OLD.duration, NEW.duration);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_type_enum', OLD.calendar_type_enum, NEW.calendar_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repeating', OLD.repeating, NEW.repeating);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remind_by_enum', OLD.remind_by_enum, NEW.remind_by_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'first_reminder', OLD.first_reminder, NEW.first_reminder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_reminder', OLD.second_reminder, NEW.second_reminder);
  END%%


DROP TRIGGER IF EXISTS m_calendar_instance_d%%
CREATE TRIGGER `m_calendar_instance_d`
BEFORE DELETE
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_calendar_instance WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_calendar_instance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_instance_i%%
CREATE TRIGGER `m_calendar_instance_i`
AFTER INSERT
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_calendar_instance(id, calendar_id, entity_id, entity_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.calendar_id IS NULL, 'NULL, ', CONCAT('"', NEW.calendar_id, '", ')), IF(NEW.entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.entity_id, '", ')), IF(NEW.entity_type_enum IS NULL, 'NULL', CONCAT('"', NEW.entity_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_calendar_instance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_id', NEW.calendar_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type_enum', NEW.entity_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_calendar_instance_u%%
CREATE TRIGGER `m_calendar_instance_u`
AFTER UPDATE
  ON m_calendar_instance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_calendar_instance SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', calendar_id = ', IF(NEW.calendar_id IS NULL, 'NULL', CONCAT('"', NEW.calendar_id, '"')), ', entity_id = ', IF(NEW.entity_id IS NULL, 'NULL', CONCAT('"', NEW.entity_id, '"')), ', entity_type_enum = ', IF(NEW.entity_type_enum IS NULL, 'NULL', CONCAT('"', NEW.entity_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_calendar_instance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_id', OLD.calendar_id, NEW.calendar_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type_enum', OLD.entity_type_enum, NEW.entity_type_enum);
  END%%


DROP TRIGGER IF EXISTS m_cashier_transactions_d%%
CREATE TRIGGER `m_cashier_transactions_d`
BEFORE DELETE
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_cashier_transactions WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_cashier_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cashier_id', OLD.cashier_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_type', OLD.txn_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_amount', OLD.txn_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_date', OLD.txn_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_note', OLD.txn_note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_cashier_transactions_i%%
CREATE TRIGGER `m_cashier_transactions_i`
AFTER INSERT
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_cashier_transactions(id, cashier_id, txn_type, txn_amount, txn_date, created_date, entity_type, entity_id, txn_note, currency_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.cashier_id IS NULL, 'NULL, ', CONCAT('"', NEW.cashier_id, '", ')), IF(NEW.txn_type IS NULL, 'NULL, ', CONCAT('"', NEW.txn_type, '", ')), IF(NEW.txn_amount IS NULL, 'NULL, ', CONCAT('"', NEW.txn_amount, '", ')), IF(NEW.txn_date IS NULL, 'NULL, ', CONCAT('"', NEW.txn_date, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.entity_type, '", ')), IF(NEW.entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.entity_id, '", ')), IF(NEW.txn_note IS NULL, 'NULL, ', CONCAT('"', NEW.txn_note, '", ')), IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_cashier_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cashier_id', NEW.cashier_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_type', NEW.txn_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_amount', NEW.txn_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_date', NEW.txn_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type', NEW.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'txn_note', NEW.txn_note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_cashier_transactions_u%%
CREATE TRIGGER `m_cashier_transactions_u`
AFTER UPDATE
  ON m_cashier_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_cashier_transactions SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', cashier_id = ', IF(NEW.cashier_id IS NULL, 'NULL', CONCAT('"', NEW.cashier_id, '"')), ', txn_type = ', IF(NEW.txn_type IS NULL, 'NULL', CONCAT('"', NEW.txn_type, '"')), ', txn_amount = ', IF(NEW.txn_amount IS NULL, 'NULL', CONCAT('"', NEW.txn_amount, '"')), ', txn_date = ', IF(NEW.txn_date IS NULL, 'NULL', CONCAT('"', NEW.txn_date, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', entity_type = ', IF(NEW.entity_type IS NULL, 'NULL', CONCAT('"', NEW.entity_type, '"')), ', entity_id = ', IF(NEW.entity_id IS NULL, 'NULL', CONCAT('"', NEW.entity_id, '"')), ', txn_note = ', IF(NEW.txn_note IS NULL, 'NULL', CONCAT('"', NEW.txn_note, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_cashier_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cashier_id', OLD.cashier_id, NEW.cashier_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_type', OLD.txn_type, NEW.txn_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_amount', OLD.txn_amount, NEW.txn_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_date', OLD.txn_date, NEW.txn_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NEW.entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'txn_note', OLD.txn_note, NEW.txn_note);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END%%


DROP TRIGGER IF EXISTS m_cashiers_d%%
CREATE TRIGGER `m_cashiers_d`
BEFORE DELETE
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_cashiers WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_cashiers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'teller_id', OLD.teller_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'full_day', OLD.full_day, NULL);
  END%%
DROP TRIGGER IF EXISTS m_cashiers_i%%
CREATE TRIGGER `m_cashiers_i`
AFTER INSERT
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_cashiers(id, staff_id, teller_id, description, start_date, end_date, start_time, end_time, full_day) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.teller_id IS NULL, 'NULL, ', CONCAT('"', NEW.teller_id, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.start_time IS NULL, 'NULL, ', CONCAT('"', NEW.start_time, '", ')), IF(NEW.end_time IS NULL, 'NULL, ', CONCAT('"', NEW.end_time, '", ')), IF(NEW.full_day IS NULL, 'NULL', CONCAT('"', NEW.full_day, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_cashiers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'teller_id', NEW.teller_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_time', NEW.start_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_time', NEW.end_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'full_day', NEW.full_day, NULL);
  END%%
DROP TRIGGER IF EXISTS m_cashiers_u%%
CREATE TRIGGER `m_cashiers_u`
AFTER UPDATE
  ON m_cashiers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_cashiers SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', teller_id = ', IF(NEW.teller_id IS NULL, 'NULL', CONCAT('"', NEW.teller_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', start_time = ', IF(NEW.start_time IS NULL, 'NULL', CONCAT('"', NEW.start_time, '"')), ', end_time = ', IF(NEW.end_time IS NULL, 'NULL', CONCAT('"', NEW.end_time, '"')), ', full_day = ', IF(NEW.full_day IS NULL, 'NULL', CONCAT('"', NEW.full_day, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_cashiers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'teller_id', OLD.teller_id, NEW.teller_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_time', OLD.start_time, NEW.start_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_time', OLD.end_time, NEW.end_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'full_day', OLD.full_day, NEW.full_day);
  END%%


DROP TRIGGER IF EXISTS m_charge_d%%
CREATE TRIGGER `m_charge_d`
BEFORE DELETE
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_applies_to_enum', OLD.charge_applies_to_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_frequency', OLD.fee_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'income_or_liability_account_id', OLD.income_or_liability_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_charge_i%%
CREATE TRIGGER `m_charge_i`
AFTER INSERT
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_charge(id, name, currency_code, charge_applies_to_enum, charge_time_enum, charge_calculation_enum, charge_payment_mode_enum, amount, fee_on_day, fee_interval, fee_on_month, is_penalty, is_active, is_deleted, min_cap, max_cap, fee_frequency, income_or_liability_account_id, tax_group_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.charge_applies_to_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_applies_to_enum, '", ')), IF(NEW.charge_time_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_time_enum, '", ')), IF(NEW.charge_calculation_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_calculation_enum, '", ')), IF(NEW.charge_payment_mode_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_payment_mode_enum, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.fee_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.fee_on_day, '", ')), IF(NEW.fee_interval IS NULL, 'NULL, ', CONCAT('"', NEW.fee_interval, '", ')), IF(NEW.fee_on_month IS NULL, 'NULL, ', CONCAT('"', NEW.fee_on_month, '", ')), IF(NEW.is_penalty IS NULL, 'NULL, ', CONCAT('"', NEW.is_penalty, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.is_deleted IS NULL, 'NULL, ', CONCAT('"', NEW.is_deleted, '", ')), IF(NEW.min_cap IS NULL, 'NULL, ', CONCAT('"', NEW.min_cap, '", ')), IF(NEW.max_cap IS NULL, 'NULL, ', CONCAT('"', NEW.max_cap, '", ')), IF(NEW.fee_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.fee_frequency, '", ')), IF(NEW.income_or_liability_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.income_or_liability_account_id, '", ')), IF(NEW.tax_group_id IS NULL, 'NULL', CONCAT('"', NEW.tax_group_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_applies_to_enum', NEW.charge_applies_to_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_day', NEW.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_interval', NEW.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_month', NEW.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_frequency', NEW.fee_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'income_or_liability_account_id', NEW.income_or_liability_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_charge_u%%
CREATE TRIGGER `m_charge_u`
AFTER UPDATE
  ON m_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', charge_applies_to_enum = ', IF(NEW.charge_applies_to_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_applies_to_enum, '"')), ', charge_time_enum = ', IF(NEW.charge_time_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_time_enum, '"')), ', charge_calculation_enum = ', IF(NEW.charge_calculation_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_calculation_enum, '"')), ', charge_payment_mode_enum = ', IF(NEW.charge_payment_mode_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_payment_mode_enum, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', fee_on_day = ', IF(NEW.fee_on_day IS NULL, 'NULL', CONCAT('"', NEW.fee_on_day, '"')), ', fee_interval = ', IF(NEW.fee_interval IS NULL, 'NULL', CONCAT('"', NEW.fee_interval, '"')), ', fee_on_month = ', IF(NEW.fee_on_month IS NULL, 'NULL', CONCAT('"', NEW.fee_on_month, '"')), ', is_penalty = ', IF(NEW.is_penalty IS NULL, 'NULL', CONCAT('"', NEW.is_penalty, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', is_deleted = ', IF(NEW.is_deleted IS NULL, 'NULL', CONCAT('"', NEW.is_deleted, '"')), ', min_cap = ', IF(NEW.min_cap IS NULL, 'NULL', CONCAT('"', NEW.min_cap, '"')), ', max_cap = ', IF(NEW.max_cap IS NULL, 'NULL', CONCAT('"', NEW.max_cap, '"')), ', fee_frequency = ', IF(NEW.fee_frequency IS NULL, 'NULL', CONCAT('"', NEW.fee_frequency, '"')), ', income_or_liability_account_id = ', IF(NEW.income_or_liability_account_id IS NULL, 'NULL', CONCAT('"', NEW.income_or_liability_account_id, '"')), ', tax_group_id = ', IF(NEW.tax_group_id IS NULL, 'NULL', CONCAT('"', NEW.tax_group_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_applies_to_enum', OLD.charge_applies_to_enum, NEW.charge_applies_to_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NEW.fee_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NEW.fee_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NEW.fee_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_frequency', OLD.fee_frequency, NEW.fee_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'income_or_liability_account_id', OLD.income_or_liability_account_id, NEW.income_or_liability_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
  END%%


DROP TRIGGER IF EXISTS m_client_d%%
CREATE TRIGGER `m_client_d`
BEFORE DELETE
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status', OLD.sub_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_joining_date', OLD.office_joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_to_office_id', OLD.transfer_to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fullname', OLD.fullname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_staff', OLD.is_staff, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_product', OLD.default_savings_product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_account', OLD.default_savings_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_type_cv_id', OLD.client_type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_classification_cv_id', OLD.client_classification_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reject_reason_cv_id', OLD.reject_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', OLD.withdraw_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawn_on_date', OLD.withdrawn_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_on_userid', OLD.withdraw_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_date', OLD.reactivated_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_userid', OLD.reactivated_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'legal_form_enum', OLD.legal_form_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_on_date', OLD.reopened_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_by_userid', OLD.reopened_by_userid, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_i%%
CREATE TRIGGER `m_client_i`
AFTER INSERT
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client(id, account_no, external_id, status_enum, sub_status, activation_date, office_joining_date, office_id, transfer_to_office_id, staff_id, firstname, middlename, lastname, fullname, display_name, mobile_no, is_staff, gender_cv_id, date_of_birth, image_id, closure_reason_cv_id, closedon_date, updated_by, updated_on, submittedon_date, submittedon_userid, activatedon_userid, closedon_userid, default_savings_product, default_savings_account, client_type_cv_id, client_classification_cv_id, reject_reason_cv_id, rejectedon_date, rejectedon_userid, withdraw_reason_cv_id, withdrawn_on_date, withdraw_on_userid, reactivated_on_date, reactivated_on_userid, legal_form_enum, reopened_on_date, reopened_by_userid) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_no IS NULL, 'NULL, ', CONCAT('"', NEW.account_no, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.sub_status IS NULL, 'NULL, ', CONCAT('"', NEW.sub_status, '", ')), IF(NEW.activation_date IS NULL, 'NULL, ', CONCAT('"', NEW.activation_date, '", ')), IF(NEW.office_joining_date IS NULL, 'NULL, ', CONCAT('"', NEW.office_joining_date, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.transfer_to_office_id IS NULL, 'NULL, ', CONCAT('"', NEW.transfer_to_office_id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.firstname IS NULL, 'NULL, ', CONCAT('"', NEW.firstname, '", ')), IF(NEW.middlename IS NULL, 'NULL, ', CONCAT('"', NEW.middlename, '", ')), IF(NEW.lastname IS NULL, 'NULL, ', CONCAT('"', NEW.lastname, '", ')), IF(NEW.fullname IS NULL, 'NULL, ', CONCAT('"', NEW.fullname, '", ')), IF(NEW.display_name IS NULL, 'NULL, ', CONCAT('"', NEW.display_name, '", ')), IF(NEW.mobile_no IS NULL, 'NULL, ', CONCAT('"', NEW.mobile_no, '", ')), IF(NEW.is_staff IS NULL, 'NULL, ', CONCAT('"', NEW.is_staff, '", ')), IF(NEW.gender_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.gender_cv_id, '", ')), IF(NEW.date_of_birth IS NULL, 'NULL, ', CONCAT('"', NEW.date_of_birth, '", ')), IF(NEW.image_id IS NULL, 'NULL, ', CONCAT('"', NEW.image_id, '", ')), IF(NEW.closure_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.closure_reason_cv_id, '", ')), IF(NEW.closedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_date, '", ')), IF(NEW.updated_by IS NULL, 'NULL, ', CONCAT('"', NEW.updated_by, '", ')), IF(NEW.updated_on IS NULL, 'NULL, ', CONCAT('"', NEW.updated_on, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.submittedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_userid, '", ')), IF(NEW.activatedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.activatedon_userid, '", ')), IF(NEW.closedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_userid, '", ')), IF(NEW.default_savings_product IS NULL, 'NULL, ', CONCAT('"', NEW.default_savings_product, '", ')), IF(NEW.default_savings_account IS NULL, 'NULL, ', CONCAT('"', NEW.default_savings_account, '", ')), IF(NEW.client_type_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_type_cv_id, '", ')), IF(NEW.client_classification_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_classification_cv_id, '", ')), IF(NEW.reject_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.reject_reason_cv_id, '", ')), IF(NEW.rejectedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_date, '", ')), IF(NEW.rejectedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_userid, '", ')), IF(NEW.withdraw_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.withdraw_reason_cv_id, '", ')), IF(NEW.withdrawn_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawn_on_date, '", ')), IF(NEW.withdraw_on_userid IS NULL, 'NULL, ', CONCAT('"', NEW.withdraw_on_userid, '", ')), IF(NEW.reactivated_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.reactivated_on_date, '", ')), IF(NEW.reactivated_on_userid IS NULL, 'NULL, ', CONCAT('"', NEW.reactivated_on_userid, '", ')), IF(NEW.legal_form_enum IS NULL, 'NULL, ', CONCAT('"', NEW.legal_form_enum, '", ')), IF(NEW.reopened_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.reopened_on_date, '", ')), IF(NEW.reopened_by_userid IS NULL, 'NULL', CONCAT('"', NEW.reopened_by_userid, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sub_status', NEW.sub_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activation_date', NEW.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_joining_date', NEW.office_joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_to_office_id', NEW.transfer_to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'middlename', NEW.middlename, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fullname', NEW.fullname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_staff', NEW.is_staff, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'gender_cv_id', NEW.gender_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_of_birth', NEW.date_of_birth, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'image_id', NEW.image_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_reason_cv_id', NEW.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_by', NEW.updated_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'updated_on', NEW.updated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_savings_product', NEW.default_savings_product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_savings_account', NEW.default_savings_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_type_cv_id', NEW.client_type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_classification_cv_id', NEW.client_classification_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reject_reason_cv_id', NEW.reject_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', NEW.withdraw_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawn_on_date', NEW.withdrawn_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdraw_on_userid', NEW.withdraw_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reactivated_on_date', NEW.reactivated_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reactivated_on_userid', NEW.reactivated_on_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'legal_form_enum', NEW.legal_form_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reopened_on_date', NEW.reopened_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reopened_by_userid', NEW.reopened_by_userid, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_u%%
CREATE TRIGGER `m_client_u`
AFTER UPDATE
  ON m_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_no = ', IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', sub_status = ', IF(NEW.sub_status IS NULL, 'NULL', CONCAT('"', NEW.sub_status, '"')), ', activation_date = ', IF(NEW.activation_date IS NULL, 'NULL', CONCAT('"', NEW.activation_date, '"')), ', office_joining_date = ', IF(NEW.office_joining_date IS NULL, 'NULL', CONCAT('"', NEW.office_joining_date, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', transfer_to_office_id = ', IF(NEW.transfer_to_office_id IS NULL, 'NULL', CONCAT('"', NEW.transfer_to_office_id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', firstname = ', IF(NEW.firstname IS NULL, 'NULL', CONCAT('"', NEW.firstname, '"')), ', middlename = ', IF(NEW.middlename IS NULL, 'NULL', CONCAT('"', NEW.middlename, '"')), ', lastname = ', IF(NEW.lastname IS NULL, 'NULL', CONCAT('"', NEW.lastname, '"')), ', fullname = ', IF(NEW.fullname IS NULL, 'NULL', CONCAT('"', NEW.fullname, '"')), ', display_name = ', IF(NEW.display_name IS NULL, 'NULL', CONCAT('"', NEW.display_name, '"')), ', mobile_no = ', IF(NEW.mobile_no IS NULL, 'NULL', CONCAT('"', NEW.mobile_no, '"')), ', is_staff = ', IF(NEW.is_staff IS NULL, 'NULL', CONCAT('"', NEW.is_staff, '"')), ', gender_cv_id = ', IF(NEW.gender_cv_id IS NULL, 'NULL', CONCAT('"', NEW.gender_cv_id, '"')), ', date_of_birth = ', IF(NEW.date_of_birth IS NULL, 'NULL', CONCAT('"', NEW.date_of_birth, '"')), ', image_id = ', IF(NEW.image_id IS NULL, 'NULL', CONCAT('"', NEW.image_id, '"')), ', closure_reason_cv_id = ', IF(NEW.closure_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.closure_reason_cv_id, '"')), ', closedon_date = ', IF(NEW.closedon_date IS NULL, 'NULL', CONCAT('"', NEW.closedon_date, '"')), ', updated_by = ', IF(NEW.updated_by IS NULL, 'NULL', CONCAT('"', NEW.updated_by, '"')), ', updated_on = ', IF(NEW.updated_on IS NULL, 'NULL', CONCAT('"', NEW.updated_on, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', submittedon_userid = ', IF(NEW.submittedon_userid IS NULL, 'NULL', CONCAT('"', NEW.submittedon_userid, '"')), ', activatedon_userid = ', IF(NEW.activatedon_userid IS NULL, 'NULL', CONCAT('"', NEW.activatedon_userid, '"')), ', closedon_userid = ', IF(NEW.closedon_userid IS NULL, 'NULL', CONCAT('"', NEW.closedon_userid, '"')), ', default_savings_product = ', IF(NEW.default_savings_product IS NULL, 'NULL', CONCAT('"', NEW.default_savings_product, '"')), ', default_savings_account = ', IF(NEW.default_savings_account IS NULL, 'NULL', CONCAT('"', NEW.default_savings_account, '"')), ', client_type_cv_id = ', IF(NEW.client_type_cv_id IS NULL, 'NULL', CONCAT('"', NEW.client_type_cv_id, '"')), ', client_classification_cv_id = ', IF(NEW.client_classification_cv_id IS NULL, 'NULL', CONCAT('"', NEW.client_classification_cv_id, '"')), ', reject_reason_cv_id = ', IF(NEW.reject_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.reject_reason_cv_id, '"')), ', rejectedon_date = ', IF(NEW.rejectedon_date IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_date, '"')), ', rejectedon_userid = ', IF(NEW.rejectedon_userid IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_userid, '"')), ', withdraw_reason_cv_id = ', IF(NEW.withdraw_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.withdraw_reason_cv_id, '"')), ', withdrawn_on_date = ', IF(NEW.withdrawn_on_date IS NULL, 'NULL', CONCAT('"', NEW.withdrawn_on_date, '"')), ', withdraw_on_userid = ', IF(NEW.withdraw_on_userid IS NULL, 'NULL', CONCAT('"', NEW.withdraw_on_userid, '"')), ', reactivated_on_date = ', IF(NEW.reactivated_on_date IS NULL, 'NULL', CONCAT('"', NEW.reactivated_on_date, '"')), ', reactivated_on_userid = ', IF(NEW.reactivated_on_userid IS NULL, 'NULL', CONCAT('"', NEW.reactivated_on_userid, '"')), ', legal_form_enum = ', IF(NEW.legal_form_enum IS NULL, 'NULL', CONCAT('"', NEW.legal_form_enum, '"')), ', reopened_on_date = ', IF(NEW.reopened_on_date IS NULL, 'NULL', CONCAT('"', NEW.reopened_on_date, '"')), ', reopened_by_userid = ', IF(NEW.reopened_by_userid IS NULL, 'NULL', CONCAT('"', NEW.reopened_by_userid, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status', OLD.sub_status, NEW.sub_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NEW.activation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_joining_date', OLD.office_joining_date, NEW.office_joining_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_to_office_id', OLD.transfer_to_office_id, NEW.transfer_to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'middlename', OLD.middlename, NEW.middlename);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fullname', OLD.fullname, NEW.fullname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_staff', OLD.is_staff, NEW.is_staff);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'gender_cv_id', OLD.gender_cv_id, NEW.gender_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_of_birth', OLD.date_of_birth, NEW.date_of_birth);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NEW.image_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NEW.closure_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_by', OLD.updated_by, NEW.updated_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'updated_on', OLD.updated_on, NEW.updated_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_product', OLD.default_savings_product, NEW.default_savings_product);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_savings_account', OLD.default_savings_account, NEW.default_savings_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_type_cv_id', OLD.client_type_cv_id, NEW.client_type_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_classification_cv_id', OLD.client_classification_cv_id, NEW.client_classification_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reject_reason_cv_id', OLD.reject_reason_cv_id, NEW.reject_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_reason_cv_id', OLD.withdraw_reason_cv_id, NEW.withdraw_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawn_on_date', OLD.withdrawn_on_date, NEW.withdrawn_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdraw_on_userid', OLD.withdraw_on_userid, NEW.withdraw_on_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_date', OLD.reactivated_on_date, NEW.reactivated_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reactivated_on_userid', OLD.reactivated_on_userid, NEW.reactivated_on_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'legal_form_enum', OLD.legal_form_enum, NEW.legal_form_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_on_date', OLD.reopened_on_date, NEW.reopened_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reopened_by_userid', OLD.reopened_by_userid, NEW.reopened_by_userid);
  END%%


DROP TRIGGER IF EXISTS m_client_address_d%%
CREATE TRIGGER `m_client_address_d`
BEFORE DELETE
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_address WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_id', OLD.address_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_type_id', OLD.address_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_address_i%%
CREATE TRIGGER `m_client_address_i`
AFTER INSERT
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_address(id, client_id, address_id, address_type_id, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.address_id IS NULL, 'NULL, ', CONCAT('"', NEW.address_id, '", ')), IF(NEW.address_type_id IS NULL, 'NULL, ', CONCAT('"', NEW.address_type_id, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_id', NEW.address_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_type_id', NEW.address_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_address_u%%
CREATE TRIGGER `m_client_address_u`
AFTER UPDATE
  ON m_client_address
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_address SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', address_id = ', IF(NEW.address_id IS NULL, 'NULL', CONCAT('"', NEW.address_id, '"')), ', address_type_id = ', IF(NEW.address_type_id IS NULL, 'NULL', CONCAT('"', NEW.address_type_id, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_address', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_id', OLD.address_id, NEW.address_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_type_id', OLD.address_type_id, NEW.address_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_client_attendance_d%%
CREATE TRIGGER `m_client_attendance_d`
BEFORE DELETE
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_attendance WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_attendance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_id', OLD.meeting_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attendance_type_enum', OLD.attendance_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_attendance_i%%
CREATE TRIGGER `m_client_attendance_i`
AFTER INSERT
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_attendance(id, client_id, meeting_id, attendance_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.meeting_id IS NULL, 'NULL, ', CONCAT('"', NEW.meeting_id, '", ')), IF(NEW.attendance_type_enum IS NULL, 'NULL', CONCAT('"', NEW.attendance_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_attendance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_id', NEW.meeting_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attendance_type_enum', NEW.attendance_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_attendance_u%%
CREATE TRIGGER `m_client_attendance_u`
AFTER UPDATE
  ON m_client_attendance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_attendance SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', meeting_id = ', IF(NEW.meeting_id IS NULL, 'NULL', CONCAT('"', NEW.meeting_id, '"')), ', attendance_type_enum = ', IF(NEW.attendance_type_enum IS NULL, 'NULL', CONCAT('"', NEW.attendance_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_attendance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_id', OLD.meeting_id, NEW.meeting_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attendance_type_enum', OLD.attendance_type_enum, NEW.attendance_type_enum);
  END%%


DROP TRIGGER IF EXISTS m_client_charge_d%%
CREATE TRIGGER `m_client_charge_d`
BEFORE DELETE
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_charge_i%%
CREATE TRIGGER `m_client_charge_i`
AFTER INSERT
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_charge(id, client_id, charge_id, is_penalty, charge_time_enum, charge_due_date, charge_calculation_enum, amount, amount_paid_derived, amount_waived_derived, amount_writtenoff_derived, amount_outstanding_derived, is_paid_derived, waived, is_active, inactivated_on_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_id, '", ')), IF(NEW.is_penalty IS NULL, 'NULL, ', CONCAT('"', NEW.is_penalty, '", ')), IF(NEW.charge_time_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_time_enum, '", ')), IF(NEW.charge_due_date IS NULL, 'NULL, ', CONCAT('"', NEW.charge_due_date, '", ')), IF(NEW.charge_calculation_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_calculation_enum, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid_derived, '", ')), IF(NEW.amount_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_waived_derived, '", ')), IF(NEW.amount_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_writtenoff_derived, '", ')), IF(NEW.amount_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_outstanding_derived, '", ')), IF(NEW.is_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.is_paid_derived, '", ')), IF(NEW.waived IS NULL, 'NULL, ', CONCAT('"', NEW.waived, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.inactivated_on_date IS NULL, 'NULL', CONCAT('"', NEW.inactivated_on_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_due_date', NEW.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'inactivated_on_date', NEW.inactivated_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_charge_u%%
CREATE TRIGGER `m_client_charge_u`
AFTER UPDATE
  ON m_client_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ', is_penalty = ', IF(NEW.is_penalty IS NULL, 'NULL', CONCAT('"', NEW.is_penalty, '"')), ', charge_time_enum = ', IF(NEW.charge_time_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_time_enum, '"')), ', charge_due_date = ', IF(NEW.charge_due_date IS NULL, 'NULL', CONCAT('"', NEW.charge_due_date, '"')), ', charge_calculation_enum = ', IF(NEW.charge_calculation_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_calculation_enum, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_paid_derived = ', IF(NEW.amount_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_paid_derived, '"')), ', amount_waived_derived = ', IF(NEW.amount_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_waived_derived, '"')), ', amount_writtenoff_derived = ', IF(NEW.amount_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_writtenoff_derived, '"')), ', amount_outstanding_derived = ', IF(NEW.amount_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_outstanding_derived, '"')), ', is_paid_derived = ', IF(NEW.is_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.is_paid_derived, '"')), ', waived = ', IF(NEW.waived IS NULL, 'NULL', CONCAT('"', NEW.waived, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', inactivated_on_date = ', IF(NEW.inactivated_on_date IS NULL, 'NULL', CONCAT('"', NEW.inactivated_on_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NEW.charge_due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NEW.inactivated_on_date);
  END%%


DROP TRIGGER IF EXISTS m_client_charge_paid_by_d%%
CREATE TRIGGER `m_client_charge_paid_by_d`
BEFORE DELETE
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_charge_paid_by WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_charge_id', OLD.client_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_charge_paid_by_i%%
CREATE TRIGGER `m_client_charge_paid_by_i`
AFTER INSERT
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_charge_paid_by(id, client_transaction_id, client_charge_id, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_transaction_id, '", ')), IF(NEW.client_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_charge_id, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_transaction_id', NEW.client_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_charge_id', NEW.client_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_charge_paid_by_u%%
CREATE TRIGGER `m_client_charge_paid_by_u`
AFTER UPDATE
  ON m_client_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_charge_paid_by SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_transaction_id = ', IF(NEW.client_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.client_transaction_id, '"')), ', client_charge_id = ', IF(NEW.client_charge_id IS NULL, 'NULL', CONCAT('"', NEW.client_charge_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_transaction_id', OLD.client_transaction_id, NEW.client_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_charge_id', OLD.client_charge_id, NEW.client_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_client_identifier_d%%
CREATE TRIGGER `m_client_identifier_d`
BEFORE DELETE
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_identifier WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_identifier', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_type_id', OLD.document_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_key', OLD.document_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_identifier_i%%
CREATE TRIGGER `m_client_identifier_i`
AFTER INSERT
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_identifier(id, client_id, document_type_id, document_key, status, active, description, createdby_id, lastmodifiedby_id, created_date, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.document_type_id IS NULL, 'NULL, ', CONCAT('"', NEW.document_type_id, '", ')), IF(NEW.document_key IS NULL, 'NULL, ', CONCAT('"', NEW.document_key, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.active IS NULL, 'NULL, ', CONCAT('"', NEW.active, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_identifier', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'document_type_id', NEW.document_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'document_key', NEW.document_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'active', NEW.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_identifier_u%%
CREATE TRIGGER `m_client_identifier_u`
AFTER UPDATE
  ON m_client_identifier
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_identifier SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', document_type_id = ', IF(NEW.document_type_id IS NULL, 'NULL', CONCAT('"', NEW.document_type_id, '"')), ', document_key = ', IF(NEW.document_key IS NULL, 'NULL', CONCAT('"', NEW.document_key, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', active = ', IF(NEW.active IS NULL, 'NULL', CONCAT('"', NEW.active, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_identifier', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_type_id', OLD.document_type_id, NEW.document_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'document_key', OLD.document_key, NEW.document_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NEW.active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_client_non_person_d%%
CREATE TRIGGER `m_client_non_person_d`
BEFORE DELETE
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_non_person WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_non_person', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'constitution_cv_id', OLD.constitution_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_no', OLD.incorp_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_validity_till', OLD.incorp_validity_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'main_business_line_cv_id', OLD.main_business_line_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remarks', OLD.remarks, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_non_person_i%%
CREATE TRIGGER `m_client_non_person_i`
AFTER INSERT
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_non_person(id, client_id, constitution_cv_id, incorp_no, incorp_validity_till, main_business_line_cv_id, remarks) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.constitution_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.constitution_cv_id, '", ')), IF(NEW.incorp_no IS NULL, 'NULL, ', CONCAT('"', NEW.incorp_no, '", ')), IF(NEW.incorp_validity_till IS NULL, 'NULL, ', CONCAT('"', NEW.incorp_validity_till, '", ')), IF(NEW.main_business_line_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.main_business_line_cv_id, '", ')), IF(NEW.remarks IS NULL, 'NULL', CONCAT('"', NEW.remarks, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_non_person', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'constitution_cv_id', NEW.constitution_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incorp_no', NEW.incorp_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incorp_validity_till', NEW.incorp_validity_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'main_business_line_cv_id', NEW.main_business_line_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'remarks', NEW.remarks, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_non_person_u%%
CREATE TRIGGER `m_client_non_person_u`
AFTER UPDATE
  ON m_client_non_person
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_non_person SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', constitution_cv_id = ', IF(NEW.constitution_cv_id IS NULL, 'NULL', CONCAT('"', NEW.constitution_cv_id, '"')), ', incorp_no = ', IF(NEW.incorp_no IS NULL, 'NULL', CONCAT('"', NEW.incorp_no, '"')), ', incorp_validity_till = ', IF(NEW.incorp_validity_till IS NULL, 'NULL', CONCAT('"', NEW.incorp_validity_till, '"')), ', main_business_line_cv_id = ', IF(NEW.main_business_line_cv_id IS NULL, 'NULL', CONCAT('"', NEW.main_business_line_cv_id, '"')), ', remarks = ', IF(NEW.remarks IS NULL, 'NULL', CONCAT('"', NEW.remarks, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_non_person', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'constitution_cv_id', OLD.constitution_cv_id, NEW.constitution_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_no', OLD.incorp_no, NEW.incorp_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incorp_validity_till', OLD.incorp_validity_till, NEW.incorp_validity_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'main_business_line_cv_id', OLD.main_business_line_cv_id, NEW.main_business_line_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'remarks', OLD.remarks, NEW.remarks);
  END%%


DROP TRIGGER IF EXISTS m_client_transaction_d%%
CREATE TRIGGER `m_client_transaction_d`
BEFORE DELETE
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_client_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_client_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_transaction_i%%
CREATE TRIGGER `m_client_transaction_i`
AFTER INSERT
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_client_transaction(id, client_id, office_id, currency_code, payment_detail_id, is_reversed, external_id, transaction_date, transaction_type_enum, amount, created_date, appuser_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.payment_detail_id IS NULL, 'NULL, ', CONCAT('"', NEW.payment_detail_id, '", ')), IF(NEW.is_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.is_reversed, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.transaction_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_type_enum, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_client_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_client_transaction_u%%
CREATE TRIGGER `m_client_transaction_u`
AFTER UPDATE
  ON m_client_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_client_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', payment_detail_id = ', IF(NEW.payment_detail_id IS NULL, 'NULL', CONCAT('"', NEW.payment_detail_id, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', transaction_type_enum = ', IF(NEW.transaction_type_enum IS NULL, 'NULL', CONCAT('"', NEW.transaction_type_enum, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', appuser_id = ', IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_client_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
  END%%


DROP TRIGGER IF EXISTS m_code_d%%
CREATE TRIGGER `m_code_d`
BEFORE DELETE
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_code WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_code', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_defined', OLD.is_system_defined, NULL);
  END%%
DROP TRIGGER IF EXISTS m_code_i%%
CREATE TRIGGER `m_code_i`
AFTER INSERT
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_code(id, code_name, is_system_defined) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code_name IS NULL, 'NULL, ', CONCAT('"', NEW.code_name, '", ')), IF(NEW.is_system_defined IS NULL, 'NULL', CONCAT('"', NEW.is_system_defined, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_code', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_name', NEW.code_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_system_defined', NEW.is_system_defined, NULL);
  END%%
DROP TRIGGER IF EXISTS m_code_u%%
CREATE TRIGGER `m_code_u`
AFTER UPDATE
  ON m_code
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_code SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code_name = ', IF(NEW.code_name IS NULL, 'NULL', CONCAT('"', NEW.code_name, '"')), ', is_system_defined = ', IF(NEW.is_system_defined IS NULL, 'NULL', CONCAT('"', NEW.is_system_defined, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_code', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NEW.code_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_system_defined', OLD.is_system_defined, NEW.is_system_defined);
  END%%


DROP TRIGGER IF EXISTS m_code_value_d%%
CREATE TRIGGER `m_code_value_d`
BEFORE DELETE
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_code_value WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_code_value', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_value', OLD.code_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_description', OLD.code_description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_score', OLD.code_score, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
  END%%
DROP TRIGGER IF EXISTS m_code_value_i%%
CREATE TRIGGER `m_code_value_i`
AFTER INSERT
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_code_value(id, code_id, code_value, code_description, order_position, code_score, is_active, is_mandatory) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code_id IS NULL, 'NULL, ', CONCAT('"', NEW.code_id, '", ')), IF(NEW.code_value IS NULL, 'NULL, ', CONCAT('"', NEW.code_value, '", ')), IF(NEW.code_description IS NULL, 'NULL, ', CONCAT('"', NEW.code_description, '", ')), IF(NEW.order_position IS NULL, 'NULL, ', CONCAT('"', NEW.order_position, '", ')), IF(NEW.code_score IS NULL, 'NULL, ', CONCAT('"', NEW.code_score, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.is_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_mandatory, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_code_value', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_id', NEW.code_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_value', NEW.code_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_description', NEW.code_description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'order_position', NEW.order_position, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_score', NEW.code_score, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
  END%%
DROP TRIGGER IF EXISTS m_code_value_u%%
CREATE TRIGGER `m_code_value_u`
AFTER UPDATE
  ON m_code_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_code_value SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code_id = ', IF(NEW.code_id IS NULL, 'NULL', CONCAT('"', NEW.code_id, '"')), ', code_value = ', IF(NEW.code_value IS NULL, 'NULL', CONCAT('"', NEW.code_value, '"')), ', code_description = ', IF(NEW.code_description IS NULL, 'NULL', CONCAT('"', NEW.code_description, '"')), ', order_position = ', IF(NEW.order_position IS NULL, 'NULL', CONCAT('"', NEW.order_position, '"')), ', code_score = ', IF(NEW.code_score IS NULL, 'NULL', CONCAT('"', NEW.code_score, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', is_mandatory = ', IF(NEW.is_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_mandatory, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_code_value', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NEW.code_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_value', OLD.code_value, NEW.code_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_description', OLD.code_description, NEW.code_description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NEW.order_position);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_score', OLD.code_score, NEW.code_score);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
  END%%


DROP TRIGGER IF EXISTS m_creditbureau_d%%
CREATE TRIGGER `m_creditbureau_d`
BEFORE DELETE
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_creditbureau WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product', OLD.product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'implementationKey', OLD.implementationKey, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_i%%
CREATE TRIGGER `m_creditbureau_i`
AFTER INSERT
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_creditbureau(id, name, product, country, implementationKey) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.product IS NULL, 'NULL, ', CONCAT('"', NEW.product, '", ')), IF(NEW.country IS NULL, 'NULL, ', CONCAT('"', NEW.country, '", ')), IF(NEW.implementationKey IS NULL, 'NULL', CONCAT('"', NEW.implementationKey, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product', NEW.product, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country', NEW.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'implementationKey', NEW.implementationKey, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_u%%
CREATE TRIGGER `m_creditbureau_u`
AFTER UPDATE
  ON m_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_creditbureau SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', product = ', IF(NEW.product IS NULL, 'NULL', CONCAT('"', NEW.product, '"')), ', country = ', IF(NEW.country IS NULL, 'NULL', CONCAT('"', NEW.country, '"')), ', implementationKey = ', IF(NEW.implementationKey IS NULL, 'NULL', CONCAT('"', NEW.implementationKey, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product', OLD.product, NEW.product);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NEW.country);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'implementationKey', OLD.implementationKey, NEW.implementationKey);
  END%%


DROP TRIGGER IF EXISTS m_creditbureau_configuration_d%%
CREATE TRIGGER `m_creditbureau_configuration_d`
BEFORE DELETE
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_creditbureau_configuration WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_creditbureau_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'configkey', OLD.configkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_configuration_i%%
CREATE TRIGGER `m_creditbureau_configuration_i`
AFTER INSERT
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_creditbureau_configuration(id, configkey, value, organisation_creditbureau_id, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.configkey IS NULL, 'NULL, ', CONCAT('"', NEW.configkey, '", ')), IF(NEW.value IS NULL, 'NULL, ', CONCAT('"', NEW.value, '", ')), IF(NEW.organisation_creditbureau_id IS NULL, 'NULL, ', CONCAT('"', NEW.organisation_creditbureau_id, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_creditbureau_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'configkey', NEW.configkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_configuration_u%%
CREATE TRIGGER `m_creditbureau_configuration_u`
AFTER UPDATE
  ON m_creditbureau_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_creditbureau_configuration SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', configkey = ', IF(NEW.configkey IS NULL, 'NULL', CONCAT('"', NEW.configkey, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ', organisation_creditbureau_id = ', IF(NEW.organisation_creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.organisation_creditbureau_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_creditbureau_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'configkey', OLD.configkey, NEW.configkey);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_d%%
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_d`
BEFORE DELETE
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_creditbureau_loanproduct_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_creditbureau_loanproduct_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', OLD.is_creditcheck_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', OLD.skip_creditcheck_in_failure, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stale_period', OLD.stale_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_i%%
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_i`
AFTER INSERT
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_creditbureau_loanproduct_mapping(id, organisation_creditbureau_id, loan_product_id, is_creditcheck_mandatory, skip_creditcheck_in_failure, stale_period, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.organisation_creditbureau_id IS NULL, 'NULL, ', CONCAT('"', NEW.organisation_creditbureau_id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.is_creditcheck_mandatory IS NULL, 'NULL, ', CONCAT('"', NEW.is_creditcheck_mandatory, '", ')), IF(NEW.skip_creditcheck_in_failure IS NULL, 'NULL, ', CONCAT('"', NEW.skip_creditcheck_in_failure, '", ')), IF(NEW.stale_period IS NULL, 'NULL, ', CONCAT('"', NEW.stale_period, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_creditbureau_loanproduct_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', NEW.is_creditcheck_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', NEW.skip_creditcheck_in_failure, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stale_period', NEW.stale_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_creditbureau_loanproduct_mapping_u%%
CREATE TRIGGER `m_creditbureau_loanproduct_mapping_u`
AFTER UPDATE
  ON m_creditbureau_loanproduct_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_creditbureau_loanproduct_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', organisation_creditbureau_id = ', IF(NEW.organisation_creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.organisation_creditbureau_id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', is_creditcheck_mandatory = ', IF(NEW.is_creditcheck_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_creditcheck_mandatory, '"')), ', skip_creditcheck_in_failure = ', IF(NEW.skip_creditcheck_in_failure IS NULL, 'NULL', CONCAT('"', NEW.skip_creditcheck_in_failure, '"')), ', stale_period = ', IF(NEW.stale_period IS NULL, 'NULL', CONCAT('"', NEW.stale_period, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_creditbureau_loanproduct_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_creditcheck_mandatory', OLD.is_creditcheck_mandatory, NEW.is_creditcheck_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'skip_creditcheck_in_failure', OLD.skip_creditcheck_in_failure, NEW.skip_creditcheck_in_failure);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stale_period', OLD.stale_period, NEW.stale_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_currency_d%%
CREATE TRIGGER `m_currency_d`
BEFORE DELETE
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_currency WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_currency_i%%
CREATE TRIGGER `m_currency_i`
AFTER INSERT
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_currency(id, code, decimal_places, currency_multiplesof, display_symbol, name, internationalized_name_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code IS NULL, 'NULL, ', CONCAT('"', NEW.code, '", ')), IF(NEW.decimal_places IS NULL, 'NULL, ', CONCAT('"', NEW.decimal_places, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.display_symbol IS NULL, 'NULL, ', CONCAT('"', NEW.display_symbol, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.internationalized_name_code IS NULL, 'NULL', CONCAT('"', NEW.internationalized_name_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_places', NEW.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_symbol', NEW.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'internationalized_name_code', NEW.internationalized_name_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_currency_u%%
CREATE TRIGGER `m_currency_u`
AFTER UPDATE
  ON m_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_currency SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code = ', IF(NEW.code IS NULL, 'NULL', CONCAT('"', NEW.code, '"')), ', decimal_places = ', IF(NEW.decimal_places IS NULL, 'NULL', CONCAT('"', NEW.decimal_places, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', display_symbol = ', IF(NEW.display_symbol IS NULL, 'NULL', CONCAT('"', NEW.display_symbol, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', internationalized_name_code = ', IF(NEW.internationalized_name_code IS NULL, 'NULL', CONCAT('"', NEW.internationalized_name_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NEW.decimal_places);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NEW.display_symbol);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NEW.internationalized_name_code);
  END%%


DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_d%%
CREATE TRIGGER `m_deposit_account_on_hold_transaction_d`
BEFORE DELETE
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_account_on_hold_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_account_on_hold_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_i%%
CREATE TRIGGER `m_deposit_account_on_hold_transaction_i`
AFTER INSERT
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_account_on_hold_transaction(id, savings_account_id, amount, transaction_type_enum, transaction_date, is_reversed, created_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.transaction_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_type_enum, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.is_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.is_reversed, '", ')), IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_account_on_hold_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_on_hold_transaction_u%%
CREATE TRIGGER `m_deposit_account_on_hold_transaction_u`
AFTER UPDATE
  ON m_deposit_account_on_hold_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_account_on_hold_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', transaction_type_enum = ', IF(NEW.transaction_type_enum IS NULL, 'NULL', CONCAT('"', NEW.transaction_type_enum, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_on_hold_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
  END%%


DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_d%%
CREATE TRIGGER `m_deposit_account_recurring_detail_d`
BEFORE DELETE
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_account_recurring_detail WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_account_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', OLD.mandatory_recommended_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_calendar_inherited', OLD.is_calendar_inherited, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_amount', OLD.total_overdue_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'no_of_overdue_installments', OLD.no_of_overdue_installments, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_i%%
CREATE TRIGGER `m_deposit_account_recurring_detail_i`
AFTER INSERT
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_account_recurring_detail(id, savings_account_id, mandatory_recommended_deposit_amount, is_mandatory, allow_withdrawal, adjust_advance_towards_future_payments, is_calendar_inherited, total_overdue_amount, no_of_overdue_installments) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.mandatory_recommended_deposit_amount IS NULL, 'NULL, ', CONCAT('"', NEW.mandatory_recommended_deposit_amount, '", ')), IF(NEW.is_mandatory IS NULL, 'NULL, ', CONCAT('"', NEW.is_mandatory, '", ')), IF(NEW.allow_withdrawal IS NULL, 'NULL, ', CONCAT('"', NEW.allow_withdrawal, '", ')), IF(NEW.adjust_advance_towards_future_payments IS NULL, 'NULL, ', CONCAT('"', NEW.adjust_advance_towards_future_payments, '", ')), IF(NEW.is_calendar_inherited IS NULL, 'NULL, ', CONCAT('"', NEW.is_calendar_inherited, '", ')), IF(NEW.total_overdue_amount IS NULL, 'NULL, ', CONCAT('"', NEW.total_overdue_amount, '", ')), IF(NEW.no_of_overdue_installments IS NULL, 'NULL', CONCAT('"', NEW.no_of_overdue_installments, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_account_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', NEW.mandatory_recommended_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_withdrawal', NEW.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', NEW.adjust_advance_towards_future_payments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_calendar_inherited', NEW.is_calendar_inherited, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdue_amount', NEW.total_overdue_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'no_of_overdue_installments', NEW.no_of_overdue_installments, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_recurring_detail_u%%
CREATE TRIGGER `m_deposit_account_recurring_detail_u`
AFTER UPDATE
  ON m_deposit_account_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_account_recurring_detail SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', mandatory_recommended_deposit_amount = ', IF(NEW.mandatory_recommended_deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.mandatory_recommended_deposit_amount, '"')), ', is_mandatory = ', IF(NEW.is_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_mandatory, '"')), ', allow_withdrawal = ', IF(NEW.allow_withdrawal IS NULL, 'NULL', CONCAT('"', NEW.allow_withdrawal, '"')), ', adjust_advance_towards_future_payments = ', IF(NEW.adjust_advance_towards_future_payments IS NULL, 'NULL', CONCAT('"', NEW.adjust_advance_towards_future_payments, '"')), ', is_calendar_inherited = ', IF(NEW.is_calendar_inherited IS NULL, 'NULL', CONCAT('"', NEW.is_calendar_inherited, '"')), ', total_overdue_amount = ', IF(NEW.total_overdue_amount IS NULL, 'NULL', CONCAT('"', NEW.total_overdue_amount, '"')), ', no_of_overdue_installments = ', IF(NEW.no_of_overdue_installments IS NULL, 'NULL', CONCAT('"', NEW.no_of_overdue_installments, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_recommended_deposit_amount', OLD.mandatory_recommended_deposit_amount, NEW.mandatory_recommended_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NEW.allow_withdrawal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NEW.adjust_advance_towards_future_payments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_calendar_inherited', OLD.is_calendar_inherited, NEW.is_calendar_inherited);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_amount', OLD.total_overdue_amount, NEW.total_overdue_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'no_of_overdue_installments', OLD.no_of_overdue_installments, NEW.no_of_overdue_installments);
  END%%


DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_d%%
CREATE TRIGGER `m_deposit_account_term_and_preclosure_d`
BEFORE DELETE
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_account_term_and_preclosure WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_account_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period', OLD.deposit_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', OLD.deposit_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_amount', OLD.maturity_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_date', OLD.maturity_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_account_closure_enum', OLD.on_account_closure_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', OLD.expected_firstdepositon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', OLD.transfer_interest_to_linked_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_i%%
CREATE TRIGGER `m_deposit_account_term_and_preclosure_i`
AFTER INSERT
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_account_term_and_preclosure(id, savings_account_id, min_deposit_term, max_deposit_term, min_deposit_term_type_enum, max_deposit_term_type_enum, in_multiples_of_deposit_term, in_multiples_of_deposit_term_type_enum, pre_closure_penal_applicable, pre_closure_penal_interest, pre_closure_penal_interest_on_enum, deposit_period, deposit_period_frequency_enum, deposit_amount, maturity_amount, maturity_date, on_account_closure_enum, expected_firstdepositon_date, transfer_interest_to_linked_account) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.min_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.min_deposit_term, '", ')), IF(NEW.max_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.max_deposit_term, '", ')), IF(NEW.min_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.min_deposit_term_type_enum, '", ')), IF(NEW.max_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.max_deposit_term_type_enum, '", ')), IF(NEW.in_multiples_of_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.in_multiples_of_deposit_term, '", ')), IF(NEW.in_multiples_of_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.in_multiples_of_deposit_term_type_enum, '", ')), IF(NEW.pre_closure_penal_applicable IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_applicable, '", ')), IF(NEW.pre_closure_penal_interest IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_interest, '", ')), IF(NEW.pre_closure_penal_interest_on_enum IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_interest_on_enum, '", ')), IF(NEW.deposit_period IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_period, '", ')), IF(NEW.deposit_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_period_frequency_enum, '", ')), IF(NEW.deposit_amount IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_amount, '", ')), IF(NEW.maturity_amount IS NULL, 'NULL, ', CONCAT('"', NEW.maturity_amount, '", ')), IF(NEW.maturity_date IS NULL, 'NULL, ', CONCAT('"', NEW.maturity_date, '", ')), IF(NEW.on_account_closure_enum IS NULL, 'NULL, ', CONCAT('"', NEW.on_account_closure_enum, '", ')), IF(NEW.expected_firstdepositon_date IS NULL, 'NULL, ', CONCAT('"', NEW.expected_firstdepositon_date, '", ')), IF(NEW.transfer_interest_to_linked_account IS NULL, 'NULL', CONCAT('"', NEW.transfer_interest_to_linked_account, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_account_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term', NEW.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term', NEW.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', NEW.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', NEW.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', NEW.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', NEW.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', NEW.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', NEW.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', NEW.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_period', NEW.deposit_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', NEW.deposit_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturity_amount', NEW.maturity_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturity_date', NEW.maturity_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'on_account_closure_enum', NEW.on_account_closure_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', NEW.expected_firstdepositon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', NEW.transfer_interest_to_linked_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_account_term_and_preclosure_u%%
CREATE TRIGGER `m_deposit_account_term_and_preclosure_u`
AFTER UPDATE
  ON m_deposit_account_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_account_term_and_preclosure SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', min_deposit_term = ', IF(NEW.min_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.min_deposit_term, '"')), ', max_deposit_term = ', IF(NEW.max_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.max_deposit_term, '"')), ', min_deposit_term_type_enum = ', IF(NEW.min_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.min_deposit_term_type_enum, '"')), ', max_deposit_term_type_enum = ', IF(NEW.max_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.max_deposit_term_type_enum, '"')), ', in_multiples_of_deposit_term = ', IF(NEW.in_multiples_of_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.in_multiples_of_deposit_term, '"')), ', in_multiples_of_deposit_term_type_enum = ', IF(NEW.in_multiples_of_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.in_multiples_of_deposit_term_type_enum, '"')), ', pre_closure_penal_applicable = ', IF(NEW.pre_closure_penal_applicable IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_applicable, '"')), ', pre_closure_penal_interest = ', IF(NEW.pre_closure_penal_interest IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_interest, '"')), ', pre_closure_penal_interest_on_enum = ', IF(NEW.pre_closure_penal_interest_on_enum IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_interest_on_enum, '"')), ', deposit_period = ', IF(NEW.deposit_period IS NULL, 'NULL', CONCAT('"', NEW.deposit_period, '"')), ', deposit_period_frequency_enum = ', IF(NEW.deposit_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.deposit_period_frequency_enum, '"')), ', deposit_amount = ', IF(NEW.deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.deposit_amount, '"')), ', maturity_amount = ', IF(NEW.maturity_amount IS NULL, 'NULL', CONCAT('"', NEW.maturity_amount, '"')), ', maturity_date = ', IF(NEW.maturity_date IS NULL, 'NULL', CONCAT('"', NEW.maturity_date, '"')), ', on_account_closure_enum = ', IF(NEW.on_account_closure_enum IS NULL, 'NULL', CONCAT('"', NEW.on_account_closure_enum, '"')), ', expected_firstdepositon_date = ', IF(NEW.expected_firstdepositon_date IS NULL, 'NULL', CONCAT('"', NEW.expected_firstdepositon_date, '"')), ', transfer_interest_to_linked_account = ', IF(NEW.transfer_interest_to_linked_account IS NULL, 'NULL', CONCAT('"', NEW.transfer_interest_to_linked_account, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_account_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NEW.min_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NEW.max_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NEW.min_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NEW.max_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NEW.in_multiples_of_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NEW.in_multiples_of_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NEW.pre_closure_penal_applicable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NEW.pre_closure_penal_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NEW.pre_closure_penal_interest_on_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period', OLD.deposit_period, NEW.deposit_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_period_frequency_enum', OLD.deposit_period_frequency_enum, NEW.deposit_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_amount', OLD.maturity_amount, NEW.maturity_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturity_date', OLD.maturity_date, NEW.maturity_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_account_closure_enum', OLD.on_account_closure_enum, NEW.on_account_closure_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstdepositon_date', OLD.expected_firstdepositon_date, NEW.expected_firstdepositon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_interest_to_linked_account', OLD.transfer_interest_to_linked_account, NEW.transfer_interest_to_linked_account);
  END%%


DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_d%%
CREATE TRIGGER `m_deposit_product_interest_rate_chart_d`
BEFORE DELETE
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_product_interest_rate_chart WHERE deposit_product_id = "', OLD.deposit_product_id, '"', ' AND interest_rate_chart_id = "', OLD.interest_rate_chart_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_product_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_product_id', OLD.deposit_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_i%%
CREATE TRIGGER `m_deposit_product_interest_rate_chart_i`
AFTER INSERT
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_product_interest_rate_chart(deposit_product_id, interest_rate_chart_id) VALUES(', IF(NEW.deposit_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_product_id, '", ')), IF(NEW.interest_rate_chart_id IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_chart_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_product_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_product_id', NEW.deposit_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_chart_id', NEW.interest_rate_chart_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_interest_rate_chart_u%%
CREATE TRIGGER `m_deposit_product_interest_rate_chart_u`
AFTER UPDATE
  ON m_deposit_product_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_product_interest_rate_chart SET deposit_product_id = ', IF(NEW.deposit_product_id IS NULL, 'NULL', CONCAT('"', NEW.deposit_product_id, '"')), ', interest_rate_chart_id = ', IF(NEW.interest_rate_chart_id IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_chart_id, '"')), ' WHERE deposit_product_id = "', NEW.deposit_product_id, '"', ' AND interest_rate_chart_id = "', OLD.interest_rate_chart_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_product_id', OLD.deposit_product_id, NEW.deposit_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NEW.interest_rate_chart_id);
  END%%


DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_d%%
CREATE TRIGGER `m_deposit_product_recurring_detail_d`
BEFORE DELETE
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_product_recurring_detail WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_product_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_i%%
CREATE TRIGGER `m_deposit_product_recurring_detail_i`
AFTER INSERT
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_product_recurring_detail(id, savings_product_id, is_mandatory, allow_withdrawal, adjust_advance_towards_future_payments) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_product_id, '", ')), IF(NEW.is_mandatory IS NULL, 'NULL, ', CONCAT('"', NEW.is_mandatory, '", ')), IF(NEW.allow_withdrawal IS NULL, 'NULL, ', CONCAT('"', NEW.allow_withdrawal, '", ')), IF(NEW.adjust_advance_towards_future_payments IS NULL, 'NULL', CONCAT('"', NEW.adjust_advance_towards_future_payments, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_product_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_withdrawal', NEW.allow_withdrawal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', NEW.adjust_advance_towards_future_payments, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_recurring_detail_u%%
CREATE TRIGGER `m_deposit_product_recurring_detail_u`
AFTER UPDATE
  ON m_deposit_product_recurring_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_product_recurring_detail SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_product_id = ', IF(NEW.savings_product_id IS NULL, 'NULL', CONCAT('"', NEW.savings_product_id, '"')), ', is_mandatory = ', IF(NEW.is_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_mandatory, '"')), ', allow_withdrawal = ', IF(NEW.allow_withdrawal IS NULL, 'NULL', CONCAT('"', NEW.allow_withdrawal, '"')), ', adjust_advance_towards_future_payments = ', IF(NEW.adjust_advance_towards_future_payments IS NULL, 'NULL', CONCAT('"', NEW.adjust_advance_towards_future_payments, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_recurring_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_withdrawal', OLD.allow_withdrawal, NEW.allow_withdrawal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'adjust_advance_towards_future_payments', OLD.adjust_advance_towards_future_payments, NEW.adjust_advance_towards_future_payments);
  END%%


DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_d%%
CREATE TRIGGER `m_deposit_product_term_and_preclosure_d`
BEFORE DELETE
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_deposit_product_term_and_preclosure WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_deposit_product_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_amount', OLD.min_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_amount', OLD.max_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_i%%
CREATE TRIGGER `m_deposit_product_term_and_preclosure_i`
AFTER INSERT
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_deposit_product_term_and_preclosure(id, savings_product_id, min_deposit_term, max_deposit_term, min_deposit_term_type_enum, max_deposit_term_type_enum, in_multiples_of_deposit_term, in_multiples_of_deposit_term_type_enum, pre_closure_penal_applicable, pre_closure_penal_interest, pre_closure_penal_interest_on_enum, min_deposit_amount, max_deposit_amount, deposit_amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_product_id, '", ')), IF(NEW.min_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.min_deposit_term, '", ')), IF(NEW.max_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.max_deposit_term, '", ')), IF(NEW.min_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.min_deposit_term_type_enum, '", ')), IF(NEW.max_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.max_deposit_term_type_enum, '", ')), IF(NEW.in_multiples_of_deposit_term IS NULL, 'NULL, ', CONCAT('"', NEW.in_multiples_of_deposit_term, '", ')), IF(NEW.in_multiples_of_deposit_term_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.in_multiples_of_deposit_term_type_enum, '", ')), IF(NEW.pre_closure_penal_applicable IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_applicable, '", ')), IF(NEW.pre_closure_penal_interest IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_interest, '", ')), IF(NEW.pre_closure_penal_interest_on_enum IS NULL, 'NULL, ', CONCAT('"', NEW.pre_closure_penal_interest_on_enum, '", ')), IF(NEW.min_deposit_amount IS NULL, 'NULL, ', CONCAT('"', NEW.min_deposit_amount, '", ')), IF(NEW.max_deposit_amount IS NULL, 'NULL, ', CONCAT('"', NEW.max_deposit_amount, '", ')), IF(NEW.deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.deposit_amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_deposit_product_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term', NEW.min_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term', NEW.max_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', NEW.min_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', NEW.max_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', NEW.in_multiples_of_deposit_term, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', NEW.in_multiples_of_deposit_term_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', NEW.pre_closure_penal_applicable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', NEW.pre_closure_penal_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', NEW.pre_closure_penal_interest_on_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_deposit_amount', NEW.min_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_deposit_amount', NEW.max_deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_deposit_product_term_and_preclosure_u%%
CREATE TRIGGER `m_deposit_product_term_and_preclosure_u`
AFTER UPDATE
  ON m_deposit_product_term_and_preclosure
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_deposit_product_term_and_preclosure SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_product_id = ', IF(NEW.savings_product_id IS NULL, 'NULL', CONCAT('"', NEW.savings_product_id, '"')), ', min_deposit_term = ', IF(NEW.min_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.min_deposit_term, '"')), ', max_deposit_term = ', IF(NEW.max_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.max_deposit_term, '"')), ', min_deposit_term_type_enum = ', IF(NEW.min_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.min_deposit_term_type_enum, '"')), ', max_deposit_term_type_enum = ', IF(NEW.max_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.max_deposit_term_type_enum, '"')), ', in_multiples_of_deposit_term = ', IF(NEW.in_multiples_of_deposit_term IS NULL, 'NULL', CONCAT('"', NEW.in_multiples_of_deposit_term, '"')), ', in_multiples_of_deposit_term_type_enum = ', IF(NEW.in_multiples_of_deposit_term_type_enum IS NULL, 'NULL', CONCAT('"', NEW.in_multiples_of_deposit_term_type_enum, '"')), ', pre_closure_penal_applicable = ', IF(NEW.pre_closure_penal_applicable IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_applicable, '"')), ', pre_closure_penal_interest = ', IF(NEW.pre_closure_penal_interest IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_interest, '"')), ', pre_closure_penal_interest_on_enum = ', IF(NEW.pre_closure_penal_interest_on_enum IS NULL, 'NULL', CONCAT('"', NEW.pre_closure_penal_interest_on_enum, '"')), ', min_deposit_amount = ', IF(NEW.min_deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.min_deposit_amount, '"')), ', max_deposit_amount = ', IF(NEW.max_deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.max_deposit_amount, '"')), ', deposit_amount = ', IF(NEW.deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.deposit_amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_deposit_product_term_and_preclosure', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term', OLD.min_deposit_term, NEW.min_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term', OLD.max_deposit_term, NEW.max_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_term_type_enum', OLD.min_deposit_term_type_enum, NEW.min_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_term_type_enum', OLD.max_deposit_term_type_enum, NEW.max_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term', OLD.in_multiples_of_deposit_term, NEW.in_multiples_of_deposit_term);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'in_multiples_of_deposit_term_type_enum', OLD.in_multiples_of_deposit_term_type_enum, NEW.in_multiples_of_deposit_term_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_applicable', OLD.pre_closure_penal_applicable, NEW.pre_closure_penal_applicable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest', OLD.pre_closure_penal_interest, NEW.pre_closure_penal_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_closure_penal_interest_on_enum', OLD.pre_closure_penal_interest_on_enum, NEW.pre_closure_penal_interest_on_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_deposit_amount', OLD.min_deposit_amount, NEW.min_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_deposit_amount', OLD.max_deposit_amount, NEW.max_deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
  END%%


DROP TRIGGER IF EXISTS m_document_d%%
CREATE TRIGGER `m_document_d`
BEFORE DELETE
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_document WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_document', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_type', OLD.parent_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_id', OLD.parent_entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'file_name', OLD.file_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'size', OLD.size, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_document_i%%
CREATE TRIGGER `m_document_i`
AFTER INSERT
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_document(id, parent_entity_type, parent_entity_id, name, file_name, size, type, description, location, storage_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.parent_entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.parent_entity_type, '", ')), IF(NEW.parent_entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.parent_entity_id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.file_name IS NULL, 'NULL, ', CONCAT('"', NEW.file_name, '", ')), IF(NEW.size IS NULL, 'NULL, ', CONCAT('"', NEW.size, '", ')), IF(NEW.type IS NULL, 'NULL, ', CONCAT('"', NEW.type, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.location IS NULL, 'NULL, ', CONCAT('"', NEW.location, '", ')), IF(NEW.storage_type_enum IS NULL, 'NULL', CONCAT('"', NEW.storage_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_document', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_entity_type', NEW.parent_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_entity_id', NEW.parent_entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'file_name', NEW.file_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'size', NEW.size, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'storage_type_enum', NEW.storage_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_document_u%%
CREATE TRIGGER `m_document_u`
AFTER UPDATE
  ON m_document
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_document SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', parent_entity_type = ', IF(NEW.parent_entity_type IS NULL, 'NULL', CONCAT('"', NEW.parent_entity_type, '"')), ', parent_entity_id = ', IF(NEW.parent_entity_id IS NULL, 'NULL', CONCAT('"', NEW.parent_entity_id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', file_name = ', IF(NEW.file_name IS NULL, 'NULL', CONCAT('"', NEW.file_name, '"')), ', size = ', IF(NEW.size IS NULL, 'NULL', CONCAT('"', NEW.size, '"')), ', type = ', IF(NEW.type IS NULL, 'NULL', CONCAT('"', NEW.type, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', location = ', IF(NEW.location IS NULL, 'NULL', CONCAT('"', NEW.location, '"')), ', storage_type_enum = ', IF(NEW.storage_type_enum IS NULL, 'NULL', CONCAT('"', NEW.storage_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_document', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_type', OLD.parent_entity_type, NEW.parent_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_entity_id', OLD.parent_entity_id, NEW.parent_entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'file_name', OLD.file_name, NEW.file_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'size', OLD.size, NEW.size);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NEW.storage_type_enum);
  END%%


DROP TRIGGER IF EXISTS m_entity_datatable_check_d%%
CREATE TRIGGER `m_entity_datatable_check_d`
BEFORE DELETE
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_entity_datatable_check WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_entity_datatable_check', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'x_registered_table_name', OLD.x_registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_datatable_check_i%%
CREATE TRIGGER `m_entity_datatable_check_i`
AFTER INSERT
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_entity_datatable_check(id, application_table_name, x_registered_table_name, status_enum, system_defined, product_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.application_table_name IS NULL, 'NULL, ', CONCAT('"', NEW.application_table_name, '", ')), IF(NEW.x_registered_table_name IS NULL, 'NULL, ', CONCAT('"', NEW.x_registered_table_name, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.system_defined IS NULL, 'NULL, ', CONCAT('"', NEW.system_defined, '", ')), IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_entity_datatable_check', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'application_table_name', NEW.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'x_registered_table_name', NEW.x_registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'system_defined', NEW.system_defined, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_datatable_check_u%%
CREATE TRIGGER `m_entity_datatable_check_u`
AFTER UPDATE
  ON m_entity_datatable_check
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_entity_datatable_check SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', application_table_name = ', IF(NEW.application_table_name IS NULL, 'NULL', CONCAT('"', NEW.application_table_name, '"')), ', x_registered_table_name = ', IF(NEW.x_registered_table_name IS NULL, 'NULL', CONCAT('"', NEW.x_registered_table_name, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', system_defined = ', IF(NEW.system_defined IS NULL, 'NULL', CONCAT('"', NEW.system_defined, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_entity_datatable_check', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NEW.application_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'x_registered_table_name', OLD.x_registered_table_name, NEW.x_registered_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'system_defined', OLD.system_defined, NEW.system_defined);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
  END%%


DROP TRIGGER IF EXISTS m_entity_relation_d%%
CREATE TRIGGER `m_entity_relation_d`
BEFORE DELETE
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_entity_relation WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_entity_relation', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_entity_type', OLD.from_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_entity_type', OLD.to_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_relation_i%%
CREATE TRIGGER `m_entity_relation_i`
AFTER INSERT
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_entity_relation(id, from_entity_type, to_entity_type, code_name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.from_entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.from_entity_type, '", ')), IF(NEW.to_entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.to_entity_type, '", ')), IF(NEW.code_name IS NULL, 'NULL', CONCAT('"', NEW.code_name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_entity_relation', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_entity_type', NEW.from_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_entity_type', NEW.to_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_name', NEW.code_name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_relation_u%%
CREATE TRIGGER `m_entity_relation_u`
AFTER UPDATE
  ON m_entity_relation
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_entity_relation SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', from_entity_type = ', IF(NEW.from_entity_type IS NULL, 'NULL', CONCAT('"', NEW.from_entity_type, '"')), ', to_entity_type = ', IF(NEW.to_entity_type IS NULL, 'NULL', CONCAT('"', NEW.to_entity_type, '"')), ', code_name = ', IF(NEW.code_name IS NULL, 'NULL', CONCAT('"', NEW.code_name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_entity_relation', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_entity_type', OLD.from_entity_type, NEW.from_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_entity_type', OLD.to_entity_type, NEW.to_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_name', OLD.code_name, NEW.code_name);
  END%%


DROP TRIGGER IF EXISTS m_entity_to_entity_access_d%%
CREATE TRIGGER `m_entity_to_entity_access_d`
BEFORE DELETE
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_entity_to_entity_access WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_entity_to_entity_access', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_type_code_value_id', OLD.access_type_code_value_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_type', OLD.second_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_id', OLD.second_entity_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_to_entity_access_i%%
CREATE TRIGGER `m_entity_to_entity_access_i`
AFTER INSERT
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_entity_to_entity_access(id, entity_type, entity_id, access_type_code_value_id, second_entity_type, second_entity_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.entity_type, '", ')), IF(NEW.entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.entity_id, '", ')), IF(NEW.access_type_code_value_id IS NULL, 'NULL, ', CONCAT('"', NEW.access_type_code_value_id, '", ')), IF(NEW.second_entity_type IS NULL, 'NULL, ', CONCAT('"', NEW.second_entity_type, '", ')), IF(NEW.second_entity_id IS NULL, 'NULL', CONCAT('"', NEW.second_entity_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_entity_to_entity_access', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_type', NEW.entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'access_type_code_value_id', NEW.access_type_code_value_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_entity_type', NEW.second_entity_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'second_entity_id', NEW.second_entity_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_to_entity_access_u%%
CREATE TRIGGER `m_entity_to_entity_access_u`
AFTER UPDATE
  ON m_entity_to_entity_access
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_entity_to_entity_access SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', entity_type = ', IF(NEW.entity_type IS NULL, 'NULL', CONCAT('"', NEW.entity_type, '"')), ', entity_id = ', IF(NEW.entity_id IS NULL, 'NULL', CONCAT('"', NEW.entity_id, '"')), ', access_type_code_value_id = ', IF(NEW.access_type_code_value_id IS NULL, 'NULL', CONCAT('"', NEW.access_type_code_value_id, '"')), ', second_entity_type = ', IF(NEW.second_entity_type IS NULL, 'NULL', CONCAT('"', NEW.second_entity_type, '"')), ', second_entity_id = ', IF(NEW.second_entity_id IS NULL, 'NULL', CONCAT('"', NEW.second_entity_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_entity_to_entity_access', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_type', OLD.entity_type, NEW.entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_type_code_value_id', OLD.access_type_code_value_id, NEW.access_type_code_value_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_type', OLD.second_entity_type, NEW.second_entity_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'second_entity_id', OLD.second_entity_id, NEW.second_entity_id);
  END%%


DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_d%%
CREATE TRIGGER `m_entity_to_entity_mapping_d`
BEFORE DELETE
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_entity_to_entity_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_entity_to_entity_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rel_id', OLD.rel_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_id', OLD.from_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_id', OLD.to_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_i%%
CREATE TRIGGER `m_entity_to_entity_mapping_i`
AFTER INSERT
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_entity_to_entity_mapping(id, rel_id, from_id, to_id, start_date, end_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.rel_id IS NULL, 'NULL, ', CONCAT('"', NEW.rel_id, '", ')), IF(NEW.from_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_id, '", ')), IF(NEW.to_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_entity_to_entity_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rel_id', NEW.rel_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_id', NEW.from_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_id', NEW.to_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_entity_to_entity_mapping_u%%
CREATE TRIGGER `m_entity_to_entity_mapping_u`
AFTER UPDATE
  ON m_entity_to_entity_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_entity_to_entity_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', rel_id = ', IF(NEW.rel_id IS NULL, 'NULL', CONCAT('"', NEW.rel_id, '"')), ', from_id = ', IF(NEW.from_id IS NULL, 'NULL', CONCAT('"', NEW.from_id, '"')), ', to_id = ', IF(NEW.to_id IS NULL, 'NULL', CONCAT('"', NEW.to_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_entity_to_entity_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rel_id', OLD.rel_id, NEW.rel_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_id', OLD.from_id, NEW.from_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_id', OLD.to_id, NEW.to_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
  END%%


DROP TRIGGER IF EXISTS m_field_configuration_d%%
CREATE TRIGGER `m_field_configuration_d`
BEFORE DELETE
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_field_configuration WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_field_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subentity', OLD.subentity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field', OLD.field, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_enabled', OLD.is_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'validation_regex', OLD.validation_regex, NULL);
  END%%
DROP TRIGGER IF EXISTS m_field_configuration_i%%
CREATE TRIGGER `m_field_configuration_i`
AFTER INSERT
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_field_configuration(id, entity, subentity, field, is_enabled, is_mandatory, validation_regex) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.entity IS NULL, 'NULL, ', CONCAT('"', NEW.entity, '", ')), IF(NEW.subentity IS NULL, 'NULL, ', CONCAT('"', NEW.subentity, '", ')), IF(NEW.field IS NULL, 'NULL, ', CONCAT('"', NEW.field, '", ')), IF(NEW.is_enabled IS NULL, 'NULL, ', CONCAT('"', NEW.is_enabled, '", ')), IF(NEW.is_mandatory IS NULL, 'NULL, ', CONCAT('"', NEW.is_mandatory, '", ')), IF(NEW.validation_regex IS NULL, 'NULL', CONCAT('"', NEW.validation_regex, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_field_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity', NEW.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'subentity', NEW.subentity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field', NEW.field, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_enabled', NEW.is_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_mandatory', NEW.is_mandatory, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'validation_regex', NEW.validation_regex, NULL);
  END%%
DROP TRIGGER IF EXISTS m_field_configuration_u%%
CREATE TRIGGER `m_field_configuration_u`
AFTER UPDATE
  ON m_field_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_field_configuration SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', entity = ', IF(NEW.entity IS NULL, 'NULL', CONCAT('"', NEW.entity, '"')), ', subentity = ', IF(NEW.subentity IS NULL, 'NULL', CONCAT('"', NEW.subentity, '"')), ', field = ', IF(NEW.field IS NULL, 'NULL', CONCAT('"', NEW.field, '"')), ', is_enabled = ', IF(NEW.is_enabled IS NULL, 'NULL', CONCAT('"', NEW.is_enabled, '"')), ', is_mandatory = ', IF(NEW.is_mandatory IS NULL, 'NULL', CONCAT('"', NEW.is_mandatory, '"')), ', validation_regex = ', IF(NEW.validation_regex IS NULL, 'NULL', CONCAT('"', NEW.validation_regex, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_field_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NEW.entity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subentity', OLD.subentity, NEW.subentity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field', OLD.field, NEW.field);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_enabled', OLD.is_enabled, NEW.is_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_mandatory', OLD.is_mandatory, NEW.is_mandatory);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'validation_regex', OLD.validation_regex, NEW.validation_regex);
  END%%


DROP TRIGGER IF EXISTS m_floating_rates_d%%
CREATE TRIGGER `m_floating_rates_d`
BEFORE DELETE
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_floating_rates WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_base_lending_rate', OLD.is_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_floating_rates_i%%
CREATE TRIGGER `m_floating_rates_i`
AFTER INSERT
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_floating_rates(id, name, is_base_lending_rate, is_active, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.is_base_lending_rate IS NULL, 'NULL, ', CONCAT('"', NEW.is_base_lending_rate, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_base_lending_rate', NEW.is_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_floating_rates_u%%
CREATE TRIGGER `m_floating_rates_u`
AFTER UPDATE
  ON m_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_floating_rates SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', is_base_lending_rate = ', IF(NEW.is_base_lending_rate IS NULL, 'NULL', CONCAT('"', NEW.is_base_lending_rate, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_base_lending_rate', OLD.is_base_lending_rate, NEW.is_base_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_floating_rates_periods_d%%
CREATE TRIGGER `m_floating_rates_periods_d`
BEFORE DELETE
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_floating_rates_periods WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_floating_rates_periods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate', OLD.interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', OLD.is_differential_to_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_floating_rates_periods_i%%
CREATE TRIGGER `m_floating_rates_periods_i`
AFTER INSERT
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_floating_rates_periods(id, floating_rates_id, from_date, interest_rate, is_differential_to_base_lending_rate, is_active, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.floating_rates_id IS NULL, 'NULL, ', CONCAT('"', NEW.floating_rates_id, '", ')), IF(NEW.from_date IS NULL, 'NULL, ', CONCAT('"', NEW.from_date, '", ')), IF(NEW.interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.interest_rate, '", ')), IF(NEW.is_differential_to_base_lending_rate IS NULL, 'NULL, ', CONCAT('"', NEW.is_differential_to_base_lending_rate, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_floating_rates_periods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'floating_rates_id', NEW.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate', NEW.interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', NEW.is_differential_to_base_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_floating_rates_periods_u%%
CREATE TRIGGER `m_floating_rates_periods_u`
AFTER UPDATE
  ON m_floating_rates_periods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_floating_rates_periods SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', floating_rates_id = ', IF(NEW.floating_rates_id IS NULL, 'NULL', CONCAT('"', NEW.floating_rates_id, '"')), ', from_date = ', IF(NEW.from_date IS NULL, 'NULL', CONCAT('"', NEW.from_date, '"')), ', interest_rate = ', IF(NEW.interest_rate IS NULL, 'NULL', CONCAT('"', NEW.interest_rate, '"')), ', is_differential_to_base_lending_rate = ', IF(NEW.is_differential_to_base_lending_rate IS NULL, 'NULL', CONCAT('"', NEW.is_differential_to_base_lending_rate, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_floating_rates_periods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NEW.floating_rates_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate', OLD.interest_rate, NEW.interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_differential_to_base_lending_rate', OLD.is_differential_to_base_lending_rate, NEW.is_differential_to_base_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_fund_d%%
CREATE TRIGGER `m_fund_d`
BEFORE DELETE
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_fund WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_fund', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_fund_i%%
CREATE TRIGGER `m_fund_i`
AFTER INSERT
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_fund(id, name, external_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_fund', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_fund_u%%
CREATE TRIGGER `m_fund_u`
AFTER UPDATE
  ON m_fund
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_fund SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_fund', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
  END%%


DROP TRIGGER IF EXISTS m_group_d%%
CREATE TRIGGER `m_group_d`
BEFORE DELETE
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_group WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_id', OLD.level_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_i%%
CREATE TRIGGER `m_group_i`
AFTER INSERT
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_group(id, external_id, status_enum, activation_date, office_id, staff_id, parent_id, level_id, display_name, hierarchy, closure_reason_cv_id, closedon_date, activatedon_userid, submittedon_date, submittedon_userid, closedon_userid, account_no) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.activation_date IS NULL, 'NULL, ', CONCAT('"', NEW.activation_date, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.parent_id IS NULL, 'NULL, ', CONCAT('"', NEW.parent_id, '", ')), IF(NEW.level_id IS NULL, 'NULL, ', CONCAT('"', NEW.level_id, '", ')), IF(NEW.display_name IS NULL, 'NULL, ', CONCAT('"', NEW.display_name, '", ')), IF(NEW.hierarchy IS NULL, 'NULL, ', CONCAT('"', NEW.hierarchy, '", ')), IF(NEW.closure_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.closure_reason_cv_id, '", ')), IF(NEW.closedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_date, '", ')), IF(NEW.activatedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.activatedon_userid, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.submittedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_userid, '", ')), IF(NEW.closedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_userid, '", ')), IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activation_date', NEW.activation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'level_id', NEW.level_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_reason_cv_id', NEW.closure_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_u%%
CREATE TRIGGER `m_group_u`
AFTER UPDATE
  ON m_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_group SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', activation_date = ', IF(NEW.activation_date IS NULL, 'NULL', CONCAT('"', NEW.activation_date, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ', level_id = ', IF(NEW.level_id IS NULL, 'NULL', CONCAT('"', NEW.level_id, '"')), ', display_name = ', IF(NEW.display_name IS NULL, 'NULL', CONCAT('"', NEW.display_name, '"')), ', hierarchy = ', IF(NEW.hierarchy IS NULL, 'NULL', CONCAT('"', NEW.hierarchy, '"')), ', closure_reason_cv_id = ', IF(NEW.closure_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.closure_reason_cv_id, '"')), ', closedon_date = ', IF(NEW.closedon_date IS NULL, 'NULL', CONCAT('"', NEW.closedon_date, '"')), ', activatedon_userid = ', IF(NEW.activatedon_userid IS NULL, 'NULL', CONCAT('"', NEW.activatedon_userid, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', submittedon_userid = ', IF(NEW.submittedon_userid IS NULL, 'NULL', CONCAT('"', NEW.submittedon_userid, '"')), ', closedon_userid = ', IF(NEW.closedon_userid IS NULL, 'NULL', CONCAT('"', NEW.closedon_userid, '"')), ', account_no = ', IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activation_date', OLD.activation_date, NEW.activation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_id', OLD.level_id, NEW.level_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_reason_cv_id', OLD.closure_reason_cv_id, NEW.closure_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
  END%%


DROP TRIGGER IF EXISTS m_group_client_d%%
CREATE TRIGGER `m_group_client_d`
BEFORE DELETE
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_group_client WHERE group_id = "', OLD.group_id, '"', ' AND client_id = "', OLD.client_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_group_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_client_i%%
CREATE TRIGGER `m_group_client_i`
AFTER INSERT
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_group_client(group_id, client_id) VALUES(', IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_group_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_client_u%%
CREATE TRIGGER `m_group_client_u`
AFTER UPDATE
  ON m_group_client
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_group_client SET group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ' WHERE group_id = "', NEW.group_id, '"', ' AND client_id = "', OLD.client_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_group_client', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
  END%%


DROP TRIGGER IF EXISTS m_group_level_d%%
CREATE TRIGGER `m_group_level_d`
BEFORE DELETE
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_group_level WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_group_level', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'super_parent', OLD.super_parent, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_name', OLD.level_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recursable', OLD.recursable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_have_clients', OLD.can_have_clients, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_level_i%%
CREATE TRIGGER `m_group_level_i`
AFTER INSERT
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_group_level(id, parent_id, super_parent, level_name, recursable, can_have_clients) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.parent_id IS NULL, 'NULL, ', CONCAT('"', NEW.parent_id, '", ')), IF(NEW.super_parent IS NULL, 'NULL, ', CONCAT('"', NEW.super_parent, '", ')), IF(NEW.level_name IS NULL, 'NULL, ', CONCAT('"', NEW.level_name, '", ')), IF(NEW.recursable IS NULL, 'NULL, ', CONCAT('"', NEW.recursable, '", ')), IF(NEW.can_have_clients IS NULL, 'NULL', CONCAT('"', NEW.can_have_clients, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_group_level', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'super_parent', NEW.super_parent, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'level_name', NEW.level_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recursable', NEW.recursable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_have_clients', NEW.can_have_clients, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_level_u%%
CREATE TRIGGER `m_group_level_u`
AFTER UPDATE
  ON m_group_level
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_group_level SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ', super_parent = ', IF(NEW.super_parent IS NULL, 'NULL', CONCAT('"', NEW.super_parent, '"')), ', level_name = ', IF(NEW.level_name IS NULL, 'NULL', CONCAT('"', NEW.level_name, '"')), ', recursable = ', IF(NEW.recursable IS NULL, 'NULL', CONCAT('"', NEW.recursable, '"')), ', can_have_clients = ', IF(NEW.can_have_clients IS NULL, 'NULL', CONCAT('"', NEW.can_have_clients, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_group_level', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'super_parent', OLD.super_parent, NEW.super_parent);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'level_name', OLD.level_name, NEW.level_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recursable', OLD.recursable, NEW.recursable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_have_clients', OLD.can_have_clients, NEW.can_have_clients);
  END%%


DROP TRIGGER IF EXISTS m_group_roles_d%%
CREATE TRIGGER `m_group_roles_d`
BEFORE DELETE
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_group_roles WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_group_roles', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_cv_id', OLD.role_cv_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_roles_i%%
CREATE TRIGGER `m_group_roles_i`
AFTER INSERT
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_group_roles(id, client_id, group_id, role_cv_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.role_cv_id IS NULL, 'NULL', CONCAT('"', NEW.role_cv_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_group_roles', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_cv_id', NEW.role_cv_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_group_roles_u%%
CREATE TRIGGER `m_group_roles_u`
AFTER UPDATE
  ON m_group_roles
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_group_roles SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', role_cv_id = ', IF(NEW.role_cv_id IS NULL, 'NULL', CONCAT('"', NEW.role_cv_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_group_roles', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_cv_id', OLD.role_cv_id, NEW.role_cv_id);
  END%%


DROP TRIGGER IF EXISTS m_guarantor_d%%
CREATE TRIGGER `m_guarantor_d`
BEFORE DELETE
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_guarantor WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_guarantor', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_reln_cv_id', OLD.client_reln_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dob', OLD.dob, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'zip', OLD.zip, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'house_phone_number', OLD.house_phone_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comment', OLD.comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_i%%
CREATE TRIGGER `m_guarantor_i`
AFTER INSERT
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_guarantor(id, loan_id, client_reln_cv_id, type_enum, entity_id, firstname, lastname, dob, address_line_1, address_line_2, city, state, country, zip, house_phone_number, mobile_number, comment, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.client_reln_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_reln_cv_id, '", ')), IF(NEW.type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.type_enum, '", ')), IF(NEW.entity_id IS NULL, 'NULL, ', CONCAT('"', NEW.entity_id, '", ')), IF(NEW.firstname IS NULL, 'NULL, ', CONCAT('"', NEW.firstname, '", ')), IF(NEW.lastname IS NULL, 'NULL, ', CONCAT('"', NEW.lastname, '", ')), IF(NEW.dob IS NULL, 'NULL, ', CONCAT('"', NEW.dob, '", ')), IF(NEW.address_line_1 IS NULL, 'NULL, ', CONCAT('"', NEW.address_line_1, '", ')), IF(NEW.address_line_2 IS NULL, 'NULL, ', CONCAT('"', NEW.address_line_2, '", ')), IF(NEW.city IS NULL, 'NULL, ', CONCAT('"', NEW.city, '", ')), IF(NEW.state IS NULL, 'NULL, ', CONCAT('"', NEW.state, '", ')), IF(NEW.country IS NULL, 'NULL, ', CONCAT('"', NEW.country, '", ')), IF(NEW.zip IS NULL, 'NULL, ', CONCAT('"', NEW.zip, '", ')), IF(NEW.house_phone_number IS NULL, 'NULL, ', CONCAT('"', NEW.house_phone_number, '", ')), IF(NEW.mobile_number IS NULL, 'NULL, ', CONCAT('"', NEW.mobile_number, '", ')), IF(NEW.comment IS NULL, 'NULL, ', CONCAT('"', NEW.comment, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_guarantor', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_reln_cv_id', NEW.client_reln_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_id', NEW.entity_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dob', NEW.dob, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_1', NEW.address_line_1, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'address_line_2', NEW.address_line_2, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'city', NEW.city, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state', NEW.state, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country', NEW.country, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'zip', NEW.zip, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'house_phone_number', NEW.house_phone_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_number', NEW.mobile_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'comment', NEW.comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_u%%
CREATE TRIGGER `m_guarantor_u`
AFTER UPDATE
  ON m_guarantor
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_guarantor SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', client_reln_cv_id = ', IF(NEW.client_reln_cv_id IS NULL, 'NULL', CONCAT('"', NEW.client_reln_cv_id, '"')), ', type_enum = ', IF(NEW.type_enum IS NULL, 'NULL', CONCAT('"', NEW.type_enum, '"')), ', entity_id = ', IF(NEW.entity_id IS NULL, 'NULL', CONCAT('"', NEW.entity_id, '"')), ', firstname = ', IF(NEW.firstname IS NULL, 'NULL', CONCAT('"', NEW.firstname, '"')), ', lastname = ', IF(NEW.lastname IS NULL, 'NULL', CONCAT('"', NEW.lastname, '"')), ', dob = ', IF(NEW.dob IS NULL, 'NULL', CONCAT('"', NEW.dob, '"')), ', address_line_1 = ', IF(NEW.address_line_1 IS NULL, 'NULL', CONCAT('"', NEW.address_line_1, '"')), ', address_line_2 = ', IF(NEW.address_line_2 IS NULL, 'NULL', CONCAT('"', NEW.address_line_2, '"')), ', city = ', IF(NEW.city IS NULL, 'NULL', CONCAT('"', NEW.city, '"')), ', state = ', IF(NEW.state IS NULL, 'NULL', CONCAT('"', NEW.state, '"')), ', country = ', IF(NEW.country IS NULL, 'NULL', CONCAT('"', NEW.country, '"')), ', zip = ', IF(NEW.zip IS NULL, 'NULL', CONCAT('"', NEW.zip, '"')), ', house_phone_number = ', IF(NEW.house_phone_number IS NULL, 'NULL', CONCAT('"', NEW.house_phone_number, '"')), ', mobile_number = ', IF(NEW.mobile_number IS NULL, 'NULL', CONCAT('"', NEW.mobile_number, '"')), ', comment = ', IF(NEW.comment IS NULL, 'NULL', CONCAT('"', NEW.comment, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_guarantor', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_reln_cv_id', OLD.client_reln_cv_id, NEW.client_reln_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_id', OLD.entity_id, NEW.entity_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dob', OLD.dob, NEW.dob);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_1', OLD.address_line_1, NEW.address_line_1);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'address_line_2', OLD.address_line_2, NEW.address_line_2);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'city', OLD.city, NEW.city);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NEW.state);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country', OLD.country, NEW.country);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'zip', OLD.zip, NEW.zip);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'house_phone_number', OLD.house_phone_number, NEW.house_phone_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_number', OLD.mobile_number, NEW.mobile_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'comment', OLD.comment, NEW.comment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_guarantor_funding_details_d%%
CREATE TRIGGER `m_guarantor_funding_details_d`
BEFORE DELETE
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_guarantor_funding_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_guarantor_funding_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_id', OLD.guarantor_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_associations_id', OLD.account_associations_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_released_derived', OLD.amount_released_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_remaining_derived', OLD.amount_remaining_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_transfered_derived', OLD.amount_transfered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_funding_details_i%%
CREATE TRIGGER `m_guarantor_funding_details_i`
AFTER INSERT
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_guarantor_funding_details(id, guarantor_id, account_associations_id, amount, amount_released_derived, amount_remaining_derived, amount_transfered_derived, status_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.guarantor_id IS NULL, 'NULL, ', CONCAT('"', NEW.guarantor_id, '", ')), IF(NEW.account_associations_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_associations_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_released_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_released_derived, '", ')), IF(NEW.amount_remaining_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_remaining_derived, '", ')), IF(NEW.amount_transfered_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_transfered_derived, '", ')), IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_guarantor_funding_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantor_id', NEW.guarantor_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_associations_id', NEW.account_associations_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_released_derived', NEW.amount_released_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_remaining_derived', NEW.amount_remaining_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_transfered_derived', NEW.amount_transfered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_funding_details_u%%
CREATE TRIGGER `m_guarantor_funding_details_u`
AFTER UPDATE
  ON m_guarantor_funding_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_guarantor_funding_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', guarantor_id = ', IF(NEW.guarantor_id IS NULL, 'NULL', CONCAT('"', NEW.guarantor_id, '"')), ', account_associations_id = ', IF(NEW.account_associations_id IS NULL, 'NULL', CONCAT('"', NEW.account_associations_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_released_derived = ', IF(NEW.amount_released_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_released_derived, '"')), ', amount_remaining_derived = ', IF(NEW.amount_remaining_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_remaining_derived, '"')), ', amount_transfered_derived = ', IF(NEW.amount_transfered_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_transfered_derived, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_guarantor_funding_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_id', OLD.guarantor_id, NEW.guarantor_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_associations_id', OLD.account_associations_id, NEW.account_associations_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_released_derived', OLD.amount_released_derived, NEW.amount_released_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_remaining_derived', OLD.amount_remaining_derived, NEW.amount_remaining_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_transfered_derived', OLD.amount_transfered_derived, NEW.amount_transfered_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
  END%%


DROP TRIGGER IF EXISTS m_guarantor_transaction_d%%
CREATE TRIGGER `m_guarantor_transaction_d`
BEFORE DELETE
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_guarantor_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_guarantor_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', OLD.guarantor_fund_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', OLD.deposit_on_hold_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_transaction_i%%
CREATE TRIGGER `m_guarantor_transaction_i`
AFTER INSERT
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_guarantor_transaction(id, guarantor_fund_detail_id, loan_transaction_id, deposit_on_hold_transaction_id, is_reversed) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.guarantor_fund_detail_id IS NULL, 'NULL, ', CONCAT('"', NEW.guarantor_fund_detail_id, '", ')), IF(NEW.loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_id, '", ')), IF(NEW.deposit_on_hold_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_on_hold_transaction_id, '", ')), IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_guarantor_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', NEW.guarantor_fund_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', NEW.deposit_on_hold_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
  END%%
DROP TRIGGER IF EXISTS m_guarantor_transaction_u%%
CREATE TRIGGER `m_guarantor_transaction_u`
AFTER UPDATE
  ON m_guarantor_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_guarantor_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', guarantor_fund_detail_id = ', IF(NEW.guarantor_fund_detail_id IS NULL, 'NULL', CONCAT('"', NEW.guarantor_fund_detail_id, '"')), ', loan_transaction_id = ', IF(NEW.loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_id, '"')), ', deposit_on_hold_transaction_id = ', IF(NEW.deposit_on_hold_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.deposit_on_hold_transaction_id, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_guarantor_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantor_fund_detail_id', OLD.guarantor_fund_detail_id, NEW.guarantor_fund_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_on_hold_transaction_id', OLD.deposit_on_hold_transaction_id, NEW.deposit_on_hold_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
  END%%


DROP TRIGGER IF EXISTS m_holiday_d%%
CREATE TRIGGER `m_holiday_d`
BEFORE DELETE
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_holiday WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_holiday', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_date', OLD.to_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', OLD.repayments_rescheduled_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processed', OLD.processed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_holiday_i%%
CREATE TRIGGER `m_holiday_i`
AFTER INSERT
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_holiday(id, name, from_date, to_date, repayments_rescheduled_to, status_enum, processed, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.from_date IS NULL, 'NULL, ', CONCAT('"', NEW.from_date, '", ')), IF(NEW.to_date IS NULL, 'NULL, ', CONCAT('"', NEW.to_date, '", ')), IF(NEW.repayments_rescheduled_to IS NULL, 'NULL, ', CONCAT('"', NEW.repayments_rescheduled_to, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.processed IS NULL, 'NULL, ', CONCAT('"', NEW.processed, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_holiday', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_date', NEW.to_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', NEW.repayments_rescheduled_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'processed', NEW.processed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_holiday_u%%
CREATE TRIGGER `m_holiday_u`
AFTER UPDATE
  ON m_holiday
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_holiday SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', from_date = ', IF(NEW.from_date IS NULL, 'NULL', CONCAT('"', NEW.from_date, '"')), ', to_date = ', IF(NEW.to_date IS NULL, 'NULL', CONCAT('"', NEW.to_date, '"')), ', repayments_rescheduled_to = ', IF(NEW.repayments_rescheduled_to IS NULL, 'NULL', CONCAT('"', NEW.repayments_rescheduled_to, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', processed = ', IF(NEW.processed IS NULL, 'NULL', CONCAT('"', NEW.processed, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_holiday', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_date', OLD.to_date, NEW.to_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayments_rescheduled_to', OLD.repayments_rescheduled_to, NEW.repayments_rescheduled_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processed', OLD.processed, NEW.processed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_holiday_office_d%%
CREATE TRIGGER `m_holiday_office_d`
BEFORE DELETE
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_holiday_office WHERE office_id = "', OLD.office_id, '"', ' AND holiday_id = "', OLD.holiday_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_holiday_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'holiday_id', OLD.holiday_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_holiday_office_i%%
CREATE TRIGGER `m_holiday_office_i`
AFTER INSERT
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_holiday_office(holiday_id, office_id) VALUES(', IF(NEW.holiday_id IS NULL, 'NULL, ', CONCAT('"', NEW.holiday_id, '", ')), IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_holiday_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'holiday_id', NEW.holiday_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_holiday_office_u%%
CREATE TRIGGER `m_holiday_office_u`
AFTER UPDATE
  ON m_holiday_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_holiday_office SET holiday_id = ', IF(NEW.holiday_id IS NULL, 'NULL', CONCAT('"', NEW.holiday_id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ' WHERE office_id = "', NEW.office_id, '"', ' AND holiday_id = "', OLD.holiday_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_holiday_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'holiday_id', OLD.holiday_id, NEW.holiday_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
  END%%


DROP TRIGGER IF EXISTS m_hook_d%%
CREATE TRIGGER `m_hook_d`
BEFORE DELETE
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_hook WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_hook', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'template_id', OLD.template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ugd_template_id', OLD.ugd_template_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_i%%
CREATE TRIGGER `m_hook_i`
AFTER INSERT
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_hook(id, template_id, is_active, name, createdby_id, created_date, lastmodifiedby_id, lastmodified_date, ugd_template_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.template_id IS NULL, 'NULL, ', CONCAT('"', NEW.template_id, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.ugd_template_id IS NULL, 'NULL', CONCAT('"', NEW.ugd_template_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_hook', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'template_id', NEW.template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ugd_template_id', NEW.ugd_template_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_u%%
CREATE TRIGGER `m_hook_u`
AFTER UPDATE
  ON m_hook
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_hook SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', template_id = ', IF(NEW.template_id IS NULL, 'NULL', CONCAT('"', NEW.template_id, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', ugd_template_id = ', IF(NEW.ugd_template_id IS NULL, 'NULL', CONCAT('"', NEW.ugd_template_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_hook', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'template_id', OLD.template_id, NEW.template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ugd_template_id', OLD.ugd_template_id, NEW.ugd_template_id);
  END%%


DROP TRIGGER IF EXISTS m_hook_configuration_d%%
CREATE TRIGGER `m_hook_configuration_d`
BEFORE DELETE
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_hook_configuration WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_hook_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_value', OLD.field_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_configuration_i%%
CREATE TRIGGER `m_hook_configuration_i`
AFTER INSERT
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_hook_configuration(id, hook_id, field_type, field_name, field_value) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.hook_id IS NULL, 'NULL, ', CONCAT('"', NEW.hook_id, '", ')), IF(NEW.field_type IS NULL, 'NULL, ', CONCAT('"', NEW.field_type, '", ')), IF(NEW.field_name IS NULL, 'NULL, ', CONCAT('"', NEW.field_name, '", ')), IF(NEW.field_value IS NULL, 'NULL', CONCAT('"', NEW.field_value, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_hook_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_id', NEW.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_type', NEW.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_name', NEW.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_value', NEW.field_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_configuration_u%%
CREATE TRIGGER `m_hook_configuration_u`
AFTER UPDATE
  ON m_hook_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_hook_configuration SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', hook_id = ', IF(NEW.hook_id IS NULL, 'NULL', CONCAT('"', NEW.hook_id, '"')), ', field_type = ', IF(NEW.field_type IS NULL, 'NULL', CONCAT('"', NEW.field_type, '"')), ', field_name = ', IF(NEW.field_name IS NULL, 'NULL', CONCAT('"', NEW.field_name, '"')), ', field_value = ', IF(NEW.field_value IS NULL, 'NULL', CONCAT('"', NEW.field_value, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_hook_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NEW.hook_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NEW.field_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NEW.field_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_value', OLD.field_value, NEW.field_value);
  END%%


DROP TRIGGER IF EXISTS m_hook_registered_events_d%%
CREATE TRIGGER `m_hook_registered_events_d`
BEFORE DELETE
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_hook_registered_events WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_hook_registered_events', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_registered_events_i%%
CREATE TRIGGER `m_hook_registered_events_i`
AFTER INSERT
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_hook_registered_events(id, hook_id, entity_name, action_name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.hook_id IS NULL, 'NULL, ', CONCAT('"', NEW.hook_id, '", ')), IF(NEW.entity_name IS NULL, 'NULL, ', CONCAT('"', NEW.entity_name, '", ')), IF(NEW.action_name IS NULL, 'NULL', CONCAT('"', NEW.action_name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_hook_registered_events', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_id', NEW.hook_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_registered_events_u%%
CREATE TRIGGER `m_hook_registered_events_u`
AFTER UPDATE
  ON m_hook_registered_events
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_hook_registered_events SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', hook_id = ', IF(NEW.hook_id IS NULL, 'NULL', CONCAT('"', NEW.hook_id, '"')), ', entity_name = ', IF(NEW.entity_name IS NULL, 'NULL', CONCAT('"', NEW.entity_name, '"')), ', action_name = ', IF(NEW.action_name IS NULL, 'NULL', CONCAT('"', NEW.action_name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_hook_registered_events', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_id', OLD.hook_id, NEW.hook_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
  END%%


DROP TRIGGER IF EXISTS m_hook_schema_d%%
CREATE TRIGGER `m_hook_schema_d`
BEFORE DELETE
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_hook_schema WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_hook_schema', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_template_id', OLD.hook_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'placeholder', OLD.placeholder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'optional', OLD.optional, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_schema_i%%
CREATE TRIGGER `m_hook_schema_i`
AFTER INSERT
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_hook_schema(id, hook_template_id, field_type, field_name, placeholder, optional) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.hook_template_id IS NULL, 'NULL, ', CONCAT('"', NEW.hook_template_id, '", ')), IF(NEW.field_type IS NULL, 'NULL, ', CONCAT('"', NEW.field_type, '", ')), IF(NEW.field_name IS NULL, 'NULL, ', CONCAT('"', NEW.field_name, '", ')), IF(NEW.placeholder IS NULL, 'NULL, ', CONCAT('"', NEW.placeholder, '", ')), IF(NEW.optional IS NULL, 'NULL', CONCAT('"', NEW.optional, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_hook_schema', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hook_template_id', NEW.hook_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_type', NEW.field_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_name', NEW.field_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'placeholder', NEW.placeholder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'optional', NEW.optional, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_schema_u%%
CREATE TRIGGER `m_hook_schema_u`
AFTER UPDATE
  ON m_hook_schema
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_hook_schema SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', hook_template_id = ', IF(NEW.hook_template_id IS NULL, 'NULL', CONCAT('"', NEW.hook_template_id, '"')), ', field_type = ', IF(NEW.field_type IS NULL, 'NULL', CONCAT('"', NEW.field_type, '"')), ', field_name = ', IF(NEW.field_name IS NULL, 'NULL', CONCAT('"', NEW.field_name, '"')), ', placeholder = ', IF(NEW.placeholder IS NULL, 'NULL', CONCAT('"', NEW.placeholder, '"')), ', optional = ', IF(NEW.optional IS NULL, 'NULL', CONCAT('"', NEW.optional, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_hook_schema', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hook_template_id', OLD.hook_template_id, NEW.hook_template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_type', OLD.field_type, NEW.field_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_name', OLD.field_name, NEW.field_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'placeholder', OLD.placeholder, NEW.placeholder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'optional', OLD.optional, NEW.optional);
  END%%


DROP TRIGGER IF EXISTS m_hook_templates_d%%
CREATE TRIGGER `m_hook_templates_d`
BEFORE DELETE
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_hook_templates WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_hook_templates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_templates_i%%
CREATE TRIGGER `m_hook_templates_i`
AFTER INSERT
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_hook_templates(id, name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_hook_templates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END%%
DROP TRIGGER IF EXISTS m_hook_templates_u%%
CREATE TRIGGER `m_hook_templates_u`
AFTER UPDATE
  ON m_hook_templates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_hook_templates SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_hook_templates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END%%


DROP TRIGGER IF EXISTS m_image_d%%
CREATE TRIGGER `m_image_d`
BEFORE DELETE
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_image WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_image', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_image_i%%
CREATE TRIGGER `m_image_i`
AFTER INSERT
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_image(id, location, storage_type_enum) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.location IS NULL, 'NULL, ', CONCAT('"', NEW.location, '", ')), IF(NEW.storage_type_enum IS NULL, 'NULL', CONCAT('"', NEW.storage_type_enum, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_image', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'location', NEW.location, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'storage_type_enum', NEW.storage_type_enum, NULL);
  END%%
DROP TRIGGER IF EXISTS m_image_u%%
CREATE TRIGGER `m_image_u`
AFTER UPDATE
  ON m_image
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_image SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', location = ', IF(NEW.location IS NULL, 'NULL', CONCAT('"', NEW.location, '"')), ', storage_type_enum = ', IF(NEW.storage_type_enum IS NULL, 'NULL', CONCAT('"', NEW.storage_type_enum, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_image', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'location', OLD.location, NEW.location);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'storage_type_enum', OLD.storage_type_enum, NEW.storage_type_enum);
  END%%


DROP TRIGGER IF EXISTS m_interest_incentives_d%%
CREATE TRIGGER `m_interest_incentives_d`
BEFORE DELETE
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_interest_incentives WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_slab_id', OLD.interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_incentives_i%%
CREATE TRIGGER `m_interest_incentives_i`
AFTER INSERT
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_interest_incentives(id, interest_rate_slab_id, entiry_type, attribute_name, condition_type, attribute_value, incentive_type, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.interest_rate_slab_id IS NULL, 'NULL, ', CONCAT('"', NEW.interest_rate_slab_id, '", ')), IF(NEW.entiry_type IS NULL, 'NULL, ', CONCAT('"', NEW.entiry_type, '", ')), IF(NEW.attribute_name IS NULL, 'NULL, ', CONCAT('"', NEW.attribute_name, '", ')), IF(NEW.condition_type IS NULL, 'NULL, ', CONCAT('"', NEW.condition_type, '", ')), IF(NEW.attribute_value IS NULL, 'NULL, ', CONCAT('"', NEW.attribute_value, '", ')), IF(NEW.incentive_type IS NULL, 'NULL, ', CONCAT('"', NEW.incentive_type, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_slab_id', NEW.interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entiry_type', NEW.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_name', NEW.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'condition_type', NEW.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_value', NEW.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incentive_type', NEW.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_incentives_u%%
CREATE TRIGGER `m_interest_incentives_u`
AFTER UPDATE
  ON m_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_interest_incentives SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', interest_rate_slab_id = ', IF(NEW.interest_rate_slab_id IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_slab_id, '"')), ', entiry_type = ', IF(NEW.entiry_type IS NULL, 'NULL', CONCAT('"', NEW.entiry_type, '"')), ', attribute_name = ', IF(NEW.attribute_name IS NULL, 'NULL', CONCAT('"', NEW.attribute_name, '"')), ', condition_type = ', IF(NEW.condition_type IS NULL, 'NULL', CONCAT('"', NEW.condition_type, '"')), ', attribute_value = ', IF(NEW.attribute_value IS NULL, 'NULL', CONCAT('"', NEW.attribute_value, '"')), ', incentive_type = ', IF(NEW.incentive_type IS NULL, 'NULL', CONCAT('"', NEW.incentive_type, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_slab_id', OLD.interest_rate_slab_id, NEW.interest_rate_slab_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NEW.entiry_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NEW.attribute_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NEW.condition_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NEW.attribute_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NEW.incentive_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_interest_rate_chart_d%%
CREATE TRIGGER `m_interest_rate_chart_d`
BEFORE DELETE
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_interest_rate_chart WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_rate_chart_i%%
CREATE TRIGGER `m_interest_rate_chart_i`
AFTER INSERT
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_interest_rate_chart(id, name, description, from_date, end_date, is_primary_grouping_by_amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.from_date IS NULL, 'NULL, ', CONCAT('"', NEW.from_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.is_primary_grouping_by_amount IS NULL, 'NULL', CONCAT('"', NEW.is_primary_grouping_by_amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', NEW.is_primary_grouping_by_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_rate_chart_u%%
CREATE TRIGGER `m_interest_rate_chart_u`
AFTER UPDATE
  ON m_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_interest_rate_chart SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', from_date = ', IF(NEW.from_date IS NULL, 'NULL', CONCAT('"', NEW.from_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', is_primary_grouping_by_amount = ', IF(NEW.is_primary_grouping_by_amount IS NULL, 'NULL', CONCAT('"', NEW.is_primary_grouping_by_amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NEW.is_primary_grouping_by_amount);
  END%%


DROP TRIGGER IF EXISTS m_interest_rate_slab_d%%
CREATE TRIGGER `m_interest_rate_slab_d`
BEFORE DELETE
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_interest_rate_slab WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_rate_slab_i%%
CREATE TRIGGER `m_interest_rate_slab_i`
AFTER INSERT
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_interest_rate_slab(id, interest_rate_chart_id, description, period_type_enum, from_period, to_period, amount_range_from, amount_range_to, annual_interest_rate, currency_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.interest_rate_chart_id IS NULL, 'NULL, ', CONCAT('"', NEW.interest_rate_chart_id, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.period_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.period_type_enum, '", ')), IF(NEW.from_period IS NULL, 'NULL, ', CONCAT('"', NEW.from_period, '", ')), IF(NEW.to_period IS NULL, 'NULL, ', CONCAT('"', NEW.to_period, '", ')), IF(NEW.amount_range_from IS NULL, 'NULL, ', CONCAT('"', NEW.amount_range_from, '", ')), IF(NEW.amount_range_to IS NULL, 'NULL, ', CONCAT('"', NEW.amount_range_to, '", ')), IF(NEW.annual_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.annual_interest_rate, '", ')), IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_chart_id', NEW.interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'period_type_enum', NEW.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_period', NEW.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_period', NEW.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_from', NEW.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_to', NEW.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_interest_rate', NEW.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_interest_rate_slab_u%%
CREATE TRIGGER `m_interest_rate_slab_u`
AFTER UPDATE
  ON m_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_interest_rate_slab SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', interest_rate_chart_id = ', IF(NEW.interest_rate_chart_id IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_chart_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', period_type_enum = ', IF(NEW.period_type_enum IS NULL, 'NULL', CONCAT('"', NEW.period_type_enum, '"')), ', from_period = ', IF(NEW.from_period IS NULL, 'NULL', CONCAT('"', NEW.from_period, '"')), ', to_period = ', IF(NEW.to_period IS NULL, 'NULL', CONCAT('"', NEW.to_period, '"')), ', amount_range_from = ', IF(NEW.amount_range_from IS NULL, 'NULL', CONCAT('"', NEW.amount_range_from, '"')), ', amount_range_to = ', IF(NEW.amount_range_to IS NULL, 'NULL', CONCAT('"', NEW.amount_range_to, '"')), ', annual_interest_rate = ', IF(NEW.annual_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.annual_interest_rate, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_chart_id', OLD.interest_rate_chart_id, NEW.interest_rate_chart_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NEW.period_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NEW.from_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NEW.to_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NEW.amount_range_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NEW.amount_range_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NEW.annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END%%


DROP TRIGGER IF EXISTS m_loan_d%%
CREATE TRIGGER `m_loan_d`
BEFORE DELETE
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', OLD.loanpurpose_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_status_id', OLD.loan_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_type_enum', OLD.loan_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount_proposed', OLD.principal_amount_proposed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_principal', OLD.approved_principal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate', OLD.is_floating_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_frequency', OLD.term_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_period_frequency_enum', OLD.term_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disbursedon_date', OLD.expected_disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', OLD.expected_firstrepaymenton_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_from_date', OLD.interest_calculated_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_userid', OLD.disbursedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_maturedon_date', OLD.expected_maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturedon_date', OLD.maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', OLD.total_charges_due_at_disbursement_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_disbursed_derived', OLD.principal_disbursed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_repaid_derived', OLD.principal_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_outstanding_derived', OLD.principal_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_charged_derived', OLD.interest_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_repaid_derived', OLD.interest_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_outstanding_derived', OLD.interest_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', OLD.fee_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', OLD.fee_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', OLD.fee_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', OLD.penalty_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', OLD.penalty_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', OLD.penalty_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', OLD.total_expected_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_repayment_derived', OLD.total_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', OLD.total_expected_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_costofloan_derived', OLD.total_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_waived_derived', OLD.total_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_writtenoff_derived', OLD.total_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_outstanding_derived', OLD.total_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overpaid_derived', OLD.total_overpaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_date', OLD.rescheduledon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_userid', OLD.rescheduledon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writtenoffon_date', OLD.writtenoffon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', OLD.sync_disbursement_with_meeting, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_counter', OLD.loan_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_counter', OLD.loan_product_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fixed_emi_amount', OLD.fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_npa', OLD.is_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_recovered_derived', OLD.total_recovered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrued_till', OLD.accrued_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalcualated_on', OLD.interest_recalcualated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantee_amount_derived', OLD.guarantee_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', OLD.create_standing_instruction_at_disbursement, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', OLD.writeoff_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_sub_status_id', OLD.loan_sub_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_topup', OLD.is_topup, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_i%%
CREATE TRIGGER `m_loan_i`
AFTER INSERT
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan(id, account_no, external_id, client_id, group_id, product_id, fund_id, loan_officer_id, loanpurpose_cv_id, loan_status_id, loan_type_enum, currency_code, currency_digits, currency_multiplesof, principal_amount_proposed, principal_amount, approved_principal, arrearstolerance_amount, is_floating_interest_rate, interest_rate_differential, nominal_interest_rate_per_period, interest_period_frequency_enum, annual_nominal_interest_rate, interest_method_enum, interest_calculated_in_period_enum, allow_partial_period_interest_calcualtion, term_frequency, term_period_frequency_enum, repay_every, repayment_period_frequency_enum, number_of_repayments, grace_on_principal_periods, recurring_moratorium_principal_periods, grace_on_interest_periods, grace_interest_free_periods, amortization_method_enum, submittedon_date, submittedon_userid, approvedon_date, approvedon_userid, expected_disbursedon_date, expected_firstrepaymenton_date, interest_calculated_from_date, disbursedon_date, disbursedon_userid, expected_maturedon_date, maturedon_date, closedon_date, closedon_userid, total_charges_due_at_disbursement_derived, principal_disbursed_derived, principal_repaid_derived, principal_writtenoff_derived, principal_outstanding_derived, interest_charged_derived, interest_repaid_derived, interest_waived_derived, interest_writtenoff_derived, interest_outstanding_derived, fee_charges_charged_derived, fee_charges_repaid_derived, fee_charges_waived_derived, fee_charges_writtenoff_derived, fee_charges_outstanding_derived, penalty_charges_charged_derived, penalty_charges_repaid_derived, penalty_charges_waived_derived, penalty_charges_writtenoff_derived, penalty_charges_outstanding_derived, total_expected_repayment_derived, total_repayment_derived, total_expected_costofloan_derived, total_costofloan_derived, total_waived_derived, total_writtenoff_derived, total_outstanding_derived, total_overpaid_derived, rejectedon_date, rejectedon_userid, rescheduledon_date, rescheduledon_userid, withdrawnon_date, withdrawnon_userid, writtenoffon_date, loan_transaction_strategy_id, sync_disbursement_with_meeting, loan_counter, loan_product_counter, fixed_emi_amount, max_outstanding_loan_balance, grace_on_arrears_ageing, is_npa, total_recovered_derived, accrued_till, interest_recalcualated_on, days_in_month_enum, days_in_year_enum, interest_recalculation_enabled, guarantee_amount_derived, create_standing_instruction_at_disbursement, version, writeoff_reason_cv_id, loan_sub_status_id, is_topup) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_no IS NULL, 'NULL, ', CONCAT('"', NEW.account_no, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.fund_id IS NULL, 'NULL, ', CONCAT('"', NEW.fund_id, '", ')), IF(NEW.loan_officer_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_officer_id, '", ')), IF(NEW.loanpurpose_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.loanpurpose_cv_id, '", ')), IF(NEW.loan_status_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_status_id, '", ')), IF(NEW.loan_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.loan_type_enum, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.principal_amount_proposed IS NULL, 'NULL, ', CONCAT('"', NEW.principal_amount_proposed, '", ')), IF(NEW.principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.principal_amount, '", ')), IF(NEW.approved_principal IS NULL, 'NULL, ', CONCAT('"', NEW.approved_principal, '", ')), IF(NEW.arrearstolerance_amount IS NULL, 'NULL, ', CONCAT('"', NEW.arrearstolerance_amount, '", ')), IF(NEW.is_floating_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.is_floating_interest_rate, '", ')), IF(NEW.interest_rate_differential IS NULL, 'NULL, ', CONCAT('"', NEW.interest_rate_differential, '", ')), IF(NEW.nominal_interest_rate_per_period IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_interest_rate_per_period, '", ')), IF(NEW.interest_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_period_frequency_enum, '", ')), IF(NEW.annual_nominal_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.annual_nominal_interest_rate, '", ')), IF(NEW.interest_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_method_enum, '", ')), IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculated_in_period_enum, '", ')), IF(NEW.allow_partial_period_interest_calcualtion IS NULL, 'NULL, ', CONCAT('"', NEW.allow_partial_period_interest_calcualtion, '", ')), IF(NEW.term_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.term_frequency, '", ')), IF(NEW.term_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.term_period_frequency_enum, '", ')), IF(NEW.repay_every IS NULL, 'NULL, ', CONCAT('"', NEW.repay_every, '", ')), IF(NEW.repayment_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.repayment_period_frequency_enum, '", ')), IF(NEW.number_of_repayments IS NULL, 'NULL, ', CONCAT('"', NEW.number_of_repayments, '", ')), IF(NEW.grace_on_principal_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_principal_periods, '", ')), IF(NEW.recurring_moratorium_principal_periods IS NULL, 'NULL, ', CONCAT('"', NEW.recurring_moratorium_principal_periods, '", ')), IF(NEW.grace_on_interest_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_interest_periods, '", ')), IF(NEW.grace_interest_free_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_interest_free_periods, '", ')), IF(NEW.amortization_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.amortization_method_enum, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.submittedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_userid, '", ')), IF(NEW.approvedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_date, '", ')), IF(NEW.approvedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_userid, '", ')), IF(NEW.expected_disbursedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.expected_disbursedon_date, '", ')), IF(NEW.expected_firstrepaymenton_date IS NULL, 'NULL, ', CONCAT('"', NEW.expected_firstrepaymenton_date, '", ')), IF(NEW.interest_calculated_from_date IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculated_from_date, '", ')), IF(NEW.disbursedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.disbursedon_date, '", ')), IF(NEW.disbursedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.disbursedon_userid, '", ')), IF(NEW.expected_maturedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.expected_maturedon_date, '", ')), IF(NEW.maturedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.maturedon_date, '", ')), IF(NEW.closedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_date, '", ')), IF(NEW.closedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_userid, '", ')), IF(NEW.total_charges_due_at_disbursement_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_charges_due_at_disbursement_derived, '", ')), IF(NEW.principal_disbursed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_disbursed_derived, '", ')), IF(NEW.principal_repaid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_repaid_derived, '", ')), IF(NEW.principal_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_writtenoff_derived, '", ')), IF(NEW.principal_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_outstanding_derived, '", ')), IF(NEW.interest_charged_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_charged_derived, '", ')), IF(NEW.interest_repaid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_repaid_derived, '", ')), IF(NEW.interest_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_waived_derived, '", ')), IF(NEW.interest_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_writtenoff_derived, '", ')), IF(NEW.interest_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_outstanding_derived, '", ')), IF(NEW.fee_charges_charged_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_charged_derived, '", ')), IF(NEW.fee_charges_repaid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_repaid_derived, '", ')), IF(NEW.fee_charges_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_waived_derived, '", ')), IF(NEW.fee_charges_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_writtenoff_derived, '", ')), IF(NEW.fee_charges_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_outstanding_derived, '", ')), IF(NEW.penalty_charges_charged_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_charged_derived, '", ')), IF(NEW.penalty_charges_repaid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_repaid_derived, '", ')), IF(NEW.penalty_charges_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_waived_derived, '", ')), IF(NEW.penalty_charges_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_writtenoff_derived, '", ')), IF(NEW.penalty_charges_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_outstanding_derived, '", ')), IF(NEW.total_expected_repayment_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_expected_repayment_derived, '", ')), IF(NEW.total_repayment_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_repayment_derived, '", ')), IF(NEW.total_expected_costofloan_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_expected_costofloan_derived, '", ')), IF(NEW.total_costofloan_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_costofloan_derived, '", ')), IF(NEW.total_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_waived_derived, '", ')), IF(NEW.total_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_writtenoff_derived, '", ')), IF(NEW.total_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_outstanding_derived, '", ')), IF(NEW.total_overpaid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_overpaid_derived, '", ')), IF(NEW.rejectedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_date, '", ')), IF(NEW.rejectedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_userid, '", ')), IF(NEW.rescheduledon_date IS NULL, 'NULL, ', CONCAT('"', NEW.rescheduledon_date, '", ')), IF(NEW.rescheduledon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.rescheduledon_userid, '", ')), IF(NEW.withdrawnon_date IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawnon_date, '", ')), IF(NEW.withdrawnon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawnon_userid, '", ')), IF(NEW.writtenoffon_date IS NULL, 'NULL, ', CONCAT('"', NEW.writtenoffon_date, '", ')), IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_strategy_id, '", ')), IF(NEW.sync_disbursement_with_meeting IS NULL, 'NULL, ', CONCAT('"', NEW.sync_disbursement_with_meeting, '", ')), IF(NEW.loan_counter IS NULL, 'NULL, ', CONCAT('"', NEW.loan_counter, '", ')), IF(NEW.loan_product_counter IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_counter, '", ')), IF(NEW.fixed_emi_amount IS NULL, 'NULL, ', CONCAT('"', NEW.fixed_emi_amount, '", ')), IF(NEW.max_outstanding_loan_balance IS NULL, 'NULL, ', CONCAT('"', NEW.max_outstanding_loan_balance, '", ')), IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_arrears_ageing, '", ')), IF(NEW.is_npa IS NULL, 'NULL, ', CONCAT('"', NEW.is_npa, '", ')), IF(NEW.total_recovered_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_recovered_derived, '", ')), IF(NEW.accrued_till IS NULL, 'NULL, ', CONCAT('"', NEW.accrued_till, '", ')), IF(NEW.interest_recalcualated_on IS NULL, 'NULL, ', CONCAT('"', NEW.interest_recalcualated_on, '", ')), IF(NEW.days_in_month_enum IS NULL, 'NULL, ', CONCAT('"', NEW.days_in_month_enum, '", ')), IF(NEW.days_in_year_enum IS NULL, 'NULL, ', CONCAT('"', NEW.days_in_year_enum, '", ')), IF(NEW.interest_recalculation_enabled IS NULL, 'NULL, ', CONCAT('"', NEW.interest_recalculation_enabled, '", ')), IF(NEW.guarantee_amount_derived IS NULL, 'NULL, ', CONCAT('"', NEW.guarantee_amount_derived, '", ')), IF(NEW.create_standing_instruction_at_disbursement IS NULL, 'NULL, ', CONCAT('"', NEW.create_standing_instruction_at_disbursement, '", ')), IF(NEW.version IS NULL, 'NULL, ', CONCAT('"', NEW.version, '", ')), IF(NEW.writeoff_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.writeoff_reason_cv_id, '", ')), IF(NEW.loan_sub_status_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_sub_status_id, '", ')), IF(NEW.is_topup IS NULL, 'NULL', CONCAT('"', NEW.is_topup, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fund_id', NEW.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_officer_id', NEW.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', NEW.loanpurpose_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_status_id', NEW.loan_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_type_enum', NEW.loan_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount_proposed', NEW.principal_amount_proposed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_principal', NEW.approved_principal, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_floating_interest_rate', NEW.is_floating_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_differential', NEW.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', NEW.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', NEW.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', NEW.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', NEW.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_frequency', NEW.term_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_period_frequency_enum', NEW.term_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', NEW.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_repayments', NEW.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_principal_periods', NEW.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', NEW.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_interest_periods', NEW.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_interest_free_periods', NEW.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_disbursedon_date', NEW.expected_disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', NEW.expected_firstrepaymenton_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_from_date', NEW.interest_calculated_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_date', NEW.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_userid', NEW.disbursedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_maturedon_date', NEW.expected_maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maturedon_date', NEW.maturedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', NEW.total_charges_due_at_disbursement_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_disbursed_derived', NEW.principal_disbursed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_repaid_derived', NEW.principal_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', NEW.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_outstanding_derived', NEW.principal_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_charged_derived', NEW.interest_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_repaid_derived', NEW.interest_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_waived_derived', NEW.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', NEW.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_outstanding_derived', NEW.interest_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', NEW.fee_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', NEW.fee_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', NEW.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', NEW.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', NEW.fee_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', NEW.penalty_charges_charged_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', NEW.penalty_charges_repaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', NEW.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', NEW.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', NEW.penalty_charges_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', NEW.total_expected_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_repayment_derived', NEW.total_repayment_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', NEW.total_expected_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_costofloan_derived', NEW.total_costofloan_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_waived_derived', NEW.total_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_writtenoff_derived', NEW.total_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_outstanding_derived', NEW.total_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overpaid_derived', NEW.total_overpaid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rescheduledon_date', NEW.rescheduledon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rescheduledon_userid', NEW.rescheduledon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_date', NEW.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_userid', NEW.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'writtenoffon_date', NEW.writtenoffon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', NEW.sync_disbursement_with_meeting, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_counter', NEW.loan_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_counter', NEW.loan_product_counter, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fixed_emi_amount', NEW.fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', NEW.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_npa', NEW.is_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_recovered_derived', NEW.total_recovered_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrued_till', NEW.accrued_till, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalcualated_on', NEW.interest_recalcualated_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_month_enum', NEW.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_year_enum', NEW.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', NEW.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'guarantee_amount_derived', NEW.guarantee_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', NEW.create_standing_instruction_at_disbursement, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', NEW.writeoff_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_sub_status_id', NEW.loan_sub_status_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_topup', NEW.is_topup, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_u%%
CREATE TRIGGER `m_loan_u`
AFTER UPDATE
  ON m_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_no = ', IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', fund_id = ', IF(NEW.fund_id IS NULL, 'NULL', CONCAT('"', NEW.fund_id, '"')), ', loan_officer_id = ', IF(NEW.loan_officer_id IS NULL, 'NULL', CONCAT('"', NEW.loan_officer_id, '"')), ', loanpurpose_cv_id = ', IF(NEW.loanpurpose_cv_id IS NULL, 'NULL', CONCAT('"', NEW.loanpurpose_cv_id, '"')), ', loan_status_id = ', IF(NEW.loan_status_id IS NULL, 'NULL', CONCAT('"', NEW.loan_status_id, '"')), ', loan_type_enum = ', IF(NEW.loan_type_enum IS NULL, 'NULL', CONCAT('"', NEW.loan_type_enum, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', principal_amount_proposed = ', IF(NEW.principal_amount_proposed IS NULL, 'NULL', CONCAT('"', NEW.principal_amount_proposed, '"')), ', principal_amount = ', IF(NEW.principal_amount IS NULL, 'NULL', CONCAT('"', NEW.principal_amount, '"')), ', approved_principal = ', IF(NEW.approved_principal IS NULL, 'NULL', CONCAT('"', NEW.approved_principal, '"')), ', arrearstolerance_amount = ', IF(NEW.arrearstolerance_amount IS NULL, 'NULL', CONCAT('"', NEW.arrearstolerance_amount, '"')), ', is_floating_interest_rate = ', IF(NEW.is_floating_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.is_floating_interest_rate, '"')), ', interest_rate_differential = ', IF(NEW.interest_rate_differential IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_differential, '"')), ', nominal_interest_rate_per_period = ', IF(NEW.nominal_interest_rate_per_period IS NULL, 'NULL', CONCAT('"', NEW.nominal_interest_rate_per_period, '"')), ', interest_period_frequency_enum = ', IF(NEW.interest_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_period_frequency_enum, '"')), ', annual_nominal_interest_rate = ', IF(NEW.annual_nominal_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.annual_nominal_interest_rate, '"')), ', interest_method_enum = ', IF(NEW.interest_method_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_method_enum, '"')), ', interest_calculated_in_period_enum = ', IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculated_in_period_enum, '"')), ', allow_partial_period_interest_calcualtion = ', IF(NEW.allow_partial_period_interest_calcualtion IS NULL, 'NULL', CONCAT('"', NEW.allow_partial_period_interest_calcualtion, '"')), ', term_frequency = ', IF(NEW.term_frequency IS NULL, 'NULL', CONCAT('"', NEW.term_frequency, '"')), ', term_period_frequency_enum = ', IF(NEW.term_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.term_period_frequency_enum, '"')), ', repay_every = ', IF(NEW.repay_every IS NULL, 'NULL', CONCAT('"', NEW.repay_every, '"')), ', repayment_period_frequency_enum = ', IF(NEW.repayment_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.repayment_period_frequency_enum, '"')), ', number_of_repayments = ', IF(NEW.number_of_repayments IS NULL, 'NULL', CONCAT('"', NEW.number_of_repayments, '"')), ', grace_on_principal_periods = ', IF(NEW.grace_on_principal_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_on_principal_periods, '"')), ', recurring_moratorium_principal_periods = ', IF(NEW.recurring_moratorium_principal_periods IS NULL, 'NULL', CONCAT('"', NEW.recurring_moratorium_principal_periods, '"')), ', grace_on_interest_periods = ', IF(NEW.grace_on_interest_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_on_interest_periods, '"')), ', grace_interest_free_periods = ', IF(NEW.grace_interest_free_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_interest_free_periods, '"')), ', amortization_method_enum = ', IF(NEW.amortization_method_enum IS NULL, 'NULL', CONCAT('"', NEW.amortization_method_enum, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', submittedon_userid = ', IF(NEW.submittedon_userid IS NULL, 'NULL', CONCAT('"', NEW.submittedon_userid, '"')), ', approvedon_date = ', IF(NEW.approvedon_date IS NULL, 'NULL', CONCAT('"', NEW.approvedon_date, '"')), ', approvedon_userid = ', IF(NEW.approvedon_userid IS NULL, 'NULL', CONCAT('"', NEW.approvedon_userid, '"')), ', expected_disbursedon_date = ', IF(NEW.expected_disbursedon_date IS NULL, 'NULL', CONCAT('"', NEW.expected_disbursedon_date, '"')), ', expected_firstrepaymenton_date = ', IF(NEW.expected_firstrepaymenton_date IS NULL, 'NULL', CONCAT('"', NEW.expected_firstrepaymenton_date, '"')), ', interest_calculated_from_date = ', IF(NEW.interest_calculated_from_date IS NULL, 'NULL', CONCAT('"', NEW.interest_calculated_from_date, '"')), ', disbursedon_date = ', IF(NEW.disbursedon_date IS NULL, 'NULL', CONCAT('"', NEW.disbursedon_date, '"')), ', disbursedon_userid = ', IF(NEW.disbursedon_userid IS NULL, 'NULL', CONCAT('"', NEW.disbursedon_userid, '"')), ', expected_maturedon_date = ', IF(NEW.expected_maturedon_date IS NULL, 'NULL', CONCAT('"', NEW.expected_maturedon_date, '"')), ', maturedon_date = ', IF(NEW.maturedon_date IS NULL, 'NULL', CONCAT('"', NEW.maturedon_date, '"')), ', closedon_date = ', IF(NEW.closedon_date IS NULL, 'NULL', CONCAT('"', NEW.closedon_date, '"')), ', closedon_userid = ', IF(NEW.closedon_userid IS NULL, 'NULL', CONCAT('"', NEW.closedon_userid, '"')), ', total_charges_due_at_disbursement_derived = ', IF(NEW.total_charges_due_at_disbursement_derived IS NULL, 'NULL', CONCAT('"', NEW.total_charges_due_at_disbursement_derived, '"')), ', principal_disbursed_derived = ', IF(NEW.principal_disbursed_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_disbursed_derived, '"')), ', principal_repaid_derived = ', IF(NEW.principal_repaid_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_repaid_derived, '"')), ', principal_writtenoff_derived = ', IF(NEW.principal_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_writtenoff_derived, '"')), ', principal_outstanding_derived = ', IF(NEW.principal_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_outstanding_derived, '"')), ', interest_charged_derived = ', IF(NEW.interest_charged_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_charged_derived, '"')), ', interest_repaid_derived = ', IF(NEW.interest_repaid_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_repaid_derived, '"')), ', interest_waived_derived = ', IF(NEW.interest_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_waived_derived, '"')), ', interest_writtenoff_derived = ', IF(NEW.interest_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_writtenoff_derived, '"')), ', interest_outstanding_derived = ', IF(NEW.interest_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_outstanding_derived, '"')), ', fee_charges_charged_derived = ', IF(NEW.fee_charges_charged_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_charged_derived, '"')), ', fee_charges_repaid_derived = ', IF(NEW.fee_charges_repaid_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_repaid_derived, '"')), ', fee_charges_waived_derived = ', IF(NEW.fee_charges_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_waived_derived, '"')), ', fee_charges_writtenoff_derived = ', IF(NEW.fee_charges_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_writtenoff_derived, '"')), ', fee_charges_outstanding_derived = ', IF(NEW.fee_charges_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_outstanding_derived, '"')), ', penalty_charges_charged_derived = ', IF(NEW.penalty_charges_charged_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_charged_derived, '"')), ', penalty_charges_repaid_derived = ', IF(NEW.penalty_charges_repaid_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_repaid_derived, '"')), ', penalty_charges_waived_derived = ', IF(NEW.penalty_charges_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_waived_derived, '"')), ', penalty_charges_writtenoff_derived = ', IF(NEW.penalty_charges_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_writtenoff_derived, '"')), ', penalty_charges_outstanding_derived = ', IF(NEW.penalty_charges_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_outstanding_derived, '"')), ', total_expected_repayment_derived = ', IF(NEW.total_expected_repayment_derived IS NULL, 'NULL', CONCAT('"', NEW.total_expected_repayment_derived, '"')), ', total_repayment_derived = ', IF(NEW.total_repayment_derived IS NULL, 'NULL', CONCAT('"', NEW.total_repayment_derived, '"')), ', total_expected_costofloan_derived = ', IF(NEW.total_expected_costofloan_derived IS NULL, 'NULL', CONCAT('"', NEW.total_expected_costofloan_derived, '"')), ', total_costofloan_derived = ', IF(NEW.total_costofloan_derived IS NULL, 'NULL', CONCAT('"', NEW.total_costofloan_derived, '"')), ', total_waived_derived = ', IF(NEW.total_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.total_waived_derived, '"')), ', total_writtenoff_derived = ', IF(NEW.total_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.total_writtenoff_derived, '"')), ', total_outstanding_derived = ', IF(NEW.total_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.total_outstanding_derived, '"')), ', total_overpaid_derived = ', IF(NEW.total_overpaid_derived IS NULL, 'NULL', CONCAT('"', NEW.total_overpaid_derived, '"')), ', rejectedon_date = ', IF(NEW.rejectedon_date IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_date, '"')), ', rejectedon_userid = ', IF(NEW.rejectedon_userid IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_userid, '"')), ', rescheduledon_date = ', IF(NEW.rescheduledon_date IS NULL, 'NULL', CONCAT('"', NEW.rescheduledon_date, '"')), ', rescheduledon_userid = ', IF(NEW.rescheduledon_userid IS NULL, 'NULL', CONCAT('"', NEW.rescheduledon_userid, '"')), ', withdrawnon_date = ', IF(NEW.withdrawnon_date IS NULL, 'NULL', CONCAT('"', NEW.withdrawnon_date, '"')), ', withdrawnon_userid = ', IF(NEW.withdrawnon_userid IS NULL, 'NULL', CONCAT('"', NEW.withdrawnon_userid, '"')), ', writtenoffon_date = ', IF(NEW.writtenoffon_date IS NULL, 'NULL', CONCAT('"', NEW.writtenoffon_date, '"')), ', loan_transaction_strategy_id = ', IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_strategy_id, '"')), ', sync_disbursement_with_meeting = ', IF(NEW.sync_disbursement_with_meeting IS NULL, 'NULL', CONCAT('"', NEW.sync_disbursement_with_meeting, '"')), ', loan_counter = ', IF(NEW.loan_counter IS NULL, 'NULL', CONCAT('"', NEW.loan_counter, '"')), ', loan_product_counter = ', IF(NEW.loan_product_counter IS NULL, 'NULL', CONCAT('"', NEW.loan_product_counter, '"')), ', fixed_emi_amount = ', IF(NEW.fixed_emi_amount IS NULL, 'NULL', CONCAT('"', NEW.fixed_emi_amount, '"')), ', max_outstanding_loan_balance = ', IF(NEW.max_outstanding_loan_balance IS NULL, 'NULL', CONCAT('"', NEW.max_outstanding_loan_balance, '"')), ', grace_on_arrears_ageing = ', IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL', CONCAT('"', NEW.grace_on_arrears_ageing, '"')), ', is_npa = ', IF(NEW.is_npa IS NULL, 'NULL', CONCAT('"', NEW.is_npa, '"')), ', total_recovered_derived = ', IF(NEW.total_recovered_derived IS NULL, 'NULL', CONCAT('"', NEW.total_recovered_derived, '"')), ', accrued_till = ', IF(NEW.accrued_till IS NULL, 'NULL', CONCAT('"', NEW.accrued_till, '"')), ', interest_recalcualated_on = ', IF(NEW.interest_recalcualated_on IS NULL, 'NULL', CONCAT('"', NEW.interest_recalcualated_on, '"')), ', days_in_month_enum = ', IF(NEW.days_in_month_enum IS NULL, 'NULL', CONCAT('"', NEW.days_in_month_enum, '"')), ', days_in_year_enum = ', IF(NEW.days_in_year_enum IS NULL, 'NULL', CONCAT('"', NEW.days_in_year_enum, '"')), ', interest_recalculation_enabled = ', IF(NEW.interest_recalculation_enabled IS NULL, 'NULL', CONCAT('"', NEW.interest_recalculation_enabled, '"')), ', guarantee_amount_derived = ', IF(NEW.guarantee_amount_derived IS NULL, 'NULL', CONCAT('"', NEW.guarantee_amount_derived, '"')), ', create_standing_instruction_at_disbursement = ', IF(NEW.create_standing_instruction_at_disbursement IS NULL, 'NULL', CONCAT('"', NEW.create_standing_instruction_at_disbursement, '"')), ', version = ', IF(NEW.version IS NULL, 'NULL', CONCAT('"', NEW.version, '"')), ', writeoff_reason_cv_id = ', IF(NEW.writeoff_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.writeoff_reason_cv_id, '"')), ', loan_sub_status_id = ', IF(NEW.loan_sub_status_id IS NULL, 'NULL', CONCAT('"', NEW.loan_sub_status_id, '"')), ', is_topup = ', IF(NEW.is_topup IS NULL, 'NULL', CONCAT('"', NEW.is_topup, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NEW.fund_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NEW.loan_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loanpurpose_cv_id', OLD.loanpurpose_cv_id, NEW.loanpurpose_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_status_id', OLD.loan_status_id, NEW.loan_status_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_type_enum', OLD.loan_type_enum, NEW.loan_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount_proposed', OLD.principal_amount_proposed, NEW.principal_amount_proposed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_principal', OLD.approved_principal, NEW.approved_principal);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate', OLD.is_floating_interest_rate, NEW.is_floating_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NEW.interest_rate_differential);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NEW.nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NEW.interest_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NEW.annual_nominal_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NEW.allow_partial_period_interest_calcualtion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_frequency', OLD.term_frequency, NEW.term_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_period_frequency_enum', OLD.term_period_frequency_enum, NEW.term_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NEW.repayment_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NEW.number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NEW.grace_on_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NEW.recurring_moratorium_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NEW.grace_on_interest_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NEW.grace_interest_free_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disbursedon_date', OLD.expected_disbursedon_date, NEW.expected_disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_firstrepaymenton_date', OLD.expected_firstrepaymenton_date, NEW.expected_firstrepaymenton_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_from_date', OLD.interest_calculated_from_date, NEW.interest_calculated_from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NEW.disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_userid', OLD.disbursedon_userid, NEW.disbursedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_maturedon_date', OLD.expected_maturedon_date, NEW.expected_maturedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maturedon_date', OLD.maturedon_date, NEW.maturedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_charges_due_at_disbursement_derived', OLD.total_charges_due_at_disbursement_derived, NEW.total_charges_due_at_disbursement_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_disbursed_derived', OLD.principal_disbursed_derived, NEW.principal_disbursed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_repaid_derived', OLD.principal_repaid_derived, NEW.principal_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NEW.principal_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_outstanding_derived', OLD.principal_outstanding_derived, NEW.principal_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_charged_derived', OLD.interest_charged_derived, NEW.interest_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_repaid_derived', OLD.interest_repaid_derived, NEW.interest_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NEW.interest_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NEW.interest_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_outstanding_derived', OLD.interest_outstanding_derived, NEW.interest_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_charged_derived', OLD.fee_charges_charged_derived, NEW.fee_charges_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_repaid_derived', OLD.fee_charges_repaid_derived, NEW.fee_charges_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NEW.fee_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NEW.fee_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_outstanding_derived', OLD.fee_charges_outstanding_derived, NEW.fee_charges_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_charged_derived', OLD.penalty_charges_charged_derived, NEW.penalty_charges_charged_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_repaid_derived', OLD.penalty_charges_repaid_derived, NEW.penalty_charges_repaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NEW.penalty_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NEW.penalty_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_outstanding_derived', OLD.penalty_charges_outstanding_derived, NEW.penalty_charges_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_repayment_derived', OLD.total_expected_repayment_derived, NEW.total_expected_repayment_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_repayment_derived', OLD.total_repayment_derived, NEW.total_repayment_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_expected_costofloan_derived', OLD.total_expected_costofloan_derived, NEW.total_expected_costofloan_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_costofloan_derived', OLD.total_costofloan_derived, NEW.total_costofloan_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_waived_derived', OLD.total_waived_derived, NEW.total_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_writtenoff_derived', OLD.total_writtenoff_derived, NEW.total_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_outstanding_derived', OLD.total_outstanding_derived, NEW.total_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overpaid_derived', OLD.total_overpaid_derived, NEW.total_overpaid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_date', OLD.rescheduledon_date, NEW.rescheduledon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rescheduledon_userid', OLD.rescheduledon_userid, NEW.rescheduledon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NEW.withdrawnon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NEW.withdrawnon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writtenoffon_date', OLD.writtenoffon_date, NEW.writtenoffon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_disbursement_with_meeting', OLD.sync_disbursement_with_meeting, NEW.sync_disbursement_with_meeting);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_counter', OLD.loan_counter, NEW.loan_counter);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_counter', OLD.loan_product_counter, NEW.loan_product_counter);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fixed_emi_amount', OLD.fixed_emi_amount, NEW.fixed_emi_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NEW.max_outstanding_loan_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_npa', OLD.is_npa, NEW.is_npa);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_recovered_derived', OLD.total_recovered_derived, NEW.total_recovered_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrued_till', OLD.accrued_till, NEW.accrued_till);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalcualated_on', OLD.interest_recalcualated_on, NEW.interest_recalcualated_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NEW.days_in_month_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NEW.days_in_year_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NEW.interest_recalculation_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'guarantee_amount_derived', OLD.guarantee_amount_derived, NEW.guarantee_amount_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'create_standing_instruction_at_disbursement', OLD.create_standing_instruction_at_disbursement, NEW.create_standing_instruction_at_disbursement);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'writeoff_reason_cv_id', OLD.writeoff_reason_cv_id, NEW.writeoff_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_sub_status_id', OLD.loan_sub_status_id, NEW.loan_sub_status_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_topup', OLD.is_topup, NEW.is_topup);
  END%%


DROP TRIGGER IF EXISTS m_loan_arrears_aging_d%%
CREATE TRIGGER `m_loan_arrears_aging_d`
BEFORE DELETE
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_arrears_aging WHERE loan_id = "', OLD.loan_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_arrears_aging', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_overdue_derived', OLD.principal_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_overdue_derived', OLD.interest_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', OLD.fee_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', OLD.penalty_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_derived', OLD.total_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_since_date_derived', OLD.overdue_since_date_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_arrears_aging_i%%
CREATE TRIGGER `m_loan_arrears_aging_i`
AFTER INSERT
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_arrears_aging(loan_id, principal_overdue_derived, interest_overdue_derived, fee_charges_overdue_derived, penalty_charges_overdue_derived, total_overdue_derived, overdue_since_date_derived) VALUES(', IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.principal_overdue_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_overdue_derived, '", ')), IF(NEW.interest_overdue_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_overdue_derived, '", ')), IF(NEW.fee_charges_overdue_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_overdue_derived, '", ')), IF(NEW.penalty_charges_overdue_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_overdue_derived, '", ')), IF(NEW.total_overdue_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_overdue_derived, '", ')), IF(NEW.overdue_since_date_derived IS NULL, 'NULL', CONCAT('"', NEW.overdue_since_date_derived, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_arrears_aging', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_overdue_derived', NEW.principal_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_overdue_derived', NEW.interest_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', NEW.fee_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', NEW.penalty_charges_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdue_derived', NEW.total_overdue_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_since_date_derived', NEW.overdue_since_date_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_arrears_aging_u%%
CREATE TRIGGER `m_loan_arrears_aging_u`
AFTER UPDATE
  ON m_loan_arrears_aging
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_arrears_aging SET loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', principal_overdue_derived = ', IF(NEW.principal_overdue_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_overdue_derived, '"')), ', interest_overdue_derived = ', IF(NEW.interest_overdue_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_overdue_derived, '"')), ', fee_charges_overdue_derived = ', IF(NEW.fee_charges_overdue_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_overdue_derived, '"')), ', penalty_charges_overdue_derived = ', IF(NEW.penalty_charges_overdue_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_overdue_derived, '"')), ', total_overdue_derived = ', IF(NEW.total_overdue_derived IS NULL, 'NULL', CONCAT('"', NEW.total_overdue_derived, '"')), ', overdue_since_date_derived = ', IF(NEW.overdue_since_date_derived IS NULL, 'NULL', CONCAT('"', NEW.overdue_since_date_derived, '"')), ' WHERE loan_id = "', NEW.loan_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_arrears_aging', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_overdue_derived', OLD.principal_overdue_derived, NEW.principal_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_overdue_derived', OLD.interest_overdue_derived, NEW.interest_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_overdue_derived', OLD.fee_charges_overdue_derived, NEW.fee_charges_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_overdue_derived', OLD.penalty_charges_overdue_derived, NEW.penalty_charges_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdue_derived', OLD.total_overdue_derived, NEW.total_overdue_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_since_date_derived', OLD.overdue_since_date_derived, NEW.overdue_since_date_derived);
  END%%


DROP TRIGGER IF EXISTS m_loan_charge_d%%
CREATE TRIGGER `m_loan_charge_d`
BEFORE DELETE
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', OLD.due_for_collection_as_of_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_charge_i%%
CREATE TRIGGER `m_loan_charge_i`
AFTER INSERT
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_charge(id, loan_id, charge_id, is_penalty, charge_time_enum, due_for_collection_as_of_date, charge_calculation_enum, charge_payment_mode_enum, calculation_percentage, calculation_on_amount, charge_amount_or_percentage, amount, amount_paid_derived, amount_waived_derived, amount_writtenoff_derived, amount_outstanding_derived, is_paid_derived, waived, min_cap, max_cap, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_id, '", ')), IF(NEW.is_penalty IS NULL, 'NULL, ', CONCAT('"', NEW.is_penalty, '", ')), IF(NEW.charge_time_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_time_enum, '", ')), IF(NEW.due_for_collection_as_of_date IS NULL, 'NULL, ', CONCAT('"', NEW.due_for_collection_as_of_date, '", ')), IF(NEW.charge_calculation_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_calculation_enum, '", ')), IF(NEW.charge_payment_mode_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_payment_mode_enum, '", ')), IF(NEW.calculation_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_percentage, '", ')), IF(NEW.calculation_on_amount IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_on_amount, '", ')), IF(NEW.charge_amount_or_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.charge_amount_or_percentage, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid_derived, '", ')), IF(NEW.amount_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_waived_derived, '", ')), IF(NEW.amount_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_writtenoff_derived, '", ')), IF(NEW.amount_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_outstanding_derived, '", ')), IF(NEW.is_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.is_paid_derived, '", ')), IF(NEW.waived IS NULL, 'NULL, ', CONCAT('"', NEW.waived, '", ')), IF(NEW.min_cap IS NULL, 'NULL, ', CONCAT('"', NEW.min_cap, '", ')), IF(NEW.max_cap IS NULL, 'NULL, ', CONCAT('"', NEW.max_cap, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', NEW.due_for_collection_as_of_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', NEW.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_charge_u%%
CREATE TRIGGER `m_loan_charge_u`
AFTER UPDATE
  ON m_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ', is_penalty = ', IF(NEW.is_penalty IS NULL, 'NULL', CONCAT('"', NEW.is_penalty, '"')), ', charge_time_enum = ', IF(NEW.charge_time_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_time_enum, '"')), ', due_for_collection_as_of_date = ', IF(NEW.due_for_collection_as_of_date IS NULL, 'NULL', CONCAT('"', NEW.due_for_collection_as_of_date, '"')), ', charge_calculation_enum = ', IF(NEW.charge_calculation_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_calculation_enum, '"')), ', charge_payment_mode_enum = ', IF(NEW.charge_payment_mode_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_payment_mode_enum, '"')), ', calculation_percentage = ', IF(NEW.calculation_percentage IS NULL, 'NULL', CONCAT('"', NEW.calculation_percentage, '"')), ', calculation_on_amount = ', IF(NEW.calculation_on_amount IS NULL, 'NULL', CONCAT('"', NEW.calculation_on_amount, '"')), ', charge_amount_or_percentage = ', IF(NEW.charge_amount_or_percentage IS NULL, 'NULL', CONCAT('"', NEW.charge_amount_or_percentage, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_paid_derived = ', IF(NEW.amount_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_paid_derived, '"')), ', amount_waived_derived = ', IF(NEW.amount_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_waived_derived, '"')), ', amount_writtenoff_derived = ', IF(NEW.amount_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_writtenoff_derived, '"')), ', amount_outstanding_derived = ', IF(NEW.amount_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_outstanding_derived, '"')), ', is_paid_derived = ', IF(NEW.is_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.is_paid_derived, '"')), ', waived = ', IF(NEW.waived IS NULL, 'NULL', CONCAT('"', NEW.waived, '"')), ', min_cap = ', IF(NEW.min_cap IS NULL, 'NULL', CONCAT('"', NEW.min_cap, '"')), ', max_cap = ', IF(NEW.max_cap IS NULL, 'NULL', CONCAT('"', NEW.max_cap, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_for_collection_as_of_date', OLD.due_for_collection_as_of_date, NEW.due_for_collection_as_of_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NEW.charge_amount_or_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_loan_charge_paid_by_d%%
CREATE TRIGGER `m_loan_charge_paid_by_d`
BEFORE DELETE
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_charge_paid_by WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment_number', OLD.installment_number, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_charge_paid_by_i%%
CREATE TRIGGER `m_loan_charge_paid_by_i`
AFTER INSERT
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_charge_paid_by(id, loan_transaction_id, loan_charge_id, amount, installment_number) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_id, '", ')), IF(NEW.loan_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_charge_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.installment_number IS NULL, 'NULL', CONCAT('"', NEW.installment_number, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment_number', NEW.installment_number, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_charge_paid_by_u%%
CREATE TRIGGER `m_loan_charge_paid_by_u`
AFTER UPDATE
  ON m_loan_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_charge_paid_by SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_transaction_id = ', IF(NEW.loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_id, '"')), ', loan_charge_id = ', IF(NEW.loan_charge_id IS NULL, 'NULL', CONCAT('"', NEW.loan_charge_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', installment_number = ', IF(NEW.installment_number IS NULL, 'NULL', CONCAT('"', NEW.installment_number, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment_number', OLD.installment_number, NEW.installment_number);
  END%%


DROP TRIGGER IF EXISTS m_loan_collateral_d%%
CREATE TRIGGER `m_loan_collateral_d`
BEFORE DELETE
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_collateral WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_collateral', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_cv_id', OLD.type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_collateral_i%%
CREATE TRIGGER `m_loan_collateral_i`
AFTER INSERT
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_collateral(id, loan_id, type_cv_id, value, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.type_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.type_cv_id, '", ')), IF(NEW.value IS NULL, 'NULL, ', CONCAT('"', NEW.value, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_collateral', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_cv_id', NEW.type_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_collateral_u%%
CREATE TRIGGER `m_loan_collateral_u`
AFTER UPDATE
  ON m_loan_collateral
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_collateral SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', type_cv_id = ', IF(NEW.type_cv_id IS NULL, 'NULL', CONCAT('"', NEW.type_cv_id, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_collateral', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_cv_id', OLD.type_cv_id, NEW.type_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_loan_disbursement_detail_d%%
CREATE TRIGGER `m_loan_disbursement_detail_d`
BEFORE DELETE
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_disbursement_detail WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_disbursement_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disburse_date', OLD.expected_disburse_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal', OLD.principal, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_disbursement_detail_i%%
CREATE TRIGGER `m_loan_disbursement_detail_i`
AFTER INSERT
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_disbursement_detail(id, loan_id, expected_disburse_date, disbursedon_date, principal) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.expected_disburse_date IS NULL, 'NULL, ', CONCAT('"', NEW.expected_disburse_date, '", ')), IF(NEW.disbursedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.disbursedon_date, '", ')), IF(NEW.principal IS NULL, 'NULL', CONCAT('"', NEW.principal, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_disbursement_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expected_disburse_date', NEW.expected_disburse_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursedon_date', NEW.disbursedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal', NEW.principal, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_disbursement_detail_u%%
CREATE TRIGGER `m_loan_disbursement_detail_u`
AFTER UPDATE
  ON m_loan_disbursement_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_disbursement_detail SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', expected_disburse_date = ', IF(NEW.expected_disburse_date IS NULL, 'NULL', CONCAT('"', NEW.expected_disburse_date, '"')), ', disbursedon_date = ', IF(NEW.disbursedon_date IS NULL, 'NULL', CONCAT('"', NEW.disbursedon_date, '"')), ', principal = ', IF(NEW.principal IS NULL, 'NULL', CONCAT('"', NEW.principal, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_disbursement_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expected_disburse_date', OLD.expected_disburse_date, NEW.expected_disburse_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursedon_date', OLD.disbursedon_date, NEW.disbursedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal', OLD.principal, NEW.principal);
  END%%


DROP TRIGGER IF EXISTS m_loan_installment_charge_d%%
CREATE TRIGGER `m_loan_installment_charge_d`
BEFORE DELETE
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_installment_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_date', OLD.due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_through_charge_payment', OLD.amount_through_charge_payment, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_installment_charge_i%%
CREATE TRIGGER `m_loan_installment_charge_i`
AFTER INSERT
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_installment_charge(id, loan_charge_id, loan_schedule_id, due_date, amount, amount_paid_derived, amount_waived_derived, amount_writtenoff_derived, amount_outstanding_derived, is_paid_derived, waived, amount_through_charge_payment) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_charge_id, '", ')), IF(NEW.loan_schedule_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_schedule_id, '", ')), IF(NEW.due_date IS NULL, 'NULL, ', CONCAT('"', NEW.due_date, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid_derived, '", ')), IF(NEW.amount_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_waived_derived, '", ')), IF(NEW.amount_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_writtenoff_derived, '", ')), IF(NEW.amount_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_outstanding_derived, '", ')), IF(NEW.is_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.is_paid_derived, '", ')), IF(NEW.waived IS NULL, 'NULL, ', CONCAT('"', NEW.waived, '", ')), IF(NEW.amount_through_charge_payment IS NULL, 'NULL', CONCAT('"', NEW.amount_through_charge_payment, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_schedule_id', NEW.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'due_date', NEW.due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_through_charge_payment', NEW.amount_through_charge_payment, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_installment_charge_u%%
CREATE TRIGGER `m_loan_installment_charge_u`
AFTER UPDATE
  ON m_loan_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_installment_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_charge_id = ', IF(NEW.loan_charge_id IS NULL, 'NULL', CONCAT('"', NEW.loan_charge_id, '"')), ', loan_schedule_id = ', IF(NEW.loan_schedule_id IS NULL, 'NULL', CONCAT('"', NEW.loan_schedule_id, '"')), ', due_date = ', IF(NEW.due_date IS NULL, 'NULL', CONCAT('"', NEW.due_date, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_paid_derived = ', IF(NEW.amount_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_paid_derived, '"')), ', amount_waived_derived = ', IF(NEW.amount_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_waived_derived, '"')), ', amount_writtenoff_derived = ', IF(NEW.amount_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_writtenoff_derived, '"')), ', amount_outstanding_derived = ', IF(NEW.amount_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_outstanding_derived, '"')), ', is_paid_derived = ', IF(NEW.is_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.is_paid_derived, '"')), ', waived = ', IF(NEW.waived IS NULL, 'NULL', CONCAT('"', NEW.waived, '"')), ', amount_through_charge_payment = ', IF(NEW.amount_through_charge_payment IS NULL, 'NULL', CONCAT('"', NEW.amount_through_charge_payment, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NEW.loan_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'due_date', OLD.due_date, NEW.due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_through_charge_payment', OLD.amount_through_charge_payment, NEW.amount_through_charge_payment);
  END%%


DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_d%%
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_d`
BEFORE DELETE
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_interest_recalculation_additional_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_interest_recalculation_additional_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'effective_date', OLD.effective_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_i%%
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_i`
AFTER INSERT
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_interest_recalculation_additional_details(id, loan_repayment_schedule_id, effective_date, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_repayment_schedule_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_repayment_schedule_id, '", ')), IF(NEW.effective_date IS NULL, 'NULL, ', CONCAT('"', NEW.effective_date, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_interest_recalculation_additional_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', NEW.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'effective_date', NEW.effective_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_interest_recalculation_additional_details_u%%
CREATE TRIGGER `m_loan_interest_recalculation_additional_details_u`
AFTER UPDATE
  ON m_loan_interest_recalculation_additional_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_interest_recalculation_additional_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_repayment_schedule_id = ', IF(NEW.loan_repayment_schedule_id IS NULL, 'NULL', CONCAT('"', NEW.loan_repayment_schedule_id, '"')), ', effective_date = ', IF(NEW.effective_date IS NULL, 'NULL', CONCAT('"', NEW.effective_date, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_interest_recalculation_additional_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NEW.loan_repayment_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'effective_date', OLD.effective_date, NEW.effective_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_d%%
CREATE TRIGGER `m_loan_officer_assignment_history_d`
BEFORE DELETE
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_officer_assignment_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_i%%
CREATE TRIGGER `m_loan_officer_assignment_history_i`
AFTER INSERT
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_officer_assignment_history(id, loan_id, loan_officer_id, start_date, end_date, createdby_id, created_date, lastmodified_date, lastmodifiedby_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.loan_officer_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_officer_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_officer_id', NEW.loan_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_officer_assignment_history_u%%
CREATE TRIGGER `m_loan_officer_assignment_history_u`
AFTER UPDATE
  ON m_loan_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_officer_assignment_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', loan_officer_id = ', IF(NEW.loan_officer_id IS NULL, 'NULL', CONCAT('"', NEW.loan_officer_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_officer_id', OLD.loan_officer_id, NEW.loan_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_d%%
CREATE TRIGGER `m_loan_overdue_installment_charge_d`
BEFORE DELETE
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_overdue_installment_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_overdue_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'frequency_number', OLD.frequency_number, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_i%%
CREATE TRIGGER `m_loan_overdue_installment_charge_i`
AFTER INSERT
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_overdue_installment_charge(id, loan_charge_id, loan_schedule_id, frequency_number) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_charge_id, '", ')), IF(NEW.loan_schedule_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_schedule_id, '", ')), IF(NEW.frequency_number IS NULL, 'NULL', CONCAT('"', NEW.frequency_number, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_overdue_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_schedule_id', NEW.loan_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'frequency_number', NEW.frequency_number, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_overdue_installment_charge_u%%
CREATE TRIGGER `m_loan_overdue_installment_charge_u`
AFTER UPDATE
  ON m_loan_overdue_installment_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_overdue_installment_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_charge_id = ', IF(NEW.loan_charge_id IS NULL, 'NULL', CONCAT('"', NEW.loan_charge_id, '"')), ', loan_schedule_id = ', IF(NEW.loan_schedule_id IS NULL, 'NULL', CONCAT('"', NEW.loan_schedule_id, '"')), ', frequency_number = ', IF(NEW.frequency_number IS NULL, 'NULL', CONCAT('"', NEW.frequency_number, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_overdue_installment_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_schedule_id', OLD.loan_schedule_id, NEW.loan_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'frequency_number', OLD.frequency_number, NEW.frequency_number);
  END%%


DROP TRIGGER IF EXISTS m_loan_paid_in_advance_d%%
CREATE TRIGGER `m_loan_paid_in_advance_d`
BEFORE DELETE
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_paid_in_advance WHERE loan_id = "', OLD.loan_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_paid_in_advance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_in_advance_derived', OLD.principal_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_in_advance_derived', OLD.interest_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', OLD.fee_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', OLD.penalty_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_in_advance_derived', OLD.total_in_advance_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_paid_in_advance_i%%
CREATE TRIGGER `m_loan_paid_in_advance_i`
AFTER INSERT
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_paid_in_advance(loan_id, principal_in_advance_derived, interest_in_advance_derived, fee_charges_in_advance_derived, penalty_charges_in_advance_derived, total_in_advance_derived) VALUES(', IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.principal_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_in_advance_derived, '", ')), IF(NEW.interest_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_in_advance_derived, '", ')), IF(NEW.fee_charges_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_in_advance_derived, '", ')), IF(NEW.penalty_charges_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_in_advance_derived, '", ')), IF(NEW.total_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.total_in_advance_derived, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_paid_in_advance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_in_advance_derived', NEW.principal_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_in_advance_derived', NEW.interest_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', NEW.fee_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', NEW.penalty_charges_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_in_advance_derived', NEW.total_in_advance_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_paid_in_advance_u%%
CREATE TRIGGER `m_loan_paid_in_advance_u`
AFTER UPDATE
  ON m_loan_paid_in_advance
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_paid_in_advance SET loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', principal_in_advance_derived = ', IF(NEW.principal_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_in_advance_derived, '"')), ', interest_in_advance_derived = ', IF(NEW.interest_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_in_advance_derived, '"')), ', fee_charges_in_advance_derived = ', IF(NEW.fee_charges_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_in_advance_derived, '"')), ', penalty_charges_in_advance_derived = ', IF(NEW.penalty_charges_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_in_advance_derived, '"')), ', total_in_advance_derived = ', IF(NEW.total_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.total_in_advance_derived, '"')), ' WHERE loan_id = "', NEW.loan_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_paid_in_advance', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_in_advance_derived', OLD.principal_in_advance_derived, NEW.principal_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_in_advance_derived', OLD.interest_in_advance_derived, NEW.interest_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_in_advance_derived', OLD.fee_charges_in_advance_derived, NEW.fee_charges_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_in_advance_derived', OLD.penalty_charges_in_advance_derived, NEW.penalty_charges_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_in_advance_derived', OLD.total_in_advance_derived, NEW.total_in_advance_derived);
  END%%


DROP TRIGGER IF EXISTS m_loan_recalculation_details_d%%
CREATE TRIGGER `m_loan_recalculation_details_d`
BEFORE DELETE
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_recalculation_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_recalculation_details_i%%
CREATE TRIGGER `m_loan_recalculation_details_i`
AFTER INSERT
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_recalculation_details(id, loan_id, compound_type_enum, reschedule_strategy_enum, rest_frequency_type_enum, rest_frequency_interval, compounding_frequency_type_enum, compounding_frequency_interval, rest_frequency_nth_day_enum, rest_frequency_on_day, rest_frequency_weekday_enum, compounding_frequency_nth_day_enum, compounding_frequency_on_day, is_compounding_to_be_posted_as_transaction, compounding_frequency_weekday_enum, allow_compounding_on_eod) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.compound_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compound_type_enum, '", ')), IF(NEW.reschedule_strategy_enum IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_strategy_enum, '", ')), IF(NEW.rest_frequency_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_type_enum, '", ')), IF(NEW.rest_frequency_interval IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_interval, '", ')), IF(NEW.compounding_frequency_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_type_enum, '", ')), IF(NEW.compounding_frequency_interval IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_interval, '", ')), IF(NEW.rest_frequency_nth_day_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_nth_day_enum, '", ')), IF(NEW.rest_frequency_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_on_day, '", ')), IF(NEW.rest_frequency_weekday_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_weekday_enum, '", ')), IF(NEW.compounding_frequency_nth_day_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_nth_day_enum, '", ')), IF(NEW.compounding_frequency_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_on_day, '", ')), IF(NEW.is_compounding_to_be_posted_as_transaction IS NULL, 'NULL, ', CONCAT('"', NEW.is_compounding_to_be_posted_as_transaction, '", ')), IF(NEW.compounding_frequency_weekday_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_weekday_enum, '", ')), IF(NEW.allow_compounding_on_eod IS NULL, 'NULL', CONCAT('"', NEW.allow_compounding_on_eod, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compound_type_enum', NEW.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', NEW.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', NEW.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_interval', NEW.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', NEW.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_interval', NEW.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', NEW.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_on_day', NEW.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', NEW.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', NEW.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', NEW.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', NEW.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', NEW.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', NEW.allow_compounding_on_eod, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_recalculation_details_u%%
CREATE TRIGGER `m_loan_recalculation_details_u`
AFTER UPDATE
  ON m_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_recalculation_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', compound_type_enum = ', IF(NEW.compound_type_enum IS NULL, 'NULL', CONCAT('"', NEW.compound_type_enum, '"')), ', reschedule_strategy_enum = ', IF(NEW.reschedule_strategy_enum IS NULL, 'NULL', CONCAT('"', NEW.reschedule_strategy_enum, '"')), ', rest_frequency_type_enum = ', IF(NEW.rest_frequency_type_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_type_enum, '"')), ', rest_frequency_interval = ', IF(NEW.rest_frequency_interval IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_interval, '"')), ', compounding_frequency_type_enum = ', IF(NEW.compounding_frequency_type_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_type_enum, '"')), ', compounding_frequency_interval = ', IF(NEW.compounding_frequency_interval IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_interval, '"')), ', rest_frequency_nth_day_enum = ', IF(NEW.rest_frequency_nth_day_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_nth_day_enum, '"')), ', rest_frequency_on_day = ', IF(NEW.rest_frequency_on_day IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_on_day, '"')), ', rest_frequency_weekday_enum = ', IF(NEW.rest_frequency_weekday_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_weekday_enum, '"')), ', compounding_frequency_nth_day_enum = ', IF(NEW.compounding_frequency_nth_day_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_nth_day_enum, '"')), ', compounding_frequency_on_day = ', IF(NEW.compounding_frequency_on_day IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_on_day, '"')), ', is_compounding_to_be_posted_as_transaction = ', IF(NEW.is_compounding_to_be_posted_as_transaction IS NULL, 'NULL', CONCAT('"', NEW.is_compounding_to_be_posted_as_transaction, '"')), ', compounding_frequency_weekday_enum = ', IF(NEW.compounding_frequency_weekday_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_weekday_enum, '"')), ', allow_compounding_on_eod = ', IF(NEW.allow_compounding_on_eod IS NULL, 'NULL', CONCAT('"', NEW.allow_compounding_on_eod, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NEW.compound_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NEW.reschedule_strategy_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NEW.rest_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NEW.rest_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NEW.compounding_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NEW.compounding_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NEW.rest_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NEW.rest_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NEW.rest_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NEW.compounding_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NEW.compounding_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NEW.is_compounding_to_be_posted_as_transaction);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NEW.compounding_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NEW.allow_compounding_on_eod);
  END%%


DROP TRIGGER IF EXISTS m_loan_repayment_schedule_d%%
CREATE TRIGGER `m_loan_repayment_schedule_d`
BEFORE DELETE
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_repayment_schedule WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_repayment_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_completed_derived', OLD.principal_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_completed_derived', OLD.interest_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_interest_derived', OLD.accrual_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', OLD.fee_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', OLD.accrual_fee_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', OLD.penalty_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', OLD.accrual_penalty_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculated_interest_component', OLD.recalculated_interest_component, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_i%%
CREATE TRIGGER `m_loan_repayment_schedule_i`
AFTER INSERT
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_repayment_schedule(id, loan_id, fromdate, duedate, installment, principal_amount, principal_completed_derived, principal_writtenoff_derived, interest_amount, interest_completed_derived, interest_writtenoff_derived, interest_waived_derived, accrual_interest_derived, fee_charges_amount, fee_charges_completed_derived, fee_charges_writtenoff_derived, fee_charges_waived_derived, accrual_fee_charges_derived, penalty_charges_amount, penalty_charges_completed_derived, penalty_charges_writtenoff_derived, penalty_charges_waived_derived, accrual_penalty_charges_derived, total_paid_in_advance_derived, total_paid_late_derived, completed_derived, obligations_met_on_date, createdby_id, created_date, lastmodified_date, lastmodifiedby_id, recalculated_interest_component) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.fromdate IS NULL, 'NULL, ', CONCAT('"', NEW.fromdate, '", ')), IF(NEW.duedate IS NULL, 'NULL, ', CONCAT('"', NEW.duedate, '", ')), IF(NEW.installment IS NULL, 'NULL, ', CONCAT('"', NEW.installment, '", ')), IF(NEW.principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.principal_amount, '", ')), IF(NEW.principal_completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_completed_derived, '", ')), IF(NEW.principal_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_writtenoff_derived, '", ')), IF(NEW.interest_amount IS NULL, 'NULL, ', CONCAT('"', NEW.interest_amount, '", ')), IF(NEW.interest_completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_completed_derived, '", ')), IF(NEW.interest_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_writtenoff_derived, '", ')), IF(NEW.interest_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_waived_derived, '", ')), IF(NEW.accrual_interest_derived IS NULL, 'NULL, ', CONCAT('"', NEW.accrual_interest_derived, '", ')), IF(NEW.fee_charges_amount IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_amount, '", ')), IF(NEW.fee_charges_completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_completed_derived, '", ')), IF(NEW.fee_charges_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_writtenoff_derived, '", ')), IF(NEW.fee_charges_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_waived_derived, '", ')), IF(NEW.accrual_fee_charges_derived IS NULL, 'NULL, ', CONCAT('"', NEW.accrual_fee_charges_derived, '", ')), IF(NEW.penalty_charges_amount IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_amount, '", ')), IF(NEW.penalty_charges_completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_completed_derived, '", ')), IF(NEW.penalty_charges_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_writtenoff_derived, '", ')), IF(NEW.penalty_charges_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_waived_derived, '", ')), IF(NEW.accrual_penalty_charges_derived IS NULL, 'NULL, ', CONCAT('"', NEW.accrual_penalty_charges_derived, '", ')), IF(NEW.total_paid_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_paid_in_advance_derived, '", ')), IF(NEW.total_paid_late_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_paid_late_derived, '", ')), IF(NEW.completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.completed_derived, '", ')), IF(NEW.obligations_met_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.obligations_met_on_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.recalculated_interest_component IS NULL, 'NULL', CONCAT('"', NEW.recalculated_interest_component, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_repayment_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_completed_derived', NEW.principal_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', NEW.principal_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_amount', NEW.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_completed_derived', NEW.interest_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', NEW.interest_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_waived_derived', NEW.interest_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_interest_derived', NEW.accrual_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_amount', NEW.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', NEW.fee_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', NEW.fee_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', NEW.fee_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', NEW.accrual_fee_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_amount', NEW.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', NEW.penalty_charges_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', NEW.penalty_charges_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', NEW.penalty_charges_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', NEW.accrual_penalty_charges_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', NEW.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_late_derived', NEW.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'completed_derived', NEW.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'obligations_met_on_date', NEW.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recalculated_interest_component', NEW.recalculated_interest_component, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_u%%
CREATE TRIGGER `m_loan_repayment_schedule_u`
AFTER UPDATE
  ON m_loan_repayment_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_repayment_schedule SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', fromdate = ', IF(NEW.fromdate IS NULL, 'NULL', CONCAT('"', NEW.fromdate, '"')), ', duedate = ', IF(NEW.duedate IS NULL, 'NULL', CONCAT('"', NEW.duedate, '"')), ', installment = ', IF(NEW.installment IS NULL, 'NULL', CONCAT('"', NEW.installment, '"')), ', principal_amount = ', IF(NEW.principal_amount IS NULL, 'NULL', CONCAT('"', NEW.principal_amount, '"')), ', principal_completed_derived = ', IF(NEW.principal_completed_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_completed_derived, '"')), ', principal_writtenoff_derived = ', IF(NEW.principal_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_writtenoff_derived, '"')), ', interest_amount = ', IF(NEW.interest_amount IS NULL, 'NULL', CONCAT('"', NEW.interest_amount, '"')), ', interest_completed_derived = ', IF(NEW.interest_completed_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_completed_derived, '"')), ', interest_writtenoff_derived = ', IF(NEW.interest_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_writtenoff_derived, '"')), ', interest_waived_derived = ', IF(NEW.interest_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_waived_derived, '"')), ', accrual_interest_derived = ', IF(NEW.accrual_interest_derived IS NULL, 'NULL', CONCAT('"', NEW.accrual_interest_derived, '"')), ', fee_charges_amount = ', IF(NEW.fee_charges_amount IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_amount, '"')), ', fee_charges_completed_derived = ', IF(NEW.fee_charges_completed_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_completed_derived, '"')), ', fee_charges_writtenoff_derived = ', IF(NEW.fee_charges_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_writtenoff_derived, '"')), ', fee_charges_waived_derived = ', IF(NEW.fee_charges_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_waived_derived, '"')), ', accrual_fee_charges_derived = ', IF(NEW.accrual_fee_charges_derived IS NULL, 'NULL', CONCAT('"', NEW.accrual_fee_charges_derived, '"')), ', penalty_charges_amount = ', IF(NEW.penalty_charges_amount IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_amount, '"')), ', penalty_charges_completed_derived = ', IF(NEW.penalty_charges_completed_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_completed_derived, '"')), ', penalty_charges_writtenoff_derived = ', IF(NEW.penalty_charges_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_writtenoff_derived, '"')), ', penalty_charges_waived_derived = ', IF(NEW.penalty_charges_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_waived_derived, '"')), ', accrual_penalty_charges_derived = ', IF(NEW.accrual_penalty_charges_derived IS NULL, 'NULL', CONCAT('"', NEW.accrual_penalty_charges_derived, '"')), ', total_paid_in_advance_derived = ', IF(NEW.total_paid_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.total_paid_in_advance_derived, '"')), ', total_paid_late_derived = ', IF(NEW.total_paid_late_derived IS NULL, 'NULL', CONCAT('"', NEW.total_paid_late_derived, '"')), ', completed_derived = ', IF(NEW.completed_derived IS NULL, 'NULL', CONCAT('"', NEW.completed_derived, '"')), ', obligations_met_on_date = ', IF(NEW.obligations_met_on_date IS NULL, 'NULL', CONCAT('"', NEW.obligations_met_on_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', recalculated_interest_component = ', IF(NEW.recalculated_interest_component IS NULL, 'NULL', CONCAT('"', NEW.recalculated_interest_component, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_repayment_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_completed_derived', OLD.principal_completed_derived, NEW.principal_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_writtenoff_derived', OLD.principal_writtenoff_derived, NEW.principal_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NEW.interest_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_completed_derived', OLD.interest_completed_derived, NEW.interest_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_writtenoff_derived', OLD.interest_writtenoff_derived, NEW.interest_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_waived_derived', OLD.interest_waived_derived, NEW.interest_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_interest_derived', OLD.accrual_interest_derived, NEW.accrual_interest_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NEW.fee_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_completed_derived', OLD.fee_charges_completed_derived, NEW.fee_charges_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_writtenoff_derived', OLD.fee_charges_writtenoff_derived, NEW.fee_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_waived_derived', OLD.fee_charges_waived_derived, NEW.fee_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_fee_charges_derived', OLD.accrual_fee_charges_derived, NEW.accrual_fee_charges_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NEW.penalty_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_completed_derived', OLD.penalty_charges_completed_derived, NEW.penalty_charges_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_writtenoff_derived', OLD.penalty_charges_writtenoff_derived, NEW.penalty_charges_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_waived_derived', OLD.penalty_charges_waived_derived, NEW.penalty_charges_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accrual_penalty_charges_derived', OLD.accrual_penalty_charges_derived, NEW.accrual_penalty_charges_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NEW.total_paid_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NEW.total_paid_late_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NEW.completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NEW.obligations_met_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculated_interest_component', OLD.recalculated_interest_component, NEW.recalculated_interest_component);
  END%%


DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_d%%
CREATE TRIGGER `m_loan_repayment_schedule_history_d`
BEFORE DELETE
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_repayment_schedule_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_repayment_schedule_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_i%%
CREATE TRIGGER `m_loan_repayment_schedule_history_i`
AFTER INSERT
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_repayment_schedule_history(id, loan_id, loan_reschedule_request_id, fromdate, duedate, installment, principal_amount, interest_amount, fee_charges_amount, penalty_charges_amount, createdby_id, created_date, lastmodified_date, lastmodifiedby_id, version) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.loan_reschedule_request_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_reschedule_request_id, '", ')), IF(NEW.fromdate IS NULL, 'NULL, ', CONCAT('"', NEW.fromdate, '", ')), IF(NEW.duedate IS NULL, 'NULL, ', CONCAT('"', NEW.duedate, '", ')), IF(NEW.installment IS NULL, 'NULL, ', CONCAT('"', NEW.installment, '", ')), IF(NEW.principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.principal_amount, '", ')), IF(NEW.interest_amount IS NULL, 'NULL, ', CONCAT('"', NEW.interest_amount, '", ')), IF(NEW.fee_charges_amount IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_amount, '", ')), IF(NEW.penalty_charges_amount IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_amount, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.version IS NULL, 'NULL', CONCAT('"', NEW.version, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_repayment_schedule_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', NEW.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_amount', NEW.interest_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_amount', NEW.fee_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_amount', NEW.penalty_charges_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_repayment_schedule_history_u%%
CREATE TRIGGER `m_loan_repayment_schedule_history_u`
AFTER UPDATE
  ON m_loan_repayment_schedule_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_repayment_schedule_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', loan_reschedule_request_id = ', IF(NEW.loan_reschedule_request_id IS NULL, 'NULL', CONCAT('"', NEW.loan_reschedule_request_id, '"')), ', fromdate = ', IF(NEW.fromdate IS NULL, 'NULL', CONCAT('"', NEW.fromdate, '"')), ', duedate = ', IF(NEW.duedate IS NULL, 'NULL', CONCAT('"', NEW.duedate, '"')), ', installment = ', IF(NEW.installment IS NULL, 'NULL', CONCAT('"', NEW.installment, '"')), ', principal_amount = ', IF(NEW.principal_amount IS NULL, 'NULL', CONCAT('"', NEW.principal_amount, '"')), ', interest_amount = ', IF(NEW.interest_amount IS NULL, 'NULL', CONCAT('"', NEW.interest_amount, '"')), ', fee_charges_amount = ', IF(NEW.fee_charges_amount IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_amount, '"')), ', penalty_charges_amount = ', IF(NEW.penalty_charges_amount IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_amount, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', version = ', IF(NEW.version IS NULL, 'NULL', CONCAT('"', NEW.version, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_repayment_schedule_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NEW.loan_reschedule_request_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_amount', OLD.interest_amount, NEW.interest_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_amount', OLD.fee_charges_amount, NEW.fee_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_amount', OLD.penalty_charges_amount, NEW.penalty_charges_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
  END%%


DROP TRIGGER IF EXISTS m_loan_reschedule_request_d%%
CREATE TRIGGER `m_loan_reschedule_request_d`
BEFORE DELETE
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_reschedule_request WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_reschedule_request', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_installment', OLD.reschedule_from_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_date', OLD.reschedule_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculate_interest', OLD.recalculate_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', OLD.reschedule_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_comment', OLD.reschedule_reason_comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_by_user_id', OLD.submitted_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_on_date', OLD.approved_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_by_user_id', OLD.approved_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_on_date', OLD.rejected_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_by_user_id', OLD.rejected_by_user_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_reschedule_request_i%%
CREATE TRIGGER `m_loan_reschedule_request_i`
AFTER INSERT
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_reschedule_request(id, loan_id, status_enum, reschedule_from_installment, reschedule_from_date, recalculate_interest, reschedule_reason_cv_id, reschedule_reason_comment, submitted_on_date, submitted_by_user_id, approved_on_date, approved_by_user_id, rejected_on_date, rejected_by_user_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.reschedule_from_installment IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_from_installment, '", ')), IF(NEW.reschedule_from_date IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_from_date, '", ')), IF(NEW.recalculate_interest IS NULL, 'NULL, ', CONCAT('"', NEW.recalculate_interest, '", ')), IF(NEW.reschedule_reason_cv_id IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_reason_cv_id, '", ')), IF(NEW.reschedule_reason_comment IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_reason_comment, '", ')), IF(NEW.submitted_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.submitted_on_date, '", ')), IF(NEW.submitted_by_user_id IS NULL, 'NULL, ', CONCAT('"', NEW.submitted_by_user_id, '", ')), IF(NEW.approved_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.approved_on_date, '", ')), IF(NEW.approved_by_user_id IS NULL, 'NULL, ', CONCAT('"', NEW.approved_by_user_id, '", ')), IF(NEW.rejected_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.rejected_on_date, '", ')), IF(NEW.rejected_by_user_id IS NULL, 'NULL', CONCAT('"', NEW.rejected_by_user_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_reschedule_request', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_from_installment', NEW.reschedule_from_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_from_date', NEW.reschedule_from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recalculate_interest', NEW.recalculate_interest, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', NEW.reschedule_reason_cv_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_reason_comment', NEW.reschedule_reason_comment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_on_date', NEW.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_by_user_id', NEW.submitted_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_on_date', NEW.approved_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_by_user_id', NEW.approved_by_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_on_date', NEW.rejected_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_by_user_id', NEW.rejected_by_user_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_reschedule_request_u%%
CREATE TRIGGER `m_loan_reschedule_request_u`
AFTER UPDATE
  ON m_loan_reschedule_request
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_reschedule_request SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', reschedule_from_installment = ', IF(NEW.reschedule_from_installment IS NULL, 'NULL', CONCAT('"', NEW.reschedule_from_installment, '"')), ', reschedule_from_date = ', IF(NEW.reschedule_from_date IS NULL, 'NULL', CONCAT('"', NEW.reschedule_from_date, '"')), ', recalculate_interest = ', IF(NEW.recalculate_interest IS NULL, 'NULL', CONCAT('"', NEW.recalculate_interest, '"')), ', reschedule_reason_cv_id = ', IF(NEW.reschedule_reason_cv_id IS NULL, 'NULL', CONCAT('"', NEW.reschedule_reason_cv_id, '"')), ', reschedule_reason_comment = ', IF(NEW.reschedule_reason_comment IS NULL, 'NULL', CONCAT('"', NEW.reschedule_reason_comment, '"')), ', submitted_on_date = ', IF(NEW.submitted_on_date IS NULL, 'NULL', CONCAT('"', NEW.submitted_on_date, '"')), ', submitted_by_user_id = ', IF(NEW.submitted_by_user_id IS NULL, 'NULL', CONCAT('"', NEW.submitted_by_user_id, '"')), ', approved_on_date = ', IF(NEW.approved_on_date IS NULL, 'NULL', CONCAT('"', NEW.approved_on_date, '"')), ', approved_by_user_id = ', IF(NEW.approved_by_user_id IS NULL, 'NULL', CONCAT('"', NEW.approved_by_user_id, '"')), ', rejected_on_date = ', IF(NEW.rejected_on_date IS NULL, 'NULL', CONCAT('"', NEW.rejected_on_date, '"')), ', rejected_by_user_id = ', IF(NEW.rejected_by_user_id IS NULL, 'NULL', CONCAT('"', NEW.rejected_by_user_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_reschedule_request', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_installment', OLD.reschedule_from_installment, NEW.reschedule_from_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_from_date', OLD.reschedule_from_date, NEW.reschedule_from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recalculate_interest', OLD.recalculate_interest, NEW.recalculate_interest);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_cv_id', OLD.reschedule_reason_cv_id, NEW.reschedule_reason_cv_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_reason_comment', OLD.reschedule_reason_comment, NEW.reschedule_reason_comment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NEW.submitted_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_by_user_id', OLD.submitted_by_user_id, NEW.submitted_by_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_on_date', OLD.approved_on_date, NEW.approved_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_by_user_id', OLD.approved_by_user_id, NEW.approved_by_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_on_date', OLD.rejected_on_date, NEW.rejected_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_by_user_id', OLD.rejected_by_user_id, NEW.rejected_by_user_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_d%%
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_d`
BEFORE DELETE
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_reschedule_request_term_variations_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_reschedule_request_term_variations_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_term_variations_id', OLD.loan_term_variations_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_i%%
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_i`
AFTER INSERT
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_reschedule_request_term_variations_mapping(id, loan_reschedule_request_id, loan_term_variations_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_reschedule_request_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_reschedule_request_id, '", ')), IF(NEW.loan_term_variations_id IS NULL, 'NULL', CONCAT('"', NEW.loan_term_variations_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_reschedule_request_term_variations_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', NEW.loan_reschedule_request_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_term_variations_id', NEW.loan_term_variations_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_reschedule_request_term_variations_mapping_u%%
CREATE TRIGGER `m_loan_reschedule_request_term_variations_mapping_u`
AFTER UPDATE
  ON m_loan_reschedule_request_term_variations_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_reschedule_request_term_variations_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_reschedule_request_id = ', IF(NEW.loan_reschedule_request_id IS NULL, 'NULL', CONCAT('"', NEW.loan_reschedule_request_id, '"')), ', loan_term_variations_id = ', IF(NEW.loan_term_variations_id IS NULL, 'NULL', CONCAT('"', NEW.loan_term_variations_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_reschedule_request_term_variations_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_reschedule_request_id', OLD.loan_reschedule_request_id, NEW.loan_reschedule_request_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_term_variations_id', OLD.loan_term_variations_id, NEW.loan_term_variations_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_term_variations_d%%
CREATE TRIGGER `m_loan_term_variations_d`
BEFORE DELETE
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_term_variations WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_term_variations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_type', OLD.term_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applicable_date', OLD.applicable_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_value', OLD.decimal_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_specific_to_installment', OLD.is_specific_to_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applied_on_loan_status', OLD.applied_on_loan_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_term_variations_i%%
CREATE TRIGGER `m_loan_term_variations_i`
AFTER INSERT
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_term_variations(id, loan_id, term_type, applicable_date, decimal_value, date_value, is_specific_to_installment, applied_on_loan_status, is_active, parent_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.term_type IS NULL, 'NULL, ', CONCAT('"', NEW.term_type, '", ')), IF(NEW.applicable_date IS NULL, 'NULL, ', CONCAT('"', NEW.applicable_date, '", ')), IF(NEW.decimal_value IS NULL, 'NULL, ', CONCAT('"', NEW.decimal_value, '", ')), IF(NEW.date_value IS NULL, 'NULL, ', CONCAT('"', NEW.date_value, '", ')), IF(NEW.is_specific_to_installment IS NULL, 'NULL, ', CONCAT('"', NEW.is_specific_to_installment, '", ')), IF(NEW.applied_on_loan_status IS NULL, 'NULL, ', CONCAT('"', NEW.applied_on_loan_status, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_term_variations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'term_type', NEW.term_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'applicable_date', NEW.applicable_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_value', NEW.decimal_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'date_value', NEW.date_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_specific_to_installment', NEW.is_specific_to_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'applied_on_loan_status', NEW.applied_on_loan_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_term_variations_u%%
CREATE TRIGGER `m_loan_term_variations_u`
AFTER UPDATE
  ON m_loan_term_variations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_term_variations SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', term_type = ', IF(NEW.term_type IS NULL, 'NULL', CONCAT('"', NEW.term_type, '"')), ', applicable_date = ', IF(NEW.applicable_date IS NULL, 'NULL', CONCAT('"', NEW.applicable_date, '"')), ', decimal_value = ', IF(NEW.decimal_value IS NULL, 'NULL', CONCAT('"', NEW.decimal_value, '"')), ', date_value = ', IF(NEW.date_value IS NULL, 'NULL', CONCAT('"', NEW.date_value, '"')), ', is_specific_to_installment = ', IF(NEW.is_specific_to_installment IS NULL, 'NULL', CONCAT('"', NEW.is_specific_to_installment, '"')), ', applied_on_loan_status = ', IF(NEW.applied_on_loan_status IS NULL, 'NULL', CONCAT('"', NEW.applied_on_loan_status, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_term_variations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'term_type', OLD.term_type, NEW.term_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applicable_date', OLD.applicable_date, NEW.applicable_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_value', OLD.decimal_value, NEW.decimal_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'date_value', OLD.date_value, NEW.date_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_specific_to_installment', OLD.is_specific_to_installment, NEW.is_specific_to_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'applied_on_loan_status', OLD.applied_on_loan_status, NEW.applied_on_loan_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_topup_d%%
CREATE TRIGGER `m_loan_topup_d`
BEFORE DELETE
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_topup WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_topup', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_loan_id', OLD.closure_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'topup_amount', OLD.topup_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_topup_i%%
CREATE TRIGGER `m_loan_topup_i`
AFTER INSERT
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_topup(id, loan_id, closure_loan_id, account_transfer_details_id, topup_amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.closure_loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.closure_loan_id, '", ')), IF(NEW.account_transfer_details_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_transfer_details_id, '", ')), IF(NEW.topup_amount IS NULL, 'NULL', CONCAT('"', NEW.topup_amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_topup', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closure_loan_id', NEW.closure_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_transfer_details_id', NEW.account_transfer_details_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'topup_amount', NEW.topup_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_topup_u%%
CREATE TRIGGER `m_loan_topup_u`
AFTER UPDATE
  ON m_loan_topup
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_topup SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', closure_loan_id = ', IF(NEW.closure_loan_id IS NULL, 'NULL', CONCAT('"', NEW.closure_loan_id, '"')), ', account_transfer_details_id = ', IF(NEW.account_transfer_details_id IS NULL, 'NULL', CONCAT('"', NEW.account_transfer_details_id, '"')), ', topup_amount = ', IF(NEW.topup_amount IS NULL, 'NULL', CONCAT('"', NEW.topup_amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_topup', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closure_loan_id', OLD.closure_loan_id, NEW.closure_loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_transfer_details_id', OLD.account_transfer_details_id, NEW.account_transfer_details_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'topup_amount', OLD.topup_amount, NEW.topup_amount);
  END%%


DROP TRIGGER IF EXISTS m_loan_tranche_charges_d%%
CREATE TRIGGER `m_loan_tranche_charges_d`
BEFORE DELETE
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_tranche_charges WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_tranche_charges', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_tranche_charges_i%%
CREATE TRIGGER `m_loan_tranche_charges_i`
AFTER INSERT
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_tranche_charges(id, loan_id, charge_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_tranche_charges', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_tranche_charges_u%%
CREATE TRIGGER `m_loan_tranche_charges_u`
AFTER UPDATE
  ON m_loan_tranche_charges
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_tranche_charges SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_tranche_charges', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_d%%
CREATE TRIGGER `m_loan_tranche_disbursement_charge_d`
BEFORE DELETE
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_tranche_disbursement_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_tranche_disbursement_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursement_detail_id', OLD.disbursement_detail_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_i%%
CREATE TRIGGER `m_loan_tranche_disbursement_charge_i`
AFTER INSERT
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_tranche_disbursement_charge(id, loan_charge_id, disbursement_detail_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_charge_id, '", ')), IF(NEW.disbursement_detail_id IS NULL, 'NULL', CONCAT('"', NEW.disbursement_detail_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_tranche_disbursement_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_charge_id', NEW.loan_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'disbursement_detail_id', NEW.disbursement_detail_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_tranche_disbursement_charge_u%%
CREATE TRIGGER `m_loan_tranche_disbursement_charge_u`
AFTER UPDATE
  ON m_loan_tranche_disbursement_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_tranche_disbursement_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_charge_id = ', IF(NEW.loan_charge_id IS NULL, 'NULL', CONCAT('"', NEW.loan_charge_id, '"')), ', disbursement_detail_id = ', IF(NEW.disbursement_detail_id IS NULL, 'NULL', CONCAT('"', NEW.disbursement_detail_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_tranche_disbursement_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_charge_id', OLD.loan_charge_id, NEW.loan_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'disbursement_detail_id', OLD.disbursement_detail_id, NEW.disbursement_detail_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_transaction_d%%
CREATE TRIGGER `m_loan_transaction_d`
BEFORE DELETE
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overpayment_portion_derived', OLD.overpayment_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unrecognized_income_portion', OLD.unrecognized_income_portion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', OLD.outstanding_loan_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', OLD.manually_adjusted_or_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_transaction_i%%
CREATE TRIGGER `m_loan_transaction_i`
AFTER INSERT
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_transaction(id, loan_id, office_id, payment_detail_id, is_reversed, external_id, transaction_type_enum, transaction_date, amount, principal_portion_derived, interest_portion_derived, fee_charges_portion_derived, penalty_charges_portion_derived, overpayment_portion_derived, unrecognized_income_portion, outstanding_loan_balance_derived, submitted_on_date, manually_adjusted_or_reversed, created_date, appuser_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.payment_detail_id IS NULL, 'NULL, ', CONCAT('"', NEW.payment_detail_id, '", ')), IF(NEW.is_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.is_reversed, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.transaction_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_type_enum, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.principal_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_portion_derived, '", ')), IF(NEW.interest_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_portion_derived, '", ')), IF(NEW.fee_charges_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_portion_derived, '", ')), IF(NEW.penalty_charges_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.penalty_charges_portion_derived, '", ')), IF(NEW.overpayment_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.overpayment_portion_derived, '", ')), IF(NEW.unrecognized_income_portion IS NULL, 'NULL, ', CONCAT('"', NEW.unrecognized_income_portion, '", ')), IF(NEW.outstanding_loan_balance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.outstanding_loan_balance_derived, '", ')), IF(NEW.submitted_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.submitted_on_date, '", ')), IF(NEW.manually_adjusted_or_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.manually_adjusted_or_reversed, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_portion_derived', NEW.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_portion_derived', NEW.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', NEW.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', NEW.penalty_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overpayment_portion_derived', NEW.overpayment_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unrecognized_income_portion', NEW.unrecognized_income_portion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', NEW.outstanding_loan_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_on_date', NEW.submitted_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', NEW.manually_adjusted_or_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_transaction_u%%
CREATE TRIGGER `m_loan_transaction_u`
AFTER UPDATE
  ON m_loan_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', payment_detail_id = ', IF(NEW.payment_detail_id IS NULL, 'NULL', CONCAT('"', NEW.payment_detail_id, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', transaction_type_enum = ', IF(NEW.transaction_type_enum IS NULL, 'NULL', CONCAT('"', NEW.transaction_type_enum, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', principal_portion_derived = ', IF(NEW.principal_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_portion_derived, '"')), ', interest_portion_derived = ', IF(NEW.interest_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_portion_derived, '"')), ', fee_charges_portion_derived = ', IF(NEW.fee_charges_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_portion_derived, '"')), ', penalty_charges_portion_derived = ', IF(NEW.penalty_charges_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_portion_derived, '"')), ', overpayment_portion_derived = ', IF(NEW.overpayment_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.overpayment_portion_derived, '"')), ', unrecognized_income_portion = ', IF(NEW.unrecognized_income_portion IS NULL, 'NULL', CONCAT('"', NEW.unrecognized_income_portion, '"')), ', outstanding_loan_balance_derived = ', IF(NEW.outstanding_loan_balance_derived IS NULL, 'NULL', CONCAT('"', NEW.outstanding_loan_balance_derived, '"')), ', submitted_on_date = ', IF(NEW.submitted_on_date IS NULL, 'NULL', CONCAT('"', NEW.submitted_on_date, '"')), ', manually_adjusted_or_reversed = ', IF(NEW.manually_adjusted_or_reversed IS NULL, 'NULL', CONCAT('"', NEW.manually_adjusted_or_reversed, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', appuser_id = ', IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NEW.principal_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NEW.interest_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NEW.fee_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NEW.penalty_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overpayment_portion_derived', OLD.overpayment_portion_derived, NEW.overpayment_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unrecognized_income_portion', OLD.unrecognized_income_portion, NEW.unrecognized_income_portion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'outstanding_loan_balance_derived', OLD.outstanding_loan_balance_derived, NEW.outstanding_loan_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_on_date', OLD.submitted_on_date, NEW.submitted_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'manually_adjusted_or_reversed', OLD.manually_adjusted_or_reversed, NEW.manually_adjusted_or_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
  END%%


DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_d%%
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_d`
BEFORE DELETE
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loan_transaction_repayment_schedule_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loan_transaction_repayment_schedule_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_i%%
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_i`
AFTER INSERT
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loan_transaction_repayment_schedule_mapping(id, loan_transaction_id, loan_repayment_schedule_id, amount, principal_portion_derived, interest_portion_derived, fee_charges_portion_derived, penalty_charges_portion_derived) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_id, '", ')), IF(NEW.loan_repayment_schedule_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_repayment_schedule_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.principal_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.principal_portion_derived, '", ')), IF(NEW.interest_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.interest_portion_derived, '", ')), IF(NEW.fee_charges_portion_derived IS NULL, 'NULL, ', CONCAT('"', NEW.fee_charges_portion_derived, '", ')), IF(NEW.penalty_charges_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_portion_derived, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loan_transaction_repayment_schedule_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', NEW.loan_repayment_schedule_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_portion_derived', NEW.principal_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_portion_derived', NEW.interest_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', NEW.fee_charges_portion_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', NEW.penalty_charges_portion_derived, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loan_transaction_repayment_schedule_mapping_u%%
CREATE TRIGGER `m_loan_transaction_repayment_schedule_mapping_u`
AFTER UPDATE
  ON m_loan_transaction_repayment_schedule_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loan_transaction_repayment_schedule_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_transaction_id = ', IF(NEW.loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_id, '"')), ', loan_repayment_schedule_id = ', IF(NEW.loan_repayment_schedule_id IS NULL, 'NULL', CONCAT('"', NEW.loan_repayment_schedule_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', principal_portion_derived = ', IF(NEW.principal_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.principal_portion_derived, '"')), ', interest_portion_derived = ', IF(NEW.interest_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.interest_portion_derived, '"')), ', fee_charges_portion_derived = ', IF(NEW.fee_charges_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.fee_charges_portion_derived, '"')), ', penalty_charges_portion_derived = ', IF(NEW.penalty_charges_portion_derived IS NULL, 'NULL', CONCAT('"', NEW.penalty_charges_portion_derived, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loan_transaction_repayment_schedule_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_repayment_schedule_id', OLD.loan_repayment_schedule_id, NEW.loan_repayment_schedule_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_portion_derived', OLD.principal_portion_derived, NEW.principal_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_portion_derived', OLD.interest_portion_derived, NEW.interest_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_charges_portion_derived', OLD.fee_charges_portion_derived, NEW.fee_charges_portion_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'penalty_charges_portion_derived', OLD.penalty_charges_portion_derived, NEW.penalty_charges_portion_derived);
  END%%


DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_d%%
CREATE TRIGGER `m_loanproduct_provisioning_entry_d`
BEFORE DELETE
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loanproduct_provisioning_entry WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loanproduct_provisioning_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'history_id', OLD.history_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_in_days', OLD.overdue_in_days, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reseve_amount', OLD.reseve_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_i%%
CREATE TRIGGER `m_loanproduct_provisioning_entry_i`
AFTER INSERT
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loanproduct_provisioning_entry(id, history_id, criteria_id, currency_code, office_id, product_id, category_id, overdue_in_days, reseve_amount, liability_account, expense_account) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.history_id IS NULL, 'NULL, ', CONCAT('"', NEW.history_id, '", ')), IF(NEW.criteria_id IS NULL, 'NULL, ', CONCAT('"', NEW.criteria_id, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.category_id IS NULL, 'NULL, ', CONCAT('"', NEW.category_id, '", ')), IF(NEW.overdue_in_days IS NULL, 'NULL, ', CONCAT('"', NEW.overdue_in_days, '", ')), IF(NEW.reseve_amount IS NULL, 'NULL, ', CONCAT('"', NEW.reseve_amount, '", ')), IF(NEW.liability_account IS NULL, 'NULL, ', CONCAT('"', NEW.liability_account, '", ')), IF(NEW.expense_account IS NULL, 'NULL', CONCAT('"', NEW.expense_account, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loanproduct_provisioning_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'history_id', NEW.history_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_id', NEW.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_in_days', NEW.overdue_in_days, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reseve_amount', NEW.reseve_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'liability_account', NEW.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expense_account', NEW.expense_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_entry_u%%
CREATE TRIGGER `m_loanproduct_provisioning_entry_u`
AFTER UPDATE
  ON m_loanproduct_provisioning_entry
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loanproduct_provisioning_entry SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', history_id = ', IF(NEW.history_id IS NULL, 'NULL', CONCAT('"', NEW.history_id, '"')), ', criteria_id = ', IF(NEW.criteria_id IS NULL, 'NULL', CONCAT('"', NEW.criteria_id, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', category_id = ', IF(NEW.category_id IS NULL, 'NULL', CONCAT('"', NEW.category_id, '"')), ', overdue_in_days = ', IF(NEW.overdue_in_days IS NULL, 'NULL', CONCAT('"', NEW.overdue_in_days, '"')), ', reseve_amount = ', IF(NEW.reseve_amount IS NULL, 'NULL', CONCAT('"', NEW.reseve_amount, '"')), ', liability_account = ', IF(NEW.liability_account IS NULL, 'NULL', CONCAT('"', NEW.liability_account, '"')), ', expense_account = ', IF(NEW.expense_account IS NULL, 'NULL', CONCAT('"', NEW.expense_account, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loanproduct_provisioning_entry', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'history_id', OLD.history_id, NEW.history_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NEW.category_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_in_days', OLD.overdue_in_days, NEW.overdue_in_days);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reseve_amount', OLD.reseve_amount, NEW.reseve_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NEW.liability_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NEW.expense_account);
  END%%


DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_d%%
CREATE TRIGGER `m_loanproduct_provisioning_mapping_d`
BEFORE DELETE
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_loanproduct_provisioning_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_loanproduct_provisioning_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_i%%
CREATE TRIGGER `m_loanproduct_provisioning_mapping_i`
AFTER INSERT
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_loanproduct_provisioning_mapping(id, product_id, criteria_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.criteria_id IS NULL, 'NULL', CONCAT('"', NEW.criteria_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_loanproduct_provisioning_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_loanproduct_provisioning_mapping_u%%
CREATE TRIGGER `m_loanproduct_provisioning_mapping_u`
AFTER UPDATE
  ON m_loanproduct_provisioning_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_loanproduct_provisioning_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', criteria_id = ', IF(NEW.criteria_id IS NULL, 'NULL', CONCAT('"', NEW.criteria_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_loanproduct_provisioning_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
  END%%


DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_d%%
CREATE TRIGGER `m_mandatory_savings_schedule_d`
BEFORE DELETE
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_mandatory_savings_schedule WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_mandatory_savings_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', OLD.deposit_amount_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_i%%
CREATE TRIGGER `m_mandatory_savings_schedule_i`
AFTER INSERT
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_mandatory_savings_schedule(id, savings_account_id, fromdate, duedate, installment, deposit_amount, deposit_amount_completed_derived, total_paid_in_advance_derived, total_paid_late_derived, completed_derived, obligations_met_on_date, createdby_id, created_date, lastmodified_date, lastmodifiedby_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.fromdate IS NULL, 'NULL, ', CONCAT('"', NEW.fromdate, '", ')), IF(NEW.duedate IS NULL, 'NULL, ', CONCAT('"', NEW.duedate, '", ')), IF(NEW.installment IS NULL, 'NULL, ', CONCAT('"', NEW.installment, '", ')), IF(NEW.deposit_amount IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_amount, '", ')), IF(NEW.deposit_amount_completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_amount_completed_derived, '", ')), IF(NEW.total_paid_in_advance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_paid_in_advance_derived, '", ')), IF(NEW.total_paid_late_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_paid_late_derived, '", ')), IF(NEW.completed_derived IS NULL, 'NULL, ', CONCAT('"', NEW.completed_derived, '", ')), IF(NEW.obligations_met_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.obligations_met_on_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_mandatory_savings_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fromdate', NEW.fromdate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'duedate', NEW.duedate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installment', NEW.installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount', NEW.deposit_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', NEW.deposit_amount_completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', NEW.total_paid_in_advance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_paid_late_derived', NEW.total_paid_late_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'completed_derived', NEW.completed_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'obligations_met_on_date', NEW.obligations_met_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_mandatory_savings_schedule_u%%
CREATE TRIGGER `m_mandatory_savings_schedule_u`
AFTER UPDATE
  ON m_mandatory_savings_schedule
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_mandatory_savings_schedule SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', fromdate = ', IF(NEW.fromdate IS NULL, 'NULL', CONCAT('"', NEW.fromdate, '"')), ', duedate = ', IF(NEW.duedate IS NULL, 'NULL', CONCAT('"', NEW.duedate, '"')), ', installment = ', IF(NEW.installment IS NULL, 'NULL', CONCAT('"', NEW.installment, '"')), ', deposit_amount = ', IF(NEW.deposit_amount IS NULL, 'NULL', CONCAT('"', NEW.deposit_amount, '"')), ', deposit_amount_completed_derived = ', IF(NEW.deposit_amount_completed_derived IS NULL, 'NULL', CONCAT('"', NEW.deposit_amount_completed_derived, '"')), ', total_paid_in_advance_derived = ', IF(NEW.total_paid_in_advance_derived IS NULL, 'NULL', CONCAT('"', NEW.total_paid_in_advance_derived, '"')), ', total_paid_late_derived = ', IF(NEW.total_paid_late_derived IS NULL, 'NULL', CONCAT('"', NEW.total_paid_late_derived, '"')), ', completed_derived = ', IF(NEW.completed_derived IS NULL, 'NULL', CONCAT('"', NEW.completed_derived, '"')), ', obligations_met_on_date = ', IF(NEW.obligations_met_on_date IS NULL, 'NULL', CONCAT('"', NEW.obligations_met_on_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_mandatory_savings_schedule', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fromdate', OLD.fromdate, NEW.fromdate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'duedate', OLD.duedate, NEW.duedate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installment', OLD.installment, NEW.installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount', OLD.deposit_amount, NEW.deposit_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_amount_completed_derived', OLD.deposit_amount_completed_derived, NEW.deposit_amount_completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_in_advance_derived', OLD.total_paid_in_advance_derived, NEW.total_paid_in_advance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_paid_late_derived', OLD.total_paid_late_derived, NEW.total_paid_late_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'completed_derived', OLD.completed_derived, NEW.completed_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'obligations_met_on_date', OLD.obligations_met_on_date, NEW.obligations_met_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END%%


DROP TRIGGER IF EXISTS m_meeting_d%%
CREATE TRIGGER `m_meeting_d`
BEFORE DELETE
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_meeting WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_meeting', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_instance_id', OLD.calendar_instance_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_date', OLD.meeting_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_meeting_i%%
CREATE TRIGGER `m_meeting_i`
AFTER INSERT
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_meeting(id, calendar_instance_id, meeting_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.calendar_instance_id IS NULL, 'NULL, ', CONCAT('"', NEW.calendar_instance_id, '", ')), IF(NEW.meeting_date IS NULL, 'NULL', CONCAT('"', NEW.meeting_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_meeting', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calendar_instance_id', NEW.calendar_instance_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'meeting_date', NEW.meeting_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_meeting_u%%
CREATE TRIGGER `m_meeting_u`
AFTER UPDATE
  ON m_meeting
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_meeting SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', calendar_instance_id = ', IF(NEW.calendar_instance_id IS NULL, 'NULL', CONCAT('"', NEW.calendar_instance_id, '"')), ', meeting_date = ', IF(NEW.meeting_date IS NULL, 'NULL', CONCAT('"', NEW.meeting_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_meeting', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calendar_instance_id', OLD.calendar_instance_id, NEW.calendar_instance_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'meeting_date', OLD.meeting_date, NEW.meeting_date);
  END%%


DROP TRIGGER IF EXISTS m_note_d%%
CREATE TRIGGER `m_note_d`
BEFORE DELETE
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_note WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_note', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_account_id', OLD.share_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note_type_enum', OLD.note_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note', OLD.note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_note_i%%
CREATE TRIGGER `m_note_i`
AFTER INSERT
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_note(id, client_id, group_id, loan_id, loan_transaction_id, savings_account_id, savings_account_transaction_id, share_account_id, note_type_enum, note, created_date, createdby_id, lastmodified_date, lastmodifiedby_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.loan_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.savings_account_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_transaction_id, '", ')), IF(NEW.share_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.share_account_id, '", ')), IF(NEW.note_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.note_type_enum, '", ')), IF(NEW.note IS NULL, 'NULL, ', CONCAT('"', NEW.note, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_note', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_id', NEW.loan_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_transaction_id', NEW.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_account_id', NEW.share_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'note_type_enum', NEW.note_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'note', NEW.note, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_note_u%%
CREATE TRIGGER `m_note_u`
AFTER UPDATE
  ON m_note
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_note SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', loan_transaction_id = ', IF(NEW.loan_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', savings_account_transaction_id = ', IF(NEW.savings_account_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_transaction_id, '"')), ', share_account_id = ', IF(NEW.share_account_id IS NULL, 'NULL', CONCAT('"', NEW.share_account_id, '"')), ', note_type_enum = ', IF(NEW.note_type_enum IS NULL, 'NULL', CONCAT('"', NEW.note_type_enum, '"')), ', note = ', IF(NEW.note IS NULL, 'NULL', CONCAT('"', NEW.note, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_note', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_id', OLD.loan_transaction_id, NEW.loan_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NEW.savings_account_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_account_id', OLD.share_account_id, NEW.share_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note_type_enum', OLD.note_type_enum, NEW.note_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'note', OLD.note, NEW.note);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END%%


DROP TRIGGER IF EXISTS m_office_d%%
CREATE TRIGGER `m_office_d`
BEFORE DELETE
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_office WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'opening_date', OLD.opening_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_office_i%%
CREATE TRIGGER `m_office_i`
AFTER INSERT
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_office(id, parent_id, hierarchy, external_id, name, opening_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.parent_id IS NULL, 'NULL, ', CONCAT('"', NEW.parent_id, '", ')), IF(NEW.hierarchy IS NULL, 'NULL, ', CONCAT('"', NEW.hierarchy, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.opening_date IS NULL, 'NULL', CONCAT('"', NEW.opening_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hierarchy', NEW.hierarchy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'opening_date', NEW.opening_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_office_u%%
CREATE TRIGGER `m_office_u`
AFTER UPDATE
  ON m_office
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_office SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ', hierarchy = ', IF(NEW.hierarchy IS NULL, 'NULL', CONCAT('"', NEW.hierarchy, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', opening_date = ', IF(NEW.opening_date IS NULL, 'NULL', CONCAT('"', NEW.opening_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_office', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hierarchy', OLD.hierarchy, NEW.hierarchy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'opening_date', OLD.opening_date, NEW.opening_date);
  END%%


DROP TRIGGER IF EXISTS m_office_transaction_d%%
CREATE TRIGGER `m_office_transaction_d`
BEFORE DELETE
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_office_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_office_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_amount', OLD.transaction_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_office_transaction_i%%
CREATE TRIGGER `m_office_transaction_i`
AFTER INSERT
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_office_transaction(id, from_office_id, to_office_id, currency_code, currency_digits, transaction_amount, transaction_date, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.from_office_id IS NULL, 'NULL, ', CONCAT('"', NEW.from_office_id, '", ')), IF(NEW.to_office_id IS NULL, 'NULL, ', CONCAT('"', NEW.to_office_id, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.transaction_amount IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_amount, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_office_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_office_id', NEW.from_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_office_id', NEW.to_office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_amount', NEW.transaction_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_office_transaction_u%%
CREATE TRIGGER `m_office_transaction_u`
AFTER UPDATE
  ON m_office_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_office_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', from_office_id = ', IF(NEW.from_office_id IS NULL, 'NULL', CONCAT('"', NEW.from_office_id, '"')), ', to_office_id = ', IF(NEW.to_office_id IS NULL, 'NULL', CONCAT('"', NEW.to_office_id, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', transaction_amount = ', IF(NEW.transaction_amount IS NULL, 'NULL', CONCAT('"', NEW.transaction_amount, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_office_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_office_id', OLD.from_office_id, NEW.from_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_office_id', OLD.to_office_id, NEW.to_office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_amount', OLD.transaction_amount, NEW.transaction_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_organisation_creditbureau_d%%
CREATE TRIGGER `m_organisation_creditbureau_d`
BEFORE DELETE
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_organisation_creditbureau WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_organisation_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'alias', OLD.alias, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_organisation_creditbureau_i%%
CREATE TRIGGER `m_organisation_creditbureau_i`
AFTER INSERT
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_organisation_creditbureau(id, alias, creditbureau_id, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.alias IS NULL, 'NULL, ', CONCAT('"', NEW.alias, '", ')), IF(NEW.creditbureau_id IS NULL, 'NULL, ', CONCAT('"', NEW.creditbureau_id, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_organisation_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'alias', NEW.alias, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'creditbureau_id', NEW.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_organisation_creditbureau_u%%
CREATE TRIGGER `m_organisation_creditbureau_u`
AFTER UPDATE
  ON m_organisation_creditbureau
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_organisation_creditbureau SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', alias = ', IF(NEW.alias IS NULL, 'NULL', CONCAT('"', NEW.alias, '"')), ', creditbureau_id = ', IF(NEW.creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.creditbureau_id, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_organisation_creditbureau', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'alias', OLD.alias, NEW.alias);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NEW.creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_organisation_currency_d%%
CREATE TRIGGER `m_organisation_currency_d`
BEFORE DELETE
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_organisation_currency WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_organisation_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_organisation_currency_i%%
CREATE TRIGGER `m_organisation_currency_i`
AFTER INSERT
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_organisation_currency(id, code, decimal_places, currency_multiplesof, name, display_symbol, internationalized_name_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code IS NULL, 'NULL, ', CONCAT('"', NEW.code, '", ')), IF(NEW.decimal_places IS NULL, 'NULL, ', CONCAT('"', NEW.decimal_places, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.display_symbol IS NULL, 'NULL, ', CONCAT('"', NEW.display_symbol, '", ')), IF(NEW.internationalized_name_code IS NULL, 'NULL', CONCAT('"', NEW.internationalized_name_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_organisation_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'decimal_places', NEW.decimal_places, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_symbol', NEW.display_symbol, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'internationalized_name_code', NEW.internationalized_name_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_organisation_currency_u%%
CREATE TRIGGER `m_organisation_currency_u`
AFTER UPDATE
  ON m_organisation_currency
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_organisation_currency SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code = ', IF(NEW.code IS NULL, 'NULL', CONCAT('"', NEW.code, '"')), ', decimal_places = ', IF(NEW.decimal_places IS NULL, 'NULL', CONCAT('"', NEW.decimal_places, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', display_symbol = ', IF(NEW.display_symbol IS NULL, 'NULL', CONCAT('"', NEW.display_symbol, '"')), ', internationalized_name_code = ', IF(NEW.internationalized_name_code IS NULL, 'NULL', CONCAT('"', NEW.internationalized_name_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_organisation_currency', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'decimal_places', OLD.decimal_places, NEW.decimal_places);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_symbol', OLD.display_symbol, NEW.display_symbol);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'internationalized_name_code', OLD.internationalized_name_code, NEW.internationalized_name_code);
  END%%


DROP TRIGGER IF EXISTS m_password_validation_policy_d%%
CREATE TRIGGER `m_password_validation_policy_d`
BEFORE DELETE
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_password_validation_policy WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_password_validation_policy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'regex', OLD.regex, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'key', OLD.key, NULL);
  END%%
DROP TRIGGER IF EXISTS m_password_validation_policy_i%%
CREATE TRIGGER `m_password_validation_policy_i`
AFTER INSERT
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_password_validation_policy(id, regex, description, active, key) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.regex IS NULL, 'NULL, ', CONCAT('"', NEW.regex, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.active IS NULL, 'NULL, ', CONCAT('"', NEW.active, '", ')), IF(NEW.key IS NULL, 'NULL', CONCAT('"', NEW.key, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_password_validation_policy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'regex', NEW.regex, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'active', NEW.active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'key', NEW.key, NULL);
  END%%
DROP TRIGGER IF EXISTS m_password_validation_policy_u%%
CREATE TRIGGER `m_password_validation_policy_u`
AFTER UPDATE
  ON m_password_validation_policy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_password_validation_policy SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', regex = ', IF(NEW.regex IS NULL, 'NULL', CONCAT('"', NEW.regex, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', active = ', IF(NEW.active IS NULL, 'NULL', CONCAT('"', NEW.active, '"')), ', key = ', IF(NEW.key IS NULL, 'NULL', CONCAT('"', NEW.key, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_password_validation_policy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'regex', OLD.regex, NEW.regex);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'active', OLD.active, NEW.active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'key', OLD.key, NEW.key);
  END%%


DROP TRIGGER IF EXISTS m_payment_detail_d%%
CREATE TRIGGER `m_payment_detail_d`
BEFORE DELETE
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_payment_detail WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_payment_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type_id', OLD.payment_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'check_number', OLD.check_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'receipt_number', OLD.receipt_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'bank_number', OLD.bank_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'routing_code', OLD.routing_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_payment_detail_i%%
CREATE TRIGGER `m_payment_detail_i`
AFTER INSERT
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_payment_detail(id, payment_type_id, account_number, check_number, receipt_number, bank_number, routing_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.payment_type_id IS NULL, 'NULL, ', CONCAT('"', NEW.payment_type_id, '", ')), IF(NEW.account_number IS NULL, 'NULL, ', CONCAT('"', NEW.account_number, '", ')), IF(NEW.check_number IS NULL, 'NULL, ', CONCAT('"', NEW.check_number, '", ')), IF(NEW.receipt_number IS NULL, 'NULL, ', CONCAT('"', NEW.receipt_number, '", ')), IF(NEW.bank_number IS NULL, 'NULL, ', CONCAT('"', NEW.bank_number, '", ')), IF(NEW.routing_code IS NULL, 'NULL', CONCAT('"', NEW.routing_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_payment_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_type_id', NEW.payment_type_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_number', NEW.account_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'check_number', NEW.check_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'receipt_number', NEW.receipt_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'bank_number', NEW.bank_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'routing_code', NEW.routing_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_payment_detail_u%%
CREATE TRIGGER `m_payment_detail_u`
AFTER UPDATE
  ON m_payment_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_payment_detail SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', payment_type_id = ', IF(NEW.payment_type_id IS NULL, 'NULL', CONCAT('"', NEW.payment_type_id, '"')), ', account_number = ', IF(NEW.account_number IS NULL, 'NULL', CONCAT('"', NEW.account_number, '"')), ', check_number = ', IF(NEW.check_number IS NULL, 'NULL', CONCAT('"', NEW.check_number, '"')), ', receipt_number = ', IF(NEW.receipt_number IS NULL, 'NULL', CONCAT('"', NEW.receipt_number, '"')), ', bank_number = ', IF(NEW.bank_number IS NULL, 'NULL', CONCAT('"', NEW.bank_number, '"')), ', routing_code = ', IF(NEW.routing_code IS NULL, 'NULL', CONCAT('"', NEW.routing_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_payment_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_type_id', OLD.payment_type_id, NEW.payment_type_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_number', OLD.account_number, NEW.account_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'check_number', OLD.check_number, NEW.check_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'receipt_number', OLD.receipt_number, NEW.receipt_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'bank_number', OLD.bank_number, NEW.bank_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'routing_code', OLD.routing_code, NEW.routing_code);
  END%%


DROP TRIGGER IF EXISTS m_payment_type_d%%
CREATE TRIGGER `m_payment_type_d`
BEFORE DELETE
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_payment_type WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_payment_type', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_cash_payment', OLD.is_cash_payment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NULL);
  END%%
DROP TRIGGER IF EXISTS m_payment_type_i%%
CREATE TRIGGER `m_payment_type_i`
AFTER INSERT
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_payment_type(id, value, description, is_cash_payment, order_position) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.value IS NULL, 'NULL, ', CONCAT('"', NEW.value, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.is_cash_payment IS NULL, 'NULL, ', CONCAT('"', NEW.is_cash_payment, '", ')), IF(NEW.order_position IS NULL, 'NULL', CONCAT('"', NEW.order_position, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_payment_type', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_cash_payment', NEW.is_cash_payment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'order_position', NEW.order_position, NULL);
  END%%
DROP TRIGGER IF EXISTS m_payment_type_u%%
CREATE TRIGGER `m_payment_type_u`
AFTER UPDATE
  ON m_payment_type
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_payment_type SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', is_cash_payment = ', IF(NEW.is_cash_payment IS NULL, 'NULL', CONCAT('"', NEW.is_cash_payment, '"')), ', order_position = ', IF(NEW.order_position IS NULL, 'NULL', CONCAT('"', NEW.order_position, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_payment_type', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_cash_payment', OLD.is_cash_payment, NEW.is_cash_payment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'order_position', OLD.order_position, NEW.order_position);
  END%%


DROP TRIGGER IF EXISTS m_permission_d%%
CREATE TRIGGER `m_permission_d`
BEFORE DELETE
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_permission WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grouping', OLD.grouping, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_maker_checker', OLD.can_maker_checker, NULL);
  END%%
DROP TRIGGER IF EXISTS m_permission_i%%
CREATE TRIGGER `m_permission_i`
AFTER INSERT
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_permission(id, grouping, code, entity_name, action_name, can_maker_checker) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.grouping IS NULL, 'NULL, ', CONCAT('"', NEW.grouping, '", ')), IF(NEW.code IS NULL, 'NULL, ', CONCAT('"', NEW.code, '", ')), IF(NEW.entity_name IS NULL, 'NULL, ', CONCAT('"', NEW.entity_name, '", ')), IF(NEW.action_name IS NULL, 'NULL, ', CONCAT('"', NEW.action_name, '", ')), IF(NEW.can_maker_checker IS NULL, 'NULL', CONCAT('"', NEW.can_maker_checker, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grouping', NEW.grouping, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_maker_checker', NEW.can_maker_checker, NULL);
  END%%
DROP TRIGGER IF EXISTS m_permission_u%%
CREATE TRIGGER `m_permission_u`
AFTER UPDATE
  ON m_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_permission SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', grouping = ', IF(NEW.grouping IS NULL, 'NULL', CONCAT('"', NEW.grouping, '"')), ', code = ', IF(NEW.code IS NULL, 'NULL', CONCAT('"', NEW.code, '"')), ', entity_name = ', IF(NEW.entity_name IS NULL, 'NULL', CONCAT('"', NEW.entity_name, '"')), ', action_name = ', IF(NEW.action_name IS NULL, 'NULL', CONCAT('"', NEW.action_name, '"')), ', can_maker_checker = ', IF(NEW.can_maker_checker IS NULL, 'NULL', CONCAT('"', NEW.can_maker_checker, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grouping', OLD.grouping, NEW.grouping);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_maker_checker', OLD.can_maker_checker, NEW.can_maker_checker);
  END%%


DROP TRIGGER IF EXISTS m_portfolio_account_associations_d%%
CREATE TRIGGER `m_portfolio_account_associations_d`
BEFORE DELETE
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_portfolio_account_associations WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_portfolio_account_associations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_account_id', OLD.loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_loan_account_id', OLD.linked_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_savings_account_id', OLD.linked_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'association_type_enum', OLD.association_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_portfolio_account_associations_i%%
CREATE TRIGGER `m_portfolio_account_associations_i`
AFTER INSERT
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_portfolio_account_associations(id, loan_account_id, savings_account_id, linked_loan_account_id, linked_savings_account_id, association_type_enum, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_account_id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.linked_loan_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.linked_loan_account_id, '", ')), IF(NEW.linked_savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.linked_savings_account_id, '", ')), IF(NEW.association_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.association_type_enum, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_portfolio_account_associations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_account_id', NEW.loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'linked_loan_account_id', NEW.linked_loan_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'linked_savings_account_id', NEW.linked_savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'association_type_enum', NEW.association_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_portfolio_account_associations_u%%
CREATE TRIGGER `m_portfolio_account_associations_u`
AFTER UPDATE
  ON m_portfolio_account_associations
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_portfolio_account_associations SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_account_id = ', IF(NEW.loan_account_id IS NULL, 'NULL', CONCAT('"', NEW.loan_account_id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', linked_loan_account_id = ', IF(NEW.linked_loan_account_id IS NULL, 'NULL', CONCAT('"', NEW.linked_loan_account_id, '"')), ', linked_savings_account_id = ', IF(NEW.linked_savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.linked_savings_account_id, '"')), ', association_type_enum = ', IF(NEW.association_type_enum IS NULL, 'NULL', CONCAT('"', NEW.association_type_enum, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_portfolio_account_associations', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_account_id', OLD.loan_account_id, NEW.loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_loan_account_id', OLD.linked_loan_account_id, NEW.linked_loan_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'linked_savings_account_id', OLD.linked_savings_account_id, NEW.linked_savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'association_type_enum', OLD.association_type_enum, NEW.association_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_portfolio_command_source_d%%
CREATE TRIGGER `m_portfolio_command_source_d`
BEFORE DELETE
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_portfolio_command_source WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_portfolio_command_source', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'api_get_url', OLD.api_get_url, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_id', OLD.resource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subresource_id', OLD.subresource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'command_as_json', OLD.command_as_json, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maker_id', OLD.maker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'made_on_date', OLD.made_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checker_id', OLD.checker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checked_on_date', OLD.checked_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processing_result_enum', OLD.processing_result_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_portfolio_command_source_i%%
CREATE TRIGGER `m_portfolio_command_source_i`
AFTER INSERT
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_portfolio_command_source(id, action_name, entity_name, office_id, group_id, client_id, loan_id, savings_account_id, api_get_url, resource_id, subresource_id, command_as_json, maker_id, made_on_date, checker_id, checked_on_date, processing_result_enum, product_id, transaction_id, creditbureau_id, organisation_creditbureau_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.action_name IS NULL, 'NULL, ', CONCAT('"', NEW.action_name, '", ')), IF(NEW.entity_name IS NULL, 'NULL, ', CONCAT('"', NEW.entity_name, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.api_get_url IS NULL, 'NULL, ', CONCAT('"', NEW.api_get_url, '", ')), IF(NEW.resource_id IS NULL, 'NULL, ', CONCAT('"', NEW.resource_id, '", ')), IF(NEW.subresource_id IS NULL, 'NULL, ', CONCAT('"', NEW.subresource_id, '", ')), IF(NEW.command_as_json IS NULL, 'NULL, ', CONCAT('"', NEW.command_as_json, '", ')), IF(NEW.maker_id IS NULL, 'NULL, ', CONCAT('"', NEW.maker_id, '", ')), IF(NEW.made_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.made_on_date, '", ')), IF(NEW.checker_id IS NULL, 'NULL, ', CONCAT('"', NEW.checker_id, '", ')), IF(NEW.checked_on_date IS NULL, 'NULL, ', CONCAT('"', NEW.checked_on_date, '", ')), IF(NEW.processing_result_enum IS NULL, 'NULL, ', CONCAT('"', NEW.processing_result_enum, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_id, '", ')), IF(NEW.creditbureau_id IS NULL, 'NULL, ', CONCAT('"', NEW.creditbureau_id, '", ')), IF(NEW.organisation_creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.organisation_creditbureau_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_portfolio_command_source', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'action_name', NEW.action_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity_name', NEW.entity_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_id', NEW.loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'api_get_url', NEW.api_get_url, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'resource_id', NEW.resource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'subresource_id', NEW.subresource_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'command_as_json', NEW.command_as_json, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maker_id', NEW.maker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'made_on_date', NEW.made_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checker_id', NEW.checker_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checked_on_date', NEW.checked_on_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'processing_result_enum', NEW.processing_result_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_id', NEW.transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'creditbureau_id', NEW.creditbureau_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', NEW.organisation_creditbureau_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_portfolio_command_source_u%%
CREATE TRIGGER `m_portfolio_command_source_u`
AFTER UPDATE
  ON m_portfolio_command_source
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_portfolio_command_source SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', action_name = ', IF(NEW.action_name IS NULL, 'NULL', CONCAT('"', NEW.action_name, '"')), ', entity_name = ', IF(NEW.entity_name IS NULL, 'NULL', CONCAT('"', NEW.entity_name, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', loan_id = ', IF(NEW.loan_id IS NULL, 'NULL', CONCAT('"', NEW.loan_id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', api_get_url = ', IF(NEW.api_get_url IS NULL, 'NULL', CONCAT('"', NEW.api_get_url, '"')), ', resource_id = ', IF(NEW.resource_id IS NULL, 'NULL', CONCAT('"', NEW.resource_id, '"')), ', subresource_id = ', IF(NEW.subresource_id IS NULL, 'NULL', CONCAT('"', NEW.subresource_id, '"')), ', command_as_json = ', IF(NEW.command_as_json IS NULL, 'NULL', CONCAT('"', NEW.command_as_json, '"')), ', maker_id = ', IF(NEW.maker_id IS NULL, 'NULL', CONCAT('"', NEW.maker_id, '"')), ', made_on_date = ', IF(NEW.made_on_date IS NULL, 'NULL', CONCAT('"', NEW.made_on_date, '"')), ', checker_id = ', IF(NEW.checker_id IS NULL, 'NULL', CONCAT('"', NEW.checker_id, '"')), ', checked_on_date = ', IF(NEW.checked_on_date IS NULL, 'NULL', CONCAT('"', NEW.checked_on_date, '"')), ', processing_result_enum = ', IF(NEW.processing_result_enum IS NULL, 'NULL', CONCAT('"', NEW.processing_result_enum, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', transaction_id = ', IF(NEW.transaction_id IS NULL, 'NULL', CONCAT('"', NEW.transaction_id, '"')), ', creditbureau_id = ', IF(NEW.creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.creditbureau_id, '"')), ', organisation_creditbureau_id = ', IF(NEW.organisation_creditbureau_id IS NULL, 'NULL', CONCAT('"', NEW.organisation_creditbureau_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_portfolio_command_source', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'action_name', OLD.action_name, NEW.action_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity_name', OLD.entity_name, NEW.entity_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_id', OLD.loan_id, NEW.loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'api_get_url', OLD.api_get_url, NEW.api_get_url);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_id', OLD.resource_id, NEW.resource_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'subresource_id', OLD.subresource_id, NEW.subresource_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'command_as_json', OLD.command_as_json, NEW.command_as_json);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maker_id', OLD.maker_id, NEW.maker_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'made_on_date', OLD.made_on_date, NEW.made_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checker_id', OLD.checker_id, NEW.checker_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checked_on_date', OLD.checked_on_date, NEW.checked_on_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'processing_result_enum', OLD.processing_result_enum, NEW.processing_result_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_id', OLD.transaction_id, NEW.transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'creditbureau_id', OLD.creditbureau_id, NEW.creditbureau_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisation_creditbureau_id', OLD.organisation_creditbureau_id, NEW.organisation_creditbureau_id);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_d%%
CREATE TRIGGER `m_product_loan_d`
BEFORE DELETE
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_principal_amount', OLD.min_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_principal_amount', OLD.max_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', OLD.is_linked_to_floating_interest_rates, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_variabe_installments', OLD.allow_variabe_installments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', OLD.min_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', OLD.max_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_number_of_repayments', OLD.min_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_number_of_repayments', OLD.max_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', OLD.include_in_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_borrower_cycle', OLD.use_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'close_date', OLD.close_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', OLD.allow_multiple_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_disbursals', OLD.max_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_days_for_npa', OLD.overdue_days_for_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', OLD.min_days_between_disbursal_and_first_repayment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hold_guarantee_funds', OLD.hold_guarantee_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', OLD.principal_threshold_for_last_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', OLD.account_moves_out_of_npa_only_on_arrears_completion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', OLD.can_define_fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', OLD.instalment_amount_in_multiples_of, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_use_for_topup', OLD.can_use_for_topup, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', OLD.sync_expected_with_disbursement_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_i%%
CREATE TRIGGER `m_product_loan_i`
AFTER INSERT
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan(id, short_name, currency_code, currency_digits, currency_multiplesof, principal_amount, min_principal_amount, max_principal_amount, arrearstolerance_amount, name, description, fund_id, is_linked_to_floating_interest_rates, allow_variabe_installments, nominal_interest_rate_per_period, min_nominal_interest_rate_per_period, max_nominal_interest_rate_per_period, interest_period_frequency_enum, annual_nominal_interest_rate, interest_method_enum, interest_calculated_in_period_enum, allow_partial_period_interest_calcualtion, repay_every, repayment_period_frequency_enum, number_of_repayments, min_number_of_repayments, max_number_of_repayments, grace_on_principal_periods, recurring_moratorium_principal_periods, grace_on_interest_periods, grace_interest_free_periods, amortization_method_enum, accounting_type, loan_transaction_strategy_id, external_id, include_in_borrower_cycle, use_borrower_cycle, start_date, close_date, allow_multiple_disbursals, max_disbursals, max_outstanding_loan_balance, grace_on_arrears_ageing, overdue_days_for_npa, days_in_month_enum, days_in_year_enum, interest_recalculation_enabled, min_days_between_disbursal_and_first_repayment, hold_guarantee_funds, principal_threshold_for_last_installment, account_moves_out_of_npa_only_on_arrears_completion, can_define_fixed_emi_amount, instalment_amount_in_multiples_of, can_use_for_topup, sync_expected_with_disbursement_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.short_name IS NULL, 'NULL, ', CONCAT('"', NEW.short_name, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.principal_amount, '", ')), IF(NEW.min_principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.min_principal_amount, '", ')), IF(NEW.max_principal_amount IS NULL, 'NULL, ', CONCAT('"', NEW.max_principal_amount, '", ')), IF(NEW.arrearstolerance_amount IS NULL, 'NULL, ', CONCAT('"', NEW.arrearstolerance_amount, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.fund_id IS NULL, 'NULL, ', CONCAT('"', NEW.fund_id, '", ')), IF(NEW.is_linked_to_floating_interest_rates IS NULL, 'NULL, ', CONCAT('"', NEW.is_linked_to_floating_interest_rates, '", ')), IF(NEW.allow_variabe_installments IS NULL, 'NULL, ', CONCAT('"', NEW.allow_variabe_installments, '", ')), IF(NEW.nominal_interest_rate_per_period IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_interest_rate_per_period, '", ')), IF(NEW.min_nominal_interest_rate_per_period IS NULL, 'NULL, ', CONCAT('"', NEW.min_nominal_interest_rate_per_period, '", ')), IF(NEW.max_nominal_interest_rate_per_period IS NULL, 'NULL, ', CONCAT('"', NEW.max_nominal_interest_rate_per_period, '", ')), IF(NEW.interest_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_period_frequency_enum, '", ')), IF(NEW.annual_nominal_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.annual_nominal_interest_rate, '", ')), IF(NEW.interest_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_method_enum, '", ')), IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculated_in_period_enum, '", ')), IF(NEW.allow_partial_period_interest_calcualtion IS NULL, 'NULL, ', CONCAT('"', NEW.allow_partial_period_interest_calcualtion, '", ')), IF(NEW.repay_every IS NULL, 'NULL, ', CONCAT('"', NEW.repay_every, '", ')), IF(NEW.repayment_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.repayment_period_frequency_enum, '", ')), IF(NEW.number_of_repayments IS NULL, 'NULL, ', CONCAT('"', NEW.number_of_repayments, '", ')), IF(NEW.min_number_of_repayments IS NULL, 'NULL, ', CONCAT('"', NEW.min_number_of_repayments, '", ')), IF(NEW.max_number_of_repayments IS NULL, 'NULL, ', CONCAT('"', NEW.max_number_of_repayments, '", ')), IF(NEW.grace_on_principal_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_principal_periods, '", ')), IF(NEW.recurring_moratorium_principal_periods IS NULL, 'NULL, ', CONCAT('"', NEW.recurring_moratorium_principal_periods, '", ')), IF(NEW.grace_on_interest_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_interest_periods, '", ')), IF(NEW.grace_interest_free_periods IS NULL, 'NULL, ', CONCAT('"', NEW.grace_interest_free_periods, '", ')), IF(NEW.amortization_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.amortization_method_enum, '", ')), IF(NEW.accounting_type IS NULL, 'NULL, ', CONCAT('"', NEW.accounting_type, '", ')), IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_strategy_id, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.include_in_borrower_cycle IS NULL, 'NULL, ', CONCAT('"', NEW.include_in_borrower_cycle, '", ')), IF(NEW.use_borrower_cycle IS NULL, 'NULL, ', CONCAT('"', NEW.use_borrower_cycle, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.close_date IS NULL, 'NULL, ', CONCAT('"', NEW.close_date, '", ')), IF(NEW.allow_multiple_disbursals IS NULL, 'NULL, ', CONCAT('"', NEW.allow_multiple_disbursals, '", ')), IF(NEW.max_disbursals IS NULL, 'NULL, ', CONCAT('"', NEW.max_disbursals, '", ')), IF(NEW.max_outstanding_loan_balance IS NULL, 'NULL, ', CONCAT('"', NEW.max_outstanding_loan_balance, '", ')), IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL, ', CONCAT('"', NEW.grace_on_arrears_ageing, '", ')), IF(NEW.overdue_days_for_npa IS NULL, 'NULL, ', CONCAT('"', NEW.overdue_days_for_npa, '", ')), IF(NEW.days_in_month_enum IS NULL, 'NULL, ', CONCAT('"', NEW.days_in_month_enum, '", ')), IF(NEW.days_in_year_enum IS NULL, 'NULL, ', CONCAT('"', NEW.days_in_year_enum, '", ')), IF(NEW.interest_recalculation_enabled IS NULL, 'NULL, ', CONCAT('"', NEW.interest_recalculation_enabled, '", ')), IF(NEW.min_days_between_disbursal_and_first_repayment IS NULL, 'NULL, ', CONCAT('"', NEW.min_days_between_disbursal_and_first_repayment, '", ')), IF(NEW.hold_guarantee_funds IS NULL, 'NULL, ', CONCAT('"', NEW.hold_guarantee_funds, '", ')), IF(NEW.principal_threshold_for_last_installment IS NULL, 'NULL, ', CONCAT('"', NEW.principal_threshold_for_last_installment, '", ')), IF(NEW.account_moves_out_of_npa_only_on_arrears_completion IS NULL, 'NULL, ', CONCAT('"', NEW.account_moves_out_of_npa_only_on_arrears_completion, '", ')), IF(NEW.can_define_fixed_emi_amount IS NULL, 'NULL, ', CONCAT('"', NEW.can_define_fixed_emi_amount, '", ')), IF(NEW.instalment_amount_in_multiples_of IS NULL, 'NULL, ', CONCAT('"', NEW.instalment_amount_in_multiples_of, '", ')), IF(NEW.can_use_for_topup IS NULL, 'NULL, ', CONCAT('"', NEW.can_use_for_topup, '", ')), IF(NEW.sync_expected_with_disbursement_date IS NULL, 'NULL', CONCAT('"', NEW.sync_expected_with_disbursement_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_amount', NEW.principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_principal_amount', NEW.min_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_principal_amount', NEW.max_principal_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fund_id', NEW.fund_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', NEW.is_linked_to_floating_interest_rates, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_variabe_installments', NEW.allow_variabe_installments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', NEW.nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', NEW.min_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', NEW.max_nominal_interest_rate_per_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', NEW.interest_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', NEW.annual_nominal_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', NEW.allow_partial_period_interest_calcualtion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', NEW.repayment_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_repayments', NEW.number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_number_of_repayments', NEW.min_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_number_of_repayments', NEW.max_number_of_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_principal_periods', NEW.grace_on_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', NEW.recurring_moratorium_principal_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_interest_periods', NEW.grace_on_interest_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_interest_free_periods', NEW.grace_interest_free_periods, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', NEW.include_in_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'use_borrower_cycle', NEW.use_borrower_cycle, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'close_date', NEW.close_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', NEW.allow_multiple_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_disbursals', NEW.max_disbursals, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', NEW.max_outstanding_loan_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdue_days_for_npa', NEW.overdue_days_for_npa, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_month_enum', NEW.days_in_month_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_in_year_enum', NEW.days_in_year_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', NEW.interest_recalculation_enabled, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', NEW.min_days_between_disbursal_and_first_repayment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'hold_guarantee_funds', NEW.hold_guarantee_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', NEW.principal_threshold_for_last_installment, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', NEW.account_moves_out_of_npa_only_on_arrears_completion, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', NEW.can_define_fixed_emi_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', NEW.instalment_amount_in_multiples_of, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'can_use_for_topup', NEW.can_use_for_topup, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', NEW.sync_expected_with_disbursement_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_u%%
CREATE TRIGGER `m_product_loan_u`
AFTER UPDATE
  ON m_product_loan
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', short_name = ', IF(NEW.short_name IS NULL, 'NULL', CONCAT('"', NEW.short_name, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', principal_amount = ', IF(NEW.principal_amount IS NULL, 'NULL', CONCAT('"', NEW.principal_amount, '"')), ', min_principal_amount = ', IF(NEW.min_principal_amount IS NULL, 'NULL', CONCAT('"', NEW.min_principal_amount, '"')), ', max_principal_amount = ', IF(NEW.max_principal_amount IS NULL, 'NULL', CONCAT('"', NEW.max_principal_amount, '"')), ', arrearstolerance_amount = ', IF(NEW.arrearstolerance_amount IS NULL, 'NULL', CONCAT('"', NEW.arrearstolerance_amount, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', fund_id = ', IF(NEW.fund_id IS NULL, 'NULL', CONCAT('"', NEW.fund_id, '"')), ', is_linked_to_floating_interest_rates = ', IF(NEW.is_linked_to_floating_interest_rates IS NULL, 'NULL', CONCAT('"', NEW.is_linked_to_floating_interest_rates, '"')), ', allow_variabe_installments = ', IF(NEW.allow_variabe_installments IS NULL, 'NULL', CONCAT('"', NEW.allow_variabe_installments, '"')), ', nominal_interest_rate_per_period = ', IF(NEW.nominal_interest_rate_per_period IS NULL, 'NULL', CONCAT('"', NEW.nominal_interest_rate_per_period, '"')), ', min_nominal_interest_rate_per_period = ', IF(NEW.min_nominal_interest_rate_per_period IS NULL, 'NULL', CONCAT('"', NEW.min_nominal_interest_rate_per_period, '"')), ', max_nominal_interest_rate_per_period = ', IF(NEW.max_nominal_interest_rate_per_period IS NULL, 'NULL', CONCAT('"', NEW.max_nominal_interest_rate_per_period, '"')), ', interest_period_frequency_enum = ', IF(NEW.interest_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_period_frequency_enum, '"')), ', annual_nominal_interest_rate = ', IF(NEW.annual_nominal_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.annual_nominal_interest_rate, '"')), ', interest_method_enum = ', IF(NEW.interest_method_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_method_enum, '"')), ', interest_calculated_in_period_enum = ', IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculated_in_period_enum, '"')), ', allow_partial_period_interest_calcualtion = ', IF(NEW.allow_partial_period_interest_calcualtion IS NULL, 'NULL', CONCAT('"', NEW.allow_partial_period_interest_calcualtion, '"')), ', repay_every = ', IF(NEW.repay_every IS NULL, 'NULL', CONCAT('"', NEW.repay_every, '"')), ', repayment_period_frequency_enum = ', IF(NEW.repayment_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.repayment_period_frequency_enum, '"')), ', number_of_repayments = ', IF(NEW.number_of_repayments IS NULL, 'NULL', CONCAT('"', NEW.number_of_repayments, '"')), ', min_number_of_repayments = ', IF(NEW.min_number_of_repayments IS NULL, 'NULL', CONCAT('"', NEW.min_number_of_repayments, '"')), ', max_number_of_repayments = ', IF(NEW.max_number_of_repayments IS NULL, 'NULL', CONCAT('"', NEW.max_number_of_repayments, '"')), ', grace_on_principal_periods = ', IF(NEW.grace_on_principal_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_on_principal_periods, '"')), ', recurring_moratorium_principal_periods = ', IF(NEW.recurring_moratorium_principal_periods IS NULL, 'NULL', CONCAT('"', NEW.recurring_moratorium_principal_periods, '"')), ', grace_on_interest_periods = ', IF(NEW.grace_on_interest_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_on_interest_periods, '"')), ', grace_interest_free_periods = ', IF(NEW.grace_interest_free_periods IS NULL, 'NULL', CONCAT('"', NEW.grace_interest_free_periods, '"')), ', amortization_method_enum = ', IF(NEW.amortization_method_enum IS NULL, 'NULL', CONCAT('"', NEW.amortization_method_enum, '"')), ', accounting_type = ', IF(NEW.accounting_type IS NULL, 'NULL', CONCAT('"', NEW.accounting_type, '"')), ', loan_transaction_strategy_id = ', IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_strategy_id, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', include_in_borrower_cycle = ', IF(NEW.include_in_borrower_cycle IS NULL, 'NULL', CONCAT('"', NEW.include_in_borrower_cycle, '"')), ', use_borrower_cycle = ', IF(NEW.use_borrower_cycle IS NULL, 'NULL', CONCAT('"', NEW.use_borrower_cycle, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', close_date = ', IF(NEW.close_date IS NULL, 'NULL', CONCAT('"', NEW.close_date, '"')), ', allow_multiple_disbursals = ', IF(NEW.allow_multiple_disbursals IS NULL, 'NULL', CONCAT('"', NEW.allow_multiple_disbursals, '"')), ', max_disbursals = ', IF(NEW.max_disbursals IS NULL, 'NULL', CONCAT('"', NEW.max_disbursals, '"')), ', max_outstanding_loan_balance = ', IF(NEW.max_outstanding_loan_balance IS NULL, 'NULL', CONCAT('"', NEW.max_outstanding_loan_balance, '"')), ', grace_on_arrears_ageing = ', IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL', CONCAT('"', NEW.grace_on_arrears_ageing, '"')), ', overdue_days_for_npa = ', IF(NEW.overdue_days_for_npa IS NULL, 'NULL', CONCAT('"', NEW.overdue_days_for_npa, '"')), ', days_in_month_enum = ', IF(NEW.days_in_month_enum IS NULL, 'NULL', CONCAT('"', NEW.days_in_month_enum, '"')), ', days_in_year_enum = ', IF(NEW.days_in_year_enum IS NULL, 'NULL', CONCAT('"', NEW.days_in_year_enum, '"')), ', interest_recalculation_enabled = ', IF(NEW.interest_recalculation_enabled IS NULL, 'NULL', CONCAT('"', NEW.interest_recalculation_enabled, '"')), ', min_days_between_disbursal_and_first_repayment = ', IF(NEW.min_days_between_disbursal_and_first_repayment IS NULL, 'NULL', CONCAT('"', NEW.min_days_between_disbursal_and_first_repayment, '"')), ', hold_guarantee_funds = ', IF(NEW.hold_guarantee_funds IS NULL, 'NULL', CONCAT('"', NEW.hold_guarantee_funds, '"')), ', principal_threshold_for_last_installment = ', IF(NEW.principal_threshold_for_last_installment IS NULL, 'NULL', CONCAT('"', NEW.principal_threshold_for_last_installment, '"')), ', account_moves_out_of_npa_only_on_arrears_completion = ', IF(NEW.account_moves_out_of_npa_only_on_arrears_completion IS NULL, 'NULL', CONCAT('"', NEW.account_moves_out_of_npa_only_on_arrears_completion, '"')), ', can_define_fixed_emi_amount = ', IF(NEW.can_define_fixed_emi_amount IS NULL, 'NULL', CONCAT('"', NEW.can_define_fixed_emi_amount, '"')), ', instalment_amount_in_multiples_of = ', IF(NEW.instalment_amount_in_multiples_of IS NULL, 'NULL', CONCAT('"', NEW.instalment_amount_in_multiples_of, '"')), ', can_use_for_topup = ', IF(NEW.can_use_for_topup IS NULL, 'NULL', CONCAT('"', NEW.can_use_for_topup, '"')), ', sync_expected_with_disbursement_date = ', IF(NEW.sync_expected_with_disbursement_date IS NULL, 'NULL', CONCAT('"', NEW.sync_expected_with_disbursement_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_amount', OLD.principal_amount, NEW.principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_principal_amount', OLD.min_principal_amount, NEW.min_principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_principal_amount', OLD.max_principal_amount, NEW.max_principal_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fund_id', OLD.fund_id, NEW.fund_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_linked_to_floating_interest_rates', OLD.is_linked_to_floating_interest_rates, NEW.is_linked_to_floating_interest_rates);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_variabe_installments', OLD.allow_variabe_installments, NEW.allow_variabe_installments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_interest_rate_per_period', OLD.nominal_interest_rate_per_period, NEW.nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_nominal_interest_rate_per_period', OLD.min_nominal_interest_rate_per_period, NEW.min_nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_nominal_interest_rate_per_period', OLD.max_nominal_interest_rate_per_period, NEW.max_nominal_interest_rate_per_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_period_frequency_enum', OLD.interest_period_frequency_enum, NEW.interest_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_nominal_interest_rate', OLD.annual_nominal_interest_rate, NEW.annual_nominal_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_partial_period_interest_calcualtion', OLD.allow_partial_period_interest_calcualtion, NEW.allow_partial_period_interest_calcualtion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_period_frequency_enum', OLD.repayment_period_frequency_enum, NEW.repayment_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_repayments', OLD.number_of_repayments, NEW.number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_number_of_repayments', OLD.min_number_of_repayments, NEW.min_number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_number_of_repayments', OLD.max_number_of_repayments, NEW.max_number_of_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_principal_periods', OLD.grace_on_principal_periods, NEW.grace_on_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurring_moratorium_principal_periods', OLD.recurring_moratorium_principal_periods, NEW.recurring_moratorium_principal_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_interest_periods', OLD.grace_on_interest_periods, NEW.grace_on_interest_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_interest_free_periods', OLD.grace_interest_free_periods, NEW.grace_interest_free_periods);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'include_in_borrower_cycle', OLD.include_in_borrower_cycle, NEW.include_in_borrower_cycle);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_borrower_cycle', OLD.use_borrower_cycle, NEW.use_borrower_cycle);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'close_date', OLD.close_date, NEW.close_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_multiple_disbursals', OLD.allow_multiple_disbursals, NEW.allow_multiple_disbursals);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_disbursals', OLD.max_disbursals, NEW.max_disbursals);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_outstanding_loan_balance', OLD.max_outstanding_loan_balance, NEW.max_outstanding_loan_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdue_days_for_npa', OLD.overdue_days_for_npa, NEW.overdue_days_for_npa);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_month_enum', OLD.days_in_month_enum, NEW.days_in_month_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_in_year_enum', OLD.days_in_year_enum, NEW.days_in_year_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_recalculation_enabled', OLD.interest_recalculation_enabled, NEW.interest_recalculation_enabled);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_days_between_disbursal_and_first_repayment', OLD.min_days_between_disbursal_and_first_repayment, NEW.min_days_between_disbursal_and_first_repayment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'hold_guarantee_funds', OLD.hold_guarantee_funds, NEW.hold_guarantee_funds);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'principal_threshold_for_last_installment', OLD.principal_threshold_for_last_installment, NEW.principal_threshold_for_last_installment);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_moves_out_of_npa_only_on_arrears_completion', OLD.account_moves_out_of_npa_only_on_arrears_completion, NEW.account_moves_out_of_npa_only_on_arrears_completion);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_define_fixed_emi_amount', OLD.can_define_fixed_emi_amount, NEW.can_define_fixed_emi_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'instalment_amount_in_multiples_of', OLD.instalment_amount_in_multiples_of, NEW.instalment_amount_in_multiples_of);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'can_use_for_topup', OLD.can_use_for_topup, NEW.can_use_for_topup);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sync_expected_with_disbursement_date', OLD.sync_expected_with_disbursement_date, NEW.sync_expected_with_disbursement_date);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_charge_d%%
CREATE TRIGGER `m_product_loan_charge_d`
BEFORE DELETE
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_charge WHERE product_loan_id = "', OLD.product_loan_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_loan_id', OLD.product_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_charge_i%%
CREATE TRIGGER `m_product_loan_charge_i`
AFTER INSERT
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_charge(product_loan_id, charge_id) VALUES(', IF(NEW.product_loan_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_loan_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_loan_id', NEW.product_loan_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_charge_u%%
CREATE TRIGGER `m_product_loan_charge_u`
AFTER UPDATE
  ON m_product_loan_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_charge SET product_loan_id = ', IF(NEW.product_loan_id IS NULL, 'NULL', CONCAT('"', NEW.product_loan_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ' WHERE product_loan_id = "', NEW.product_loan_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_loan_id', OLD.product_loan_id, NEW.product_loan_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_d%%
CREATE TRIGGER `m_product_loan_configurable_attributes_d`
BEFORE DELETE
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_configurable_attributes WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_configurable_attributes', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'moratorium', OLD.moratorium, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_i%%
CREATE TRIGGER `m_product_loan_configurable_attributes_i`
AFTER INSERT
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_configurable_attributes(id, loan_product_id, amortization_method_enum, interest_method_enum, loan_transaction_strategy_id, interest_calculated_in_period_enum, arrearstolerance_amount, repay_every, moratorium, grace_on_arrears_ageing) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.amortization_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.amortization_method_enum, '", ')), IF(NEW.interest_method_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_method_enum, '", ')), IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_transaction_strategy_id, '", ')), IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculated_in_period_enum, '", ')), IF(NEW.arrearstolerance_amount IS NULL, 'NULL, ', CONCAT('"', NEW.arrearstolerance_amount, '", ')), IF(NEW.repay_every IS NULL, 'NULL, ', CONCAT('"', NEW.repay_every, '", ')), IF(NEW.moratorium IS NULL, 'NULL, ', CONCAT('"', NEW.moratorium, '", ')), IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL', CONCAT('"', NEW.grace_on_arrears_ageing, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_configurable_attributes', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amortization_method_enum', NEW.amortization_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_method_enum', NEW.interest_method_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', NEW.loan_transaction_strategy_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', NEW.interest_calculated_in_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrearstolerance_amount', NEW.arrearstolerance_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repay_every', NEW.repay_every, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'moratorium', NEW.moratorium, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', NEW.grace_on_arrears_ageing, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_configurable_attributes_u%%
CREATE TRIGGER `m_product_loan_configurable_attributes_u`
AFTER UPDATE
  ON m_product_loan_configurable_attributes
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_configurable_attributes SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', amortization_method_enum = ', IF(NEW.amortization_method_enum IS NULL, 'NULL', CONCAT('"', NEW.amortization_method_enum, '"')), ', interest_method_enum = ', IF(NEW.interest_method_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_method_enum, '"')), ', loan_transaction_strategy_id = ', IF(NEW.loan_transaction_strategy_id IS NULL, 'NULL', CONCAT('"', NEW.loan_transaction_strategy_id, '"')), ', interest_calculated_in_period_enum = ', IF(NEW.interest_calculated_in_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculated_in_period_enum, '"')), ', arrearstolerance_amount = ', IF(NEW.arrearstolerance_amount IS NULL, 'NULL', CONCAT('"', NEW.arrearstolerance_amount, '"')), ', repay_every = ', IF(NEW.repay_every IS NULL, 'NULL', CONCAT('"', NEW.repay_every, '"')), ', moratorium = ', IF(NEW.moratorium IS NULL, 'NULL', CONCAT('"', NEW.moratorium, '"')), ', grace_on_arrears_ageing = ', IF(NEW.grace_on_arrears_ageing IS NULL, 'NULL', CONCAT('"', NEW.grace_on_arrears_ageing, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_configurable_attributes', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amortization_method_enum', OLD.amortization_method_enum, NEW.amortization_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_method_enum', OLD.interest_method_enum, NEW.interest_method_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_transaction_strategy_id', OLD.loan_transaction_strategy_id, NEW.loan_transaction_strategy_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculated_in_period_enum', OLD.interest_calculated_in_period_enum, NEW.interest_calculated_in_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrearstolerance_amount', OLD.arrearstolerance_amount, NEW.arrearstolerance_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repay_every', OLD.repay_every, NEW.repay_every);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'moratorium', OLD.moratorium, NEW.moratorium);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'grace_on_arrears_ageing', OLD.grace_on_arrears_ageing, NEW.grace_on_arrears_ageing);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_floating_rates_d%%
CREATE TRIGGER `m_product_loan_floating_rates_d`
BEFORE DELETE
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_floating_rates WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_differential_lending_rate', OLD.min_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_differential_lending_rate', OLD.default_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_differential_lending_rate', OLD.max_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', OLD.is_floating_interest_rate_calculation_allowed, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_floating_rates_i%%
CREATE TRIGGER `m_product_loan_floating_rates_i`
AFTER INSERT
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_floating_rates(id, loan_product_id, floating_rates_id, interest_rate_differential, min_differential_lending_rate, default_differential_lending_rate, max_differential_lending_rate, is_floating_interest_rate_calculation_allowed) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.floating_rates_id IS NULL, 'NULL, ', CONCAT('"', NEW.floating_rates_id, '", ')), IF(NEW.interest_rate_differential IS NULL, 'NULL, ', CONCAT('"', NEW.interest_rate_differential, '", ')), IF(NEW.min_differential_lending_rate IS NULL, 'NULL, ', CONCAT('"', NEW.min_differential_lending_rate, '", ')), IF(NEW.default_differential_lending_rate IS NULL, 'NULL, ', CONCAT('"', NEW.default_differential_lending_rate, '", ')), IF(NEW.max_differential_lending_rate IS NULL, 'NULL, ', CONCAT('"', NEW.max_differential_lending_rate, '", ')), IF(NEW.is_floating_interest_rate_calculation_allowed IS NULL, 'NULL', CONCAT('"', NEW.is_floating_interest_rate_calculation_allowed, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'floating_rates_id', NEW.floating_rates_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_rate_differential', NEW.interest_rate_differential, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_differential_lending_rate', NEW.min_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_differential_lending_rate', NEW.default_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_differential_lending_rate', NEW.max_differential_lending_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', NEW.is_floating_interest_rate_calculation_allowed, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_floating_rates_u%%
CREATE TRIGGER `m_product_loan_floating_rates_u`
AFTER UPDATE
  ON m_product_loan_floating_rates
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_floating_rates SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', floating_rates_id = ', IF(NEW.floating_rates_id IS NULL, 'NULL', CONCAT('"', NEW.floating_rates_id, '"')), ', interest_rate_differential = ', IF(NEW.interest_rate_differential IS NULL, 'NULL', CONCAT('"', NEW.interest_rate_differential, '"')), ', min_differential_lending_rate = ', IF(NEW.min_differential_lending_rate IS NULL, 'NULL', CONCAT('"', NEW.min_differential_lending_rate, '"')), ', default_differential_lending_rate = ', IF(NEW.default_differential_lending_rate IS NULL, 'NULL', CONCAT('"', NEW.default_differential_lending_rate, '"')), ', max_differential_lending_rate = ', IF(NEW.max_differential_lending_rate IS NULL, 'NULL', CONCAT('"', NEW.max_differential_lending_rate, '"')), ', is_floating_interest_rate_calculation_allowed = ', IF(NEW.is_floating_interest_rate_calculation_allowed IS NULL, 'NULL', CONCAT('"', NEW.is_floating_interest_rate_calculation_allowed, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_floating_rates', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'floating_rates_id', OLD.floating_rates_id, NEW.floating_rates_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_rate_differential', OLD.interest_rate_differential, NEW.interest_rate_differential);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_differential_lending_rate', OLD.min_differential_lending_rate, NEW.min_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_differential_lending_rate', OLD.default_differential_lending_rate, NEW.default_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_differential_lending_rate', OLD.max_differential_lending_rate, NEW.max_differential_lending_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_floating_interest_rate_calculation_allowed', OLD.is_floating_interest_rate_calculation_allowed, NEW.is_floating_interest_rate_calculation_allowed);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_d%%
CREATE TRIGGER `m_product_loan_guarantee_details_d`
BEFORE DELETE
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_guarantee_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_guarantee_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_guarantee', OLD.mandatory_guarantee, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', OLD.minimum_guarantee_from_own_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', OLD.minimum_guarantee_from_guarantor_funds, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_i%%
CREATE TRIGGER `m_product_loan_guarantee_details_i`
AFTER INSERT
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_guarantee_details(id, loan_product_id, mandatory_guarantee, minimum_guarantee_from_own_funds, minimum_guarantee_from_guarantor_funds) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.mandatory_guarantee IS NULL, 'NULL, ', CONCAT('"', NEW.mandatory_guarantee, '", ')), IF(NEW.minimum_guarantee_from_own_funds IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_guarantee_from_own_funds, '", ')), IF(NEW.minimum_guarantee_from_guarantor_funds IS NULL, 'NULL', CONCAT('"', NEW.minimum_guarantee_from_guarantor_funds, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_guarantee_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mandatory_guarantee', NEW.mandatory_guarantee, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', NEW.minimum_guarantee_from_own_funds, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', NEW.minimum_guarantee_from_guarantor_funds, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_guarantee_details_u%%
CREATE TRIGGER `m_product_loan_guarantee_details_u`
AFTER UPDATE
  ON m_product_loan_guarantee_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_guarantee_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', mandatory_guarantee = ', IF(NEW.mandatory_guarantee IS NULL, 'NULL', CONCAT('"', NEW.mandatory_guarantee, '"')), ', minimum_guarantee_from_own_funds = ', IF(NEW.minimum_guarantee_from_own_funds IS NULL, 'NULL', CONCAT('"', NEW.minimum_guarantee_from_own_funds, '"')), ', minimum_guarantee_from_guarantor_funds = ', IF(NEW.minimum_guarantee_from_guarantor_funds IS NULL, 'NULL', CONCAT('"', NEW.minimum_guarantee_from_guarantor_funds, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_guarantee_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mandatory_guarantee', OLD.mandatory_guarantee, NEW.mandatory_guarantee);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_own_funds', OLD.minimum_guarantee_from_own_funds, NEW.minimum_guarantee_from_own_funds);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_guarantee_from_guarantor_funds', OLD.minimum_guarantee_from_guarantor_funds, NEW.minimum_guarantee_from_guarantor_funds);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_d%%
CREATE TRIGGER `m_product_loan_recalculation_details_d`
BEFORE DELETE
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_recalculation_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', OLD.arrears_based_on_original_schedule, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', OLD.pre_close_interest_calculation_strategy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_i%%
CREATE TRIGGER `m_product_loan_recalculation_details_i`
AFTER INSERT
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_recalculation_details(id, product_id, compound_type_enum, reschedule_strategy_enum, rest_frequency_type_enum, rest_frequency_interval, arrears_based_on_original_schedule, pre_close_interest_calculation_strategy, compounding_frequency_type_enum, compounding_frequency_interval, rest_frequency_nth_day_enum, rest_frequency_on_day, rest_frequency_weekday_enum, compounding_frequency_nth_day_enum, compounding_frequency_on_day, compounding_frequency_weekday_enum, is_compounding_to_be_posted_as_transaction, allow_compounding_on_eod) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.compound_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compound_type_enum, '", ')), IF(NEW.reschedule_strategy_enum IS NULL, 'NULL, ', CONCAT('"', NEW.reschedule_strategy_enum, '", ')), IF(NEW.rest_frequency_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_type_enum, '", ')), IF(NEW.rest_frequency_interval IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_interval, '", ')), IF(NEW.arrears_based_on_original_schedule IS NULL, 'NULL, ', CONCAT('"', NEW.arrears_based_on_original_schedule, '", ')), IF(NEW.pre_close_interest_calculation_strategy IS NULL, 'NULL, ', CONCAT('"', NEW.pre_close_interest_calculation_strategy, '", ')), IF(NEW.compounding_frequency_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_type_enum, '", ')), IF(NEW.compounding_frequency_interval IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_interval, '", ')), IF(NEW.rest_frequency_nth_day_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_nth_day_enum, '", ')), IF(NEW.rest_frequency_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_on_day, '", ')), IF(NEW.rest_frequency_weekday_enum IS NULL, 'NULL, ', CONCAT('"', NEW.rest_frequency_weekday_enum, '", ')), IF(NEW.compounding_frequency_nth_day_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_nth_day_enum, '", ')), IF(NEW.compounding_frequency_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_on_day, '", ')), IF(NEW.compounding_frequency_weekday_enum IS NULL, 'NULL, ', CONCAT('"', NEW.compounding_frequency_weekday_enum, '", ')), IF(NEW.is_compounding_to_be_posted_as_transaction IS NULL, 'NULL, ', CONCAT('"', NEW.is_compounding_to_be_posted_as_transaction, '", ')), IF(NEW.allow_compounding_on_eod IS NULL, 'NULL', CONCAT('"', NEW.allow_compounding_on_eod, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compound_type_enum', NEW.compound_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', NEW.reschedule_strategy_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', NEW.rest_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_interval', NEW.rest_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', NEW.arrears_based_on_original_schedule, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', NEW.pre_close_interest_calculation_strategy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', NEW.compounding_frequency_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_interval', NEW.compounding_frequency_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', NEW.rest_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_on_day', NEW.rest_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', NEW.rest_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', NEW.compounding_frequency_nth_day_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', NEW.compounding_frequency_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', NEW.compounding_frequency_weekday_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', NEW.is_compounding_to_be_posted_as_transaction, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', NEW.allow_compounding_on_eod, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_recalculation_details_u%%
CREATE TRIGGER `m_product_loan_recalculation_details_u`
AFTER UPDATE
  ON m_product_loan_recalculation_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_recalculation_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', compound_type_enum = ', IF(NEW.compound_type_enum IS NULL, 'NULL', CONCAT('"', NEW.compound_type_enum, '"')), ', reschedule_strategy_enum = ', IF(NEW.reschedule_strategy_enum IS NULL, 'NULL', CONCAT('"', NEW.reschedule_strategy_enum, '"')), ', rest_frequency_type_enum = ', IF(NEW.rest_frequency_type_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_type_enum, '"')), ', rest_frequency_interval = ', IF(NEW.rest_frequency_interval IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_interval, '"')), ', arrears_based_on_original_schedule = ', IF(NEW.arrears_based_on_original_schedule IS NULL, 'NULL', CONCAT('"', NEW.arrears_based_on_original_schedule, '"')), ', pre_close_interest_calculation_strategy = ', IF(NEW.pre_close_interest_calculation_strategy IS NULL, 'NULL', CONCAT('"', NEW.pre_close_interest_calculation_strategy, '"')), ', compounding_frequency_type_enum = ', IF(NEW.compounding_frequency_type_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_type_enum, '"')), ', compounding_frequency_interval = ', IF(NEW.compounding_frequency_interval IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_interval, '"')), ', rest_frequency_nth_day_enum = ', IF(NEW.rest_frequency_nth_day_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_nth_day_enum, '"')), ', rest_frequency_on_day = ', IF(NEW.rest_frequency_on_day IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_on_day, '"')), ', rest_frequency_weekday_enum = ', IF(NEW.rest_frequency_weekday_enum IS NULL, 'NULL', CONCAT('"', NEW.rest_frequency_weekday_enum, '"')), ', compounding_frequency_nth_day_enum = ', IF(NEW.compounding_frequency_nth_day_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_nth_day_enum, '"')), ', compounding_frequency_on_day = ', IF(NEW.compounding_frequency_on_day IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_on_day, '"')), ', compounding_frequency_weekday_enum = ', IF(NEW.compounding_frequency_weekday_enum IS NULL, 'NULL', CONCAT('"', NEW.compounding_frequency_weekday_enum, '"')), ', is_compounding_to_be_posted_as_transaction = ', IF(NEW.is_compounding_to_be_posted_as_transaction IS NULL, 'NULL', CONCAT('"', NEW.is_compounding_to_be_posted_as_transaction, '"')), ', allow_compounding_on_eod = ', IF(NEW.allow_compounding_on_eod IS NULL, 'NULL', CONCAT('"', NEW.allow_compounding_on_eod, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_recalculation_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compound_type_enum', OLD.compound_type_enum, NEW.compound_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reschedule_strategy_enum', OLD.reschedule_strategy_enum, NEW.reschedule_strategy_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_type_enum', OLD.rest_frequency_type_enum, NEW.rest_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_interval', OLD.rest_frequency_interval, NEW.rest_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'arrears_based_on_original_schedule', OLD.arrears_based_on_original_schedule, NEW.arrears_based_on_original_schedule);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'pre_close_interest_calculation_strategy', OLD.pre_close_interest_calculation_strategy, NEW.pre_close_interest_calculation_strategy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_type_enum', OLD.compounding_frequency_type_enum, NEW.compounding_frequency_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_interval', OLD.compounding_frequency_interval, NEW.compounding_frequency_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_nth_day_enum', OLD.rest_frequency_nth_day_enum, NEW.rest_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_on_day', OLD.rest_frequency_on_day, NEW.rest_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rest_frequency_weekday_enum', OLD.rest_frequency_weekday_enum, NEW.rest_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_nth_day_enum', OLD.compounding_frequency_nth_day_enum, NEW.compounding_frequency_nth_day_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_on_day', OLD.compounding_frequency_on_day, NEW.compounding_frequency_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'compounding_frequency_weekday_enum', OLD.compounding_frequency_weekday_enum, NEW.compounding_frequency_weekday_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_compounding_to_be_posted_as_transaction', OLD.is_compounding_to_be_posted_as_transaction, NEW.is_compounding_to_be_posted_as_transaction);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_compounding_on_eod', OLD.allow_compounding_on_eod, NEW.allow_compounding_on_eod);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_d%%
CREATE TRIGGER `m_product_loan_variable_installment_config_d`
BEFORE DELETE
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_variable_installment_config WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_variable_installment_config', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_gap', OLD.minimum_gap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_gap', OLD.maximum_gap, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_i%%
CREATE TRIGGER `m_product_loan_variable_installment_config_i`
AFTER INSERT
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_variable_installment_config(id, loan_product_id, minimum_gap, maximum_gap) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.minimum_gap IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_gap, '", ')), IF(NEW.maximum_gap IS NULL, 'NULL', CONCAT('"', NEW.maximum_gap, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_variable_installment_config', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_gap', NEW.minimum_gap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maximum_gap', NEW.maximum_gap, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_variable_installment_config_u%%
CREATE TRIGGER `m_product_loan_variable_installment_config_u`
AFTER UPDATE
  ON m_product_loan_variable_installment_config
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_variable_installment_config SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', minimum_gap = ', IF(NEW.minimum_gap IS NULL, 'NULL', CONCAT('"', NEW.minimum_gap, '"')), ', maximum_gap = ', IF(NEW.maximum_gap IS NULL, 'NULL', CONCAT('"', NEW.maximum_gap, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_variable_installment_config', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_gap', OLD.minimum_gap, NEW.minimum_gap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_gap', OLD.maximum_gap, NEW.maximum_gap);
  END%%


DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_d%%
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_d`
BEFORE DELETE
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_loan_variations_borrower_cycle WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_loan_variations_borrower_cycle', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'borrower_cycle_number', OLD.borrower_cycle_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_condition', OLD.value_condition, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_type', OLD.param_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_value', OLD.default_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_value', OLD.max_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_value', OLD.min_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_i%%
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_i`
AFTER INSERT
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_loan_variations_borrower_cycle(id, loan_product_id, borrower_cycle_number, value_condition, param_type, default_value, max_value, min_value) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.loan_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.loan_product_id, '", ')), IF(NEW.borrower_cycle_number IS NULL, 'NULL, ', CONCAT('"', NEW.borrower_cycle_number, '", ')), IF(NEW.value_condition IS NULL, 'NULL, ', CONCAT('"', NEW.value_condition, '", ')), IF(NEW.param_type IS NULL, 'NULL, ', CONCAT('"', NEW.param_type, '", ')), IF(NEW.default_value IS NULL, 'NULL, ', CONCAT('"', NEW.default_value, '", ')), IF(NEW.max_value IS NULL, 'NULL, ', CONCAT('"', NEW.max_value, '", ')), IF(NEW.min_value IS NULL, 'NULL', CONCAT('"', NEW.min_value, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_loan_variations_borrower_cycle', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'loan_product_id', NEW.loan_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'borrower_cycle_number', NEW.borrower_cycle_number, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_condition', NEW.value_condition, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'param_type', NEW.param_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'default_value', NEW.default_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_value', NEW.max_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_value', NEW.min_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_loan_variations_borrower_cycle_u%%
CREATE TRIGGER `m_product_loan_variations_borrower_cycle_u`
AFTER UPDATE
  ON m_product_loan_variations_borrower_cycle
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_loan_variations_borrower_cycle SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', loan_product_id = ', IF(NEW.loan_product_id IS NULL, 'NULL', CONCAT('"', NEW.loan_product_id, '"')), ', borrower_cycle_number = ', IF(NEW.borrower_cycle_number IS NULL, 'NULL', CONCAT('"', NEW.borrower_cycle_number, '"')), ', value_condition = ', IF(NEW.value_condition IS NULL, 'NULL', CONCAT('"', NEW.value_condition, '"')), ', param_type = ', IF(NEW.param_type IS NULL, 'NULL', CONCAT('"', NEW.param_type, '"')), ', default_value = ', IF(NEW.default_value IS NULL, 'NULL', CONCAT('"', NEW.default_value, '"')), ', max_value = ', IF(NEW.max_value IS NULL, 'NULL', CONCAT('"', NEW.max_value, '"')), ', min_value = ', IF(NEW.min_value IS NULL, 'NULL', CONCAT('"', NEW.min_value, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_loan_variations_borrower_cycle', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'loan_product_id', OLD.loan_product_id, NEW.loan_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'borrower_cycle_number', OLD.borrower_cycle_number, NEW.borrower_cycle_number);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_condition', OLD.value_condition, NEW.value_condition);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_type', OLD.param_type, NEW.param_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'default_value', OLD.default_value, NEW.default_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_value', OLD.max_value, NEW.max_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_value', OLD.min_value, NEW.min_value);
  END%%


DROP TRIGGER IF EXISTS m_product_mix_d%%
CREATE TRIGGER `m_product_mix_d`
BEFORE DELETE
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_product_mix WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_product_mix', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'restricted_product_id', OLD.restricted_product_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_mix_i%%
CREATE TRIGGER `m_product_mix_i`
AFTER INSERT
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_product_mix(id, product_id, restricted_product_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.restricted_product_id IS NULL, 'NULL', CONCAT('"', NEW.restricted_product_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_product_mix', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'restricted_product_id', NEW.restricted_product_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_product_mix_u%%
CREATE TRIGGER `m_product_mix_u`
AFTER UPDATE
  ON m_product_mix
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_product_mix SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', restricted_product_id = ', IF(NEW.restricted_product_id IS NULL, 'NULL', CONCAT('"', NEW.restricted_product_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_product_mix', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'restricted_product_id', OLD.restricted_product_id, NEW.restricted_product_id);
  END%%


DROP TRIGGER IF EXISTS m_provision_category_d%%
CREATE TRIGGER `m_provision_category_d`
BEFORE DELETE
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_provision_category WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_provision_category', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_name', OLD.category_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provision_category_i%%
CREATE TRIGGER `m_provision_category_i`
AFTER INSERT
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_provision_category(id, category_name, description) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.category_name IS NULL, 'NULL, ', CONCAT('"', NEW.category_name, '", ')), IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_provision_category', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_name', NEW.category_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provision_category_u%%
CREATE TRIGGER `m_provision_category_u`
AFTER UPDATE
  ON m_provision_category
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_provision_category SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', category_name = ', IF(NEW.category_name IS NULL, 'NULL', CONCAT('"', NEW.category_name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_provision_category', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_name', OLD.category_name, NEW.category_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
  END%%


DROP TRIGGER IF EXISTS m_provisioning_criteria_d%%
CREATE TRIGGER `m_provisioning_criteria_d`
BEFORE DELETE
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_provisioning_criteria WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_provisioning_criteria', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_name', OLD.criteria_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_criteria_i%%
CREATE TRIGGER `m_provisioning_criteria_i`
AFTER INSERT
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_provisioning_criteria(id, criteria_name, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.criteria_name IS NULL, 'NULL, ', CONCAT('"', NEW.criteria_name, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_provisioning_criteria', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_name', NEW.criteria_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_criteria_u%%
CREATE TRIGGER `m_provisioning_criteria_u`
AFTER UPDATE
  ON m_provisioning_criteria
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_provisioning_criteria SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', criteria_name = ', IF(NEW.criteria_name IS NULL, 'NULL', CONCAT('"', NEW.criteria_name, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_provisioning_criteria', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_name', OLD.criteria_name, NEW.criteria_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_d%%
CREATE TRIGGER `m_provisioning_criteria_definition_d`
BEFORE DELETE
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_provisioning_criteria_definition WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_provisioning_criteria_definition', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_age', OLD.min_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_age', OLD.max_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provision_percentage', OLD.provision_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_i%%
CREATE TRIGGER `m_provisioning_criteria_definition_i`
AFTER INSERT
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_provisioning_criteria_definition(id, criteria_id, category_id, min_age, max_age, provision_percentage, liability_account, expense_account) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.criteria_id IS NULL, 'NULL, ', CONCAT('"', NEW.criteria_id, '", ')), IF(NEW.category_id IS NULL, 'NULL, ', CONCAT('"', NEW.category_id, '", ')), IF(NEW.min_age IS NULL, 'NULL, ', CONCAT('"', NEW.min_age, '", ')), IF(NEW.max_age IS NULL, 'NULL, ', CONCAT('"', NEW.max_age, '", ')), IF(NEW.provision_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.provision_percentage, '", ')), IF(NEW.liability_account IS NULL, 'NULL, ', CONCAT('"', NEW.liability_account, '", ')), IF(NEW.expense_account IS NULL, 'NULL', CONCAT('"', NEW.expense_account, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_provisioning_criteria_definition', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'criteria_id', NEW.criteria_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category_id', NEW.category_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_age', NEW.min_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_age', NEW.max_age, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'provision_percentage', NEW.provision_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'liability_account', NEW.liability_account, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'expense_account', NEW.expense_account, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_criteria_definition_u%%
CREATE TRIGGER `m_provisioning_criteria_definition_u`
AFTER UPDATE
  ON m_provisioning_criteria_definition
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_provisioning_criteria_definition SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', criteria_id = ', IF(NEW.criteria_id IS NULL, 'NULL', CONCAT('"', NEW.criteria_id, '"')), ', category_id = ', IF(NEW.category_id IS NULL, 'NULL', CONCAT('"', NEW.category_id, '"')), ', min_age = ', IF(NEW.min_age IS NULL, 'NULL', CONCAT('"', NEW.min_age, '"')), ', max_age = ', IF(NEW.max_age IS NULL, 'NULL', CONCAT('"', NEW.max_age, '"')), ', provision_percentage = ', IF(NEW.provision_percentage IS NULL, 'NULL', CONCAT('"', NEW.provision_percentage, '"')), ', liability_account = ', IF(NEW.liability_account IS NULL, 'NULL', CONCAT('"', NEW.liability_account, '"')), ', expense_account = ', IF(NEW.expense_account IS NULL, 'NULL', CONCAT('"', NEW.expense_account, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_provisioning_criteria_definition', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'criteria_id', OLD.criteria_id, NEW.criteria_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category_id', OLD.category_id, NEW.category_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_age', OLD.min_age, NEW.min_age);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_age', OLD.max_age, NEW.max_age);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provision_percentage', OLD.provision_percentage, NEW.provision_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'liability_account', OLD.liability_account, NEW.liability_account);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'expense_account', OLD.expense_account, NEW.expense_account);
  END%%


DROP TRIGGER IF EXISTS m_provisioning_history_d%%
CREATE TRIGGER `m_provisioning_history_d`
BEFORE DELETE
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_provisioning_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_provisioning_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'journal_entry_created', OLD.journal_entry_created, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_history_i%%
CREATE TRIGGER `m_provisioning_history_i`
AFTER INSERT
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_provisioning_history(id, journal_entry_created, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.journal_entry_created IS NULL, 'NULL, ', CONCAT('"', NEW.journal_entry_created, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_provisioning_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'journal_entry_created', NEW.journal_entry_created, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_provisioning_history_u%%
CREATE TRIGGER `m_provisioning_history_u`
AFTER UPDATE
  ON m_provisioning_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_provisioning_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', journal_entry_created = ', IF(NEW.journal_entry_created IS NULL, 'NULL', CONCAT('"', NEW.journal_entry_created, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_provisioning_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'journal_entry_created', OLD.journal_entry_created, NEW.journal_entry_created);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_report_mailing_job_d%%
CREATE TRIGGER `m_report_mailing_job_d`
BEFORE DELETE
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_report_mailing_job WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_recipients', OLD.email_recipients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_subject', OLD.email_subject, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_message', OLD.email_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_attachment_file_format', OLD.email_attachment_file_format, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_id', OLD.stretchy_report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_param_map', OLD.stretchy_report_param_map, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_datetime', OLD.previous_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_datetime', OLD.next_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_status', OLD.previous_run_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_log', OLD.previous_run_error_log, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_message', OLD.previous_run_error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_runs', OLD.number_of_runs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'run_as_userid', OLD.run_as_userid, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_i%%
CREATE TRIGGER `m_report_mailing_job_i`
AFTER INSERT
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_report_mailing_job(id, name, description, start_datetime, recurrence, created_date, createdby_id, lastmodified_date, lastmodifiedby_id, email_recipients, email_subject, email_message, email_attachment_file_format, stretchy_report_id, stretchy_report_param_map, previous_run_datetime, next_run_datetime, previous_run_status, previous_run_error_log, previous_run_error_message, number_of_runs, is_active, is_deleted, run_as_userid) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.start_datetime IS NULL, 'NULL, ', CONCAT('"', NEW.start_datetime, '", ')), IF(NEW.recurrence IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.email_recipients IS NULL, 'NULL, ', CONCAT('"', NEW.email_recipients, '", ')), IF(NEW.email_subject IS NULL, 'NULL, ', CONCAT('"', NEW.email_subject, '", ')), IF(NEW.email_message IS NULL, 'NULL, ', CONCAT('"', NEW.email_message, '", ')), IF(NEW.email_attachment_file_format IS NULL, 'NULL, ', CONCAT('"', NEW.email_attachment_file_format, '", ')), IF(NEW.stretchy_report_id IS NULL, 'NULL, ', CONCAT('"', NEW.stretchy_report_id, '", ')), IF(NEW.stretchy_report_param_map IS NULL, 'NULL, ', CONCAT('"', NEW.stretchy_report_param_map, '", ')), IF(NEW.previous_run_datetime IS NULL, 'NULL, ', CONCAT('"', NEW.previous_run_datetime, '", ')), IF(NEW.next_run_datetime IS NULL, 'NULL, ', CONCAT('"', NEW.next_run_datetime, '", ')), IF(NEW.previous_run_status IS NULL, 'NULL, ', CONCAT('"', NEW.previous_run_status, '", ')), IF(NEW.previous_run_error_log IS NULL, 'NULL, ', CONCAT('"', NEW.previous_run_error_log, '", ')), IF(NEW.previous_run_error_message IS NULL, 'NULL, ', CONCAT('"', NEW.previous_run_error_message, '", ')), IF(NEW.number_of_runs IS NULL, 'NULL, ', CONCAT('"', NEW.number_of_runs, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.is_deleted IS NULL, 'NULL, ', CONCAT('"', NEW.is_deleted, '", ')), IF(NEW.run_as_userid IS NULL, 'NULL', CONCAT('"', NEW.run_as_userid, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_datetime', NEW.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_recipients', NEW.email_recipients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_subject', NEW.email_subject, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_message', NEW.email_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'email_attachment_file_format', NEW.email_attachment_file_format, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stretchy_report_id', NEW.stretchy_report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'stretchy_report_param_map', NEW.stretchy_report_param_map, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_datetime', NEW.previous_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_run_datetime', NEW.next_run_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_status', NEW.previous_run_status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_error_log', NEW.previous_run_error_log, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'previous_run_error_message', NEW.previous_run_error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'number_of_runs', NEW.number_of_runs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_deleted', NEW.is_deleted, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'run_as_userid', NEW.run_as_userid, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_u%%
CREATE TRIGGER `m_report_mailing_job_u`
AFTER UPDATE
  ON m_report_mailing_job
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_report_mailing_job SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', start_datetime = ', IF(NEW.start_datetime IS NULL, 'NULL', CONCAT('"', NEW.start_datetime, '"')), ', recurrence = ', IF(NEW.recurrence IS NULL, 'NULL', CONCAT('"', NEW.recurrence, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', email_recipients = ', IF(NEW.email_recipients IS NULL, 'NULL', CONCAT('"', NEW.email_recipients, '"')), ', email_subject = ', IF(NEW.email_subject IS NULL, 'NULL', CONCAT('"', NEW.email_subject, '"')), ', email_message = ', IF(NEW.email_message IS NULL, 'NULL', CONCAT('"', NEW.email_message, '"')), ', email_attachment_file_format = ', IF(NEW.email_attachment_file_format IS NULL, 'NULL', CONCAT('"', NEW.email_attachment_file_format, '"')), ', stretchy_report_id = ', IF(NEW.stretchy_report_id IS NULL, 'NULL', CONCAT('"', NEW.stretchy_report_id, '"')), ', stretchy_report_param_map = ', IF(NEW.stretchy_report_param_map IS NULL, 'NULL', CONCAT('"', NEW.stretchy_report_param_map, '"')), ', previous_run_datetime = ', IF(NEW.previous_run_datetime IS NULL, 'NULL', CONCAT('"', NEW.previous_run_datetime, '"')), ', next_run_datetime = ', IF(NEW.next_run_datetime IS NULL, 'NULL', CONCAT('"', NEW.next_run_datetime, '"')), ', previous_run_status = ', IF(NEW.previous_run_status IS NULL, 'NULL', CONCAT('"', NEW.previous_run_status, '"')), ', previous_run_error_log = ', IF(NEW.previous_run_error_log IS NULL, 'NULL', CONCAT('"', NEW.previous_run_error_log, '"')), ', previous_run_error_message = ', IF(NEW.previous_run_error_message IS NULL, 'NULL', CONCAT('"', NEW.previous_run_error_message, '"')), ', number_of_runs = ', IF(NEW.number_of_runs IS NULL, 'NULL', CONCAT('"', NEW.number_of_runs, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', is_deleted = ', IF(NEW.is_deleted IS NULL, 'NULL', CONCAT('"', NEW.is_deleted, '"')), ', run_as_userid = ', IF(NEW.run_as_userid IS NULL, 'NULL', CONCAT('"', NEW.run_as_userid, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NEW.start_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_recipients', OLD.email_recipients, NEW.email_recipients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_subject', OLD.email_subject, NEW.email_subject);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_message', OLD.email_message, NEW.email_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'email_attachment_file_format', OLD.email_attachment_file_format, NEW.email_attachment_file_format);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_id', OLD.stretchy_report_id, NEW.stretchy_report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'stretchy_report_param_map', OLD.stretchy_report_param_map, NEW.stretchy_report_param_map);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_datetime', OLD.previous_run_datetime, NEW.previous_run_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_run_datetime', OLD.next_run_datetime, NEW.next_run_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_status', OLD.previous_run_status, NEW.previous_run_status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_log', OLD.previous_run_error_log, NEW.previous_run_error_log);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'previous_run_error_message', OLD.previous_run_error_message, NEW.previous_run_error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'number_of_runs', OLD.number_of_runs, NEW.number_of_runs);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_deleted', OLD.is_deleted, NEW.is_deleted);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'run_as_userid', OLD.run_as_userid, NEW.run_as_userid);
  END%%


DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_d%%
CREATE TRIGGER `m_report_mailing_job_configuration_d`
BEFORE DELETE
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_report_mailing_job_configuration WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_i%%
CREATE TRIGGER `m_report_mailing_job_configuration_i`
AFTER INSERT
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_report_mailing_job_configuration(id, name, value) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value', NEW.value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_configuration_u%%
CREATE TRIGGER `m_report_mailing_job_configuration_u`
AFTER UPDATE
  ON m_report_mailing_job_configuration
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_report_mailing_job_configuration SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', value = ', IF(NEW.value IS NULL, 'NULL', CONCAT('"', NEW.value, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job_configuration', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value', OLD.value, NEW.value);
  END%%


DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_d%%
CREATE TRIGGER `m_report_mailing_job_run_history_d`
BEFORE DELETE
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_report_mailing_job_run_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_report_mailing_job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_datetime', OLD.end_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_i%%
CREATE TRIGGER `m_report_mailing_job_run_history_i`
AFTER INSERT
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_report_mailing_job_run_history(id, job_id, start_datetime, end_datetime, status, error_message, error_log) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.job_id IS NULL, 'NULL, ', CONCAT('"', NEW.job_id, '", ')), IF(NEW.start_datetime IS NULL, 'NULL, ', CONCAT('"', NEW.start_datetime, '", ')), IF(NEW.end_datetime IS NULL, 'NULL, ', CONCAT('"', NEW.end_datetime, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.error_message IS NULL, 'NULL, ', CONCAT('"', NEW.error_message, '", ')), IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_report_mailing_job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'job_id', NEW.job_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_datetime', NEW.start_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_datetime', NEW.end_datetime, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_message', NEW.error_message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'error_log', NEW.error_log, NULL);
  END%%
DROP TRIGGER IF EXISTS m_report_mailing_job_run_history_u%%
CREATE TRIGGER `m_report_mailing_job_run_history_u`
AFTER UPDATE
  ON m_report_mailing_job_run_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_report_mailing_job_run_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', job_id = ', IF(NEW.job_id IS NULL, 'NULL', CONCAT('"', NEW.job_id, '"')), ', start_datetime = ', IF(NEW.start_datetime IS NULL, 'NULL', CONCAT('"', NEW.start_datetime, '"')), ', end_datetime = ', IF(NEW.end_datetime IS NULL, 'NULL', CONCAT('"', NEW.end_datetime, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', error_message = ', IF(NEW.error_message IS NULL, 'NULL', CONCAT('"', NEW.error_message, '"')), ', error_log = ', IF(NEW.error_log IS NULL, 'NULL', CONCAT('"', NEW.error_log, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_report_mailing_job_run_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'job_id', OLD.job_id, NEW.job_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_datetime', OLD.start_datetime, NEW.start_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_datetime', OLD.end_datetime, NEW.end_datetime);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_message', OLD.error_message, NEW.error_message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'error_log', OLD.error_log, NEW.error_log);
  END%%


DROP TRIGGER IF EXISTS m_role_d%%
CREATE TRIGGER `m_role_d`
BEFORE DELETE
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_role WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_disabled', OLD.is_disabled, NULL);
  END%%
DROP TRIGGER IF EXISTS m_role_i%%
CREATE TRIGGER `m_role_i`
AFTER INSERT
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_role(id, name, description, is_disabled) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.is_disabled IS NULL, 'NULL', CONCAT('"', NEW.is_disabled, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_disabled', NEW.is_disabled, NULL);
  END%%
DROP TRIGGER IF EXISTS m_role_u%%
CREATE TRIGGER `m_role_u`
AFTER UPDATE
  ON m_role
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_role SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', is_disabled = ', IF(NEW.is_disabled IS NULL, 'NULL', CONCAT('"', NEW.is_disabled, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_role', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_disabled', OLD.is_disabled, NEW.is_disabled);
  END%%


DROP TRIGGER IF EXISTS m_role_permission_d%%
CREATE TRIGGER `m_role_permission_d`
BEFORE DELETE
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_role_permission WHERE role_id = "', OLD.role_id, '"', ' AND permission_id = "', OLD.permission_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_role_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'permission_id', OLD.permission_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_role_permission_i%%
CREATE TRIGGER `m_role_permission_i`
AFTER INSERT
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_role_permission(role_id, permission_id) VALUES(', IF(NEW.role_id IS NULL, 'NULL, ', CONCAT('"', NEW.role_id, '", ')), IF(NEW.permission_id IS NULL, 'NULL', CONCAT('"', NEW.permission_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_role_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'role_id', NEW.role_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'permission_id', NEW.permission_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_role_permission_u%%
CREATE TRIGGER `m_role_permission_u`
AFTER UPDATE
  ON m_role_permission
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_role_permission SET role_id = ', IF(NEW.role_id IS NULL, 'NULL', CONCAT('"', NEW.role_id, '"')), ', permission_id = ', IF(NEW.permission_id IS NULL, 'NULL', CONCAT('"', NEW.permission_id, '"')), ' WHERE role_id = "', NEW.role_id, '"', ' AND permission_id = "', OLD.permission_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_role_permission', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'role_id', OLD.role_id, NEW.role_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'permission_id', OLD.permission_id, NEW.permission_id);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_d%%
CREATE TRIGGER `m_savings_account_d`
BEFORE DELETE
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_officer_id', OLD.field_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status_enum', OLD.sub_status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_date', OLD.activatedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', OLD.lockedin_until_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_deposits_derived', OLD.total_deposits_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawals_derived', OLD.total_withdrawals_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', OLD.total_withdrawal_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_fees_charge_derived', OLD.total_fees_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', OLD.total_penalty_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_annual_fees_derived', OLD.total_annual_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_earned_derived', OLD.total_interest_earned_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_posted_derived', OLD.total_interest_posted_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', OLD.total_overdraft_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', OLD.total_withhold_tax_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_balance_derived', OLD.account_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_interest_calculation_date', OLD.start_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_hold_funds_derived', OLD.on_hold_funds_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_interest_calculation_date', OLD.last_interest_calculation_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_i%%
CREATE TRIGGER `m_savings_account_i`
AFTER INSERT
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account(id, account_no, external_id, client_id, group_id, product_id, field_officer_id, status_enum, sub_status_enum, account_type_enum, deposit_type_enum, submittedon_date, submittedon_userid, approvedon_date, approvedon_userid, rejectedon_date, rejectedon_userid, withdrawnon_date, withdrawnon_userid, activatedon_date, activatedon_userid, closedon_date, closedon_userid, currency_code, currency_digits, currency_multiplesof, nominal_annual_interest_rate, interest_compounding_period_enum, interest_posting_period_enum, interest_calculation_type_enum, interest_calculation_days_in_year_type_enum, min_required_opening_balance, lockin_period_frequency, lockin_period_frequency_enum, withdrawal_fee_for_transfer, allow_overdraft, overdraft_limit, nominal_annual_interest_rate_overdraft, min_overdraft_for_interest_calculation, lockedin_until_date_derived, total_deposits_derived, total_withdrawals_derived, total_withdrawal_fees_derived, total_fees_charge_derived, total_penalty_charge_derived, total_annual_fees_derived, total_interest_earned_derived, total_interest_posted_derived, total_overdraft_interest_derived, total_withhold_tax_derived, account_balance_derived, min_required_balance, enforce_min_required_balance, min_balance_for_interest_calculation, start_interest_calculation_date, on_hold_funds_derived, version, withhold_tax, tax_group_id, last_interest_calculation_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_no IS NULL, 'NULL, ', CONCAT('"', NEW.account_no, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.field_officer_id IS NULL, 'NULL, ', CONCAT('"', NEW.field_officer_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.sub_status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.sub_status_enum, '", ')), IF(NEW.account_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.account_type_enum, '", ')), IF(NEW.deposit_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_type_enum, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.submittedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_userid, '", ')), IF(NEW.approvedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_date, '", ')), IF(NEW.approvedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_userid, '", ')), IF(NEW.rejectedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_date, '", ')), IF(NEW.rejectedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.rejectedon_userid, '", ')), IF(NEW.withdrawnon_date IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawnon_date, '", ')), IF(NEW.withdrawnon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawnon_userid, '", ')), IF(NEW.activatedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.activatedon_date, '", ')), IF(NEW.activatedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.activatedon_userid, '", ')), IF(NEW.closedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_date, '", ')), IF(NEW.closedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_userid, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.nominal_annual_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_annual_interest_rate, '", ')), IF(NEW.interest_compounding_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_compounding_period_enum, '", ')), IF(NEW.interest_posting_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_posting_period_enum, '", ')), IF(NEW.interest_calculation_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculation_type_enum, '", ')), IF(NEW.interest_calculation_days_in_year_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculation_days_in_year_type_enum, '", ')), IF(NEW.min_required_opening_balance IS NULL, 'NULL, ', CONCAT('"', NEW.min_required_opening_balance, '", ')), IF(NEW.lockin_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency, '", ')), IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency_enum, '", ')), IF(NEW.withdrawal_fee_for_transfer IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawal_fee_for_transfer, '", ')), IF(NEW.allow_overdraft IS NULL, 'NULL, ', CONCAT('"', NEW.allow_overdraft, '", ')), IF(NEW.overdraft_limit IS NULL, 'NULL, ', CONCAT('"', NEW.overdraft_limit, '", ')), IF(NEW.nominal_annual_interest_rate_overdraft IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_annual_interest_rate_overdraft, '", ')), IF(NEW.min_overdraft_for_interest_calculation IS NULL, 'NULL, ', CONCAT('"', NEW.min_overdraft_for_interest_calculation, '", ')), IF(NEW.lockedin_until_date_derived IS NULL, 'NULL, ', CONCAT('"', NEW.lockedin_until_date_derived, '", ')), IF(NEW.total_deposits_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_deposits_derived, '", ')), IF(NEW.total_withdrawals_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_withdrawals_derived, '", ')), IF(NEW.total_withdrawal_fees_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_withdrawal_fees_derived, '", ')), IF(NEW.total_fees_charge_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_fees_charge_derived, '", ')), IF(NEW.total_penalty_charge_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_penalty_charge_derived, '", ')), IF(NEW.total_annual_fees_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_annual_fees_derived, '", ')), IF(NEW.total_interest_earned_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_interest_earned_derived, '", ')), IF(NEW.total_interest_posted_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_interest_posted_derived, '", ')), IF(NEW.total_overdraft_interest_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_overdraft_interest_derived, '", ')), IF(NEW.total_withhold_tax_derived IS NULL, 'NULL, ', CONCAT('"', NEW.total_withhold_tax_derived, '", ')), IF(NEW.account_balance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.account_balance_derived, '", ')), IF(NEW.min_required_balance IS NULL, 'NULL, ', CONCAT('"', NEW.min_required_balance, '", ')), IF(NEW.enforce_min_required_balance IS NULL, 'NULL, ', CONCAT('"', NEW.enforce_min_required_balance, '", ')), IF(NEW.min_balance_for_interest_calculation IS NULL, 'NULL, ', CONCAT('"', NEW.min_balance_for_interest_calculation, '", ')), IF(NEW.start_interest_calculation_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_interest_calculation_date, '", ')), IF(NEW.on_hold_funds_derived IS NULL, 'NULL, ', CONCAT('"', NEW.on_hold_funds_derived, '", ')), IF(NEW.version IS NULL, 'NULL, ', CONCAT('"', NEW.version, '", ')), IF(NEW.withhold_tax IS NULL, 'NULL, ', CONCAT('"', NEW.withhold_tax, '", ')), IF(NEW.tax_group_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_group_id, '", ')), IF(NEW.last_interest_calculation_date IS NULL, 'NULL', CONCAT('"', NEW.last_interest_calculation_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'field_officer_id', NEW.field_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sub_status_enum', NEW.sub_status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type_enum', NEW.account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_type_enum', NEW.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_date', NEW.rejectedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejectedon_userid', NEW.rejectedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_date', NEW.withdrawnon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawnon_userid', NEW.withdrawnon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_date', NEW.activatedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activatedon_userid', NEW.activatedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', NEW.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', NEW.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_posting_period_enum', NEW.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', NEW.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', NEW.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_opening_balance', NEW.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', NEW.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_overdraft', NEW.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_limit', NEW.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', NEW.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', NEW.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', NEW.lockedin_until_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_deposits_derived', NEW.total_deposits_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withdrawals_derived', NEW.total_withdrawals_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', NEW.total_withdrawal_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_fees_charge_derived', NEW.total_fees_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', NEW.total_penalty_charge_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_annual_fees_derived', NEW.total_annual_fees_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_interest_earned_derived', NEW.total_interest_earned_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_interest_posted_derived', NEW.total_interest_posted_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', NEW.total_overdraft_interest_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', NEW.total_withhold_tax_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_balance_derived', NEW.account_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_balance', NEW.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enforce_min_required_balance', NEW.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', NEW.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_interest_calculation_date', NEW.start_interest_calculation_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'on_hold_funds_derived', NEW.on_hold_funds_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withhold_tax', NEW.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_interest_calculation_date', NEW.last_interest_calculation_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_u%%
CREATE TRIGGER `m_savings_account_u`
AFTER UPDATE
  ON m_savings_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_no = ', IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', field_officer_id = ', IF(NEW.field_officer_id IS NULL, 'NULL', CONCAT('"', NEW.field_officer_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', sub_status_enum = ', IF(NEW.sub_status_enum IS NULL, 'NULL', CONCAT('"', NEW.sub_status_enum, '"')), ', account_type_enum = ', IF(NEW.account_type_enum IS NULL, 'NULL', CONCAT('"', NEW.account_type_enum, '"')), ', deposit_type_enum = ', IF(NEW.deposit_type_enum IS NULL, 'NULL', CONCAT('"', NEW.deposit_type_enum, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', submittedon_userid = ', IF(NEW.submittedon_userid IS NULL, 'NULL', CONCAT('"', NEW.submittedon_userid, '"')), ', approvedon_date = ', IF(NEW.approvedon_date IS NULL, 'NULL', CONCAT('"', NEW.approvedon_date, '"')), ', approvedon_userid = ', IF(NEW.approvedon_userid IS NULL, 'NULL', CONCAT('"', NEW.approvedon_userid, '"')), ', rejectedon_date = ', IF(NEW.rejectedon_date IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_date, '"')), ', rejectedon_userid = ', IF(NEW.rejectedon_userid IS NULL, 'NULL', CONCAT('"', NEW.rejectedon_userid, '"')), ', withdrawnon_date = ', IF(NEW.withdrawnon_date IS NULL, 'NULL', CONCAT('"', NEW.withdrawnon_date, '"')), ', withdrawnon_userid = ', IF(NEW.withdrawnon_userid IS NULL, 'NULL', CONCAT('"', NEW.withdrawnon_userid, '"')), ', activatedon_date = ', IF(NEW.activatedon_date IS NULL, 'NULL', CONCAT('"', NEW.activatedon_date, '"')), ', activatedon_userid = ', IF(NEW.activatedon_userid IS NULL, 'NULL', CONCAT('"', NEW.activatedon_userid, '"')), ', closedon_date = ', IF(NEW.closedon_date IS NULL, 'NULL', CONCAT('"', NEW.closedon_date, '"')), ', closedon_userid = ', IF(NEW.closedon_userid IS NULL, 'NULL', CONCAT('"', NEW.closedon_userid, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', nominal_annual_interest_rate = ', IF(NEW.nominal_annual_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.nominal_annual_interest_rate, '"')), ', interest_compounding_period_enum = ', IF(NEW.interest_compounding_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_compounding_period_enum, '"')), ', interest_posting_period_enum = ', IF(NEW.interest_posting_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_posting_period_enum, '"')), ', interest_calculation_type_enum = ', IF(NEW.interest_calculation_type_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculation_type_enum, '"')), ', interest_calculation_days_in_year_type_enum = ', IF(NEW.interest_calculation_days_in_year_type_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculation_days_in_year_type_enum, '"')), ', min_required_opening_balance = ', IF(NEW.min_required_opening_balance IS NULL, 'NULL', CONCAT('"', NEW.min_required_opening_balance, '"')), ', lockin_period_frequency = ', IF(NEW.lockin_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency, '"')), ', lockin_period_frequency_enum = ', IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency_enum, '"')), ', withdrawal_fee_for_transfer = ', IF(NEW.withdrawal_fee_for_transfer IS NULL, 'NULL', CONCAT('"', NEW.withdrawal_fee_for_transfer, '"')), ', allow_overdraft = ', IF(NEW.allow_overdraft IS NULL, 'NULL', CONCAT('"', NEW.allow_overdraft, '"')), ', overdraft_limit = ', IF(NEW.overdraft_limit IS NULL, 'NULL', CONCAT('"', NEW.overdraft_limit, '"')), ', nominal_annual_interest_rate_overdraft = ', IF(NEW.nominal_annual_interest_rate_overdraft IS NULL, 'NULL', CONCAT('"', NEW.nominal_annual_interest_rate_overdraft, '"')), ', min_overdraft_for_interest_calculation = ', IF(NEW.min_overdraft_for_interest_calculation IS NULL, 'NULL', CONCAT('"', NEW.min_overdraft_for_interest_calculation, '"')), ', lockedin_until_date_derived = ', IF(NEW.lockedin_until_date_derived IS NULL, 'NULL', CONCAT('"', NEW.lockedin_until_date_derived, '"')), ', total_deposits_derived = ', IF(NEW.total_deposits_derived IS NULL, 'NULL', CONCAT('"', NEW.total_deposits_derived, '"')), ', total_withdrawals_derived = ', IF(NEW.total_withdrawals_derived IS NULL, 'NULL', CONCAT('"', NEW.total_withdrawals_derived, '"')), ', total_withdrawal_fees_derived = ', IF(NEW.total_withdrawal_fees_derived IS NULL, 'NULL', CONCAT('"', NEW.total_withdrawal_fees_derived, '"')), ', total_fees_charge_derived = ', IF(NEW.total_fees_charge_derived IS NULL, 'NULL', CONCAT('"', NEW.total_fees_charge_derived, '"')), ', total_penalty_charge_derived = ', IF(NEW.total_penalty_charge_derived IS NULL, 'NULL', CONCAT('"', NEW.total_penalty_charge_derived, '"')), ', total_annual_fees_derived = ', IF(NEW.total_annual_fees_derived IS NULL, 'NULL', CONCAT('"', NEW.total_annual_fees_derived, '"')), ', total_interest_earned_derived = ', IF(NEW.total_interest_earned_derived IS NULL, 'NULL', CONCAT('"', NEW.total_interest_earned_derived, '"')), ', total_interest_posted_derived = ', IF(NEW.total_interest_posted_derived IS NULL, 'NULL', CONCAT('"', NEW.total_interest_posted_derived, '"')), ', total_overdraft_interest_derived = ', IF(NEW.total_overdraft_interest_derived IS NULL, 'NULL', CONCAT('"', NEW.total_overdraft_interest_derived, '"')), ', total_withhold_tax_derived = ', IF(NEW.total_withhold_tax_derived IS NULL, 'NULL', CONCAT('"', NEW.total_withhold_tax_derived, '"')), ', account_balance_derived = ', IF(NEW.account_balance_derived IS NULL, 'NULL', CONCAT('"', NEW.account_balance_derived, '"')), ', min_required_balance = ', IF(NEW.min_required_balance IS NULL, 'NULL', CONCAT('"', NEW.min_required_balance, '"')), ', enforce_min_required_balance = ', IF(NEW.enforce_min_required_balance IS NULL, 'NULL', CONCAT('"', NEW.enforce_min_required_balance, '"')), ', min_balance_for_interest_calculation = ', IF(NEW.min_balance_for_interest_calculation IS NULL, 'NULL', CONCAT('"', NEW.min_balance_for_interest_calculation, '"')), ', start_interest_calculation_date = ', IF(NEW.start_interest_calculation_date IS NULL, 'NULL', CONCAT('"', NEW.start_interest_calculation_date, '"')), ', on_hold_funds_derived = ', IF(NEW.on_hold_funds_derived IS NULL, 'NULL', CONCAT('"', NEW.on_hold_funds_derived, '"')), ', version = ', IF(NEW.version IS NULL, 'NULL', CONCAT('"', NEW.version, '"')), ', withhold_tax = ', IF(NEW.withhold_tax IS NULL, 'NULL', CONCAT('"', NEW.withhold_tax, '"')), ', tax_group_id = ', IF(NEW.tax_group_id IS NULL, 'NULL', CONCAT('"', NEW.tax_group_id, '"')), ', last_interest_calculation_date = ', IF(NEW.last_interest_calculation_date IS NULL, 'NULL', CONCAT('"', NEW.last_interest_calculation_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'field_officer_id', OLD.field_officer_id, NEW.field_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sub_status_enum', OLD.sub_status_enum, NEW.sub_status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type_enum', OLD.account_type_enum, NEW.account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NEW.deposit_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_date', OLD.rejectedon_date, NEW.rejectedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejectedon_userid', OLD.rejectedon_userid, NEW.rejectedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_date', OLD.withdrawnon_date, NEW.withdrawnon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawnon_userid', OLD.withdrawnon_userid, NEW.withdrawnon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_date', OLD.activatedon_date, NEW.activatedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activatedon_userid', OLD.activatedon_userid, NEW.activatedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NEW.nominal_annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NEW.interest_compounding_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NEW.interest_posting_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NEW.interest_calculation_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NEW.interest_calculation_days_in_year_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NEW.min_required_opening_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NEW.withdrawal_fee_for_transfer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NEW.allow_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NEW.overdraft_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NEW.nominal_annual_interest_rate_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NEW.min_overdraft_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockedin_until_date_derived', OLD.lockedin_until_date_derived, NEW.lockedin_until_date_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_deposits_derived', OLD.total_deposits_derived, NEW.total_deposits_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawals_derived', OLD.total_withdrawals_derived, NEW.total_withdrawals_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withdrawal_fees_derived', OLD.total_withdrawal_fees_derived, NEW.total_withdrawal_fees_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_fees_charge_derived', OLD.total_fees_charge_derived, NEW.total_fees_charge_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_penalty_charge_derived', OLD.total_penalty_charge_derived, NEW.total_penalty_charge_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_annual_fees_derived', OLD.total_annual_fees_derived, NEW.total_annual_fees_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_earned_derived', OLD.total_interest_earned_derived, NEW.total_interest_earned_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_interest_posted_derived', OLD.total_interest_posted_derived, NEW.total_interest_posted_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_overdraft_interest_derived', OLD.total_overdraft_interest_derived, NEW.total_overdraft_interest_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_withhold_tax_derived', OLD.total_withhold_tax_derived, NEW.total_withhold_tax_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_balance_derived', OLD.account_balance_derived, NEW.account_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NEW.min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NEW.enforce_min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NEW.min_balance_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_interest_calculation_date', OLD.start_interest_calculation_date, NEW.start_interest_calculation_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'on_hold_funds_derived', OLD.on_hold_funds_derived, NEW.on_hold_funds_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NEW.withhold_tax);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_interest_calculation_date', OLD.last_interest_calculation_date, NEW.last_interest_calculation_date);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_charge_d%%
CREATE TRIGGER `m_savings_account_charge_d`
BEFORE DELETE
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_charge_i%%
CREATE TRIGGER `m_savings_account_charge_i`
AFTER INSERT
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_charge(id, savings_account_id, charge_id, is_penalty, charge_time_enum, charge_due_date, fee_on_month, fee_on_day, fee_interval, charge_calculation_enum, calculation_percentage, calculation_on_amount, amount, amount_paid_derived, amount_waived_derived, amount_writtenoff_derived, amount_outstanding_derived, is_paid_derived, waived, is_active, inactivated_on_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_id, '", ')), IF(NEW.is_penalty IS NULL, 'NULL, ', CONCAT('"', NEW.is_penalty, '", ')), IF(NEW.charge_time_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_time_enum, '", ')), IF(NEW.charge_due_date IS NULL, 'NULL, ', CONCAT('"', NEW.charge_due_date, '", ')), IF(NEW.fee_on_month IS NULL, 'NULL, ', CONCAT('"', NEW.fee_on_month, '", ')), IF(NEW.fee_on_day IS NULL, 'NULL, ', CONCAT('"', NEW.fee_on_day, '", ')), IF(NEW.fee_interval IS NULL, 'NULL, ', CONCAT('"', NEW.fee_interval, '", ')), IF(NEW.charge_calculation_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_calculation_enum, '", ')), IF(NEW.calculation_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_percentage, '", ')), IF(NEW.calculation_on_amount IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_on_amount, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid_derived, '", ')), IF(NEW.amount_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_waived_derived, '", ')), IF(NEW.amount_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_writtenoff_derived, '", ')), IF(NEW.amount_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_outstanding_derived, '", ')), IF(NEW.is_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.is_paid_derived, '", ')), IF(NEW.waived IS NULL, 'NULL, ', CONCAT('"', NEW.waived, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.inactivated_on_date IS NULL, 'NULL', CONCAT('"', NEW.inactivated_on_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_penalty', NEW.is_penalty, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_due_date', NEW.charge_due_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_month', NEW.fee_on_month, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_on_day', NEW.fee_on_day, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'fee_interval', NEW.fee_interval, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'inactivated_on_date', NEW.inactivated_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_charge_u%%
CREATE TRIGGER `m_savings_account_charge_u`
AFTER UPDATE
  ON m_savings_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ', is_penalty = ', IF(NEW.is_penalty IS NULL, 'NULL', CONCAT('"', NEW.is_penalty, '"')), ', charge_time_enum = ', IF(NEW.charge_time_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_time_enum, '"')), ', charge_due_date = ', IF(NEW.charge_due_date IS NULL, 'NULL', CONCAT('"', NEW.charge_due_date, '"')), ', fee_on_month = ', IF(NEW.fee_on_month IS NULL, 'NULL', CONCAT('"', NEW.fee_on_month, '"')), ', fee_on_day = ', IF(NEW.fee_on_day IS NULL, 'NULL', CONCAT('"', NEW.fee_on_day, '"')), ', fee_interval = ', IF(NEW.fee_interval IS NULL, 'NULL', CONCAT('"', NEW.fee_interval, '"')), ', charge_calculation_enum = ', IF(NEW.charge_calculation_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_calculation_enum, '"')), ', calculation_percentage = ', IF(NEW.calculation_percentage IS NULL, 'NULL', CONCAT('"', NEW.calculation_percentage, '"')), ', calculation_on_amount = ', IF(NEW.calculation_on_amount IS NULL, 'NULL', CONCAT('"', NEW.calculation_on_amount, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_paid_derived = ', IF(NEW.amount_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_paid_derived, '"')), ', amount_waived_derived = ', IF(NEW.amount_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_waived_derived, '"')), ', amount_writtenoff_derived = ', IF(NEW.amount_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_writtenoff_derived, '"')), ', amount_outstanding_derived = ', IF(NEW.amount_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_outstanding_derived, '"')), ', is_paid_derived = ', IF(NEW.is_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.is_paid_derived, '"')), ', waived = ', IF(NEW.waived IS NULL, 'NULL', CONCAT('"', NEW.waived, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', inactivated_on_date = ', IF(NEW.inactivated_on_date IS NULL, 'NULL', CONCAT('"', NEW.inactivated_on_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_penalty', OLD.is_penalty, NEW.is_penalty);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_due_date', OLD.charge_due_date, NEW.charge_due_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_month', OLD.fee_on_month, NEW.fee_on_month);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_on_day', OLD.fee_on_day, NEW.fee_on_day);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'fee_interval', OLD.fee_interval, NEW.fee_interval);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'inactivated_on_date', OLD.inactivated_on_date, NEW.inactivated_on_date);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_d%%
CREATE TRIGGER `m_savings_account_charge_paid_by_d`
BEFORE DELETE
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_charge_paid_by WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_charge_id', OLD.savings_account_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_i%%
CREATE TRIGGER `m_savings_account_charge_paid_by_i`
AFTER INSERT
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_charge_paid_by(id, savings_account_transaction_id, savings_account_charge_id, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_transaction_id, '", ')), IF(NEW.savings_account_charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_charge_id, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_transaction_id', NEW.savings_account_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_charge_id', NEW.savings_account_charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_charge_paid_by_u%%
CREATE TRIGGER `m_savings_account_charge_paid_by_u`
AFTER UPDATE
  ON m_savings_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_charge_paid_by SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_transaction_id = ', IF(NEW.savings_account_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_transaction_id, '"')), ', savings_account_charge_id = ', IF(NEW.savings_account_charge_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_charge_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_transaction_id', OLD.savings_account_transaction_id, NEW.savings_account_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_charge_id', OLD.savings_account_charge_id, NEW.savings_account_charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_d%%
CREATE TRIGGER `m_savings_account_interest_rate_chart_d`
BEFORE DELETE
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_interest_rate_chart WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_i%%
CREATE TRIGGER `m_savings_account_interest_rate_chart_i`
AFTER INSERT
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_interest_rate_chart(id, savings_account_id, name, description, from_date, end_date, is_primary_grouping_by_amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.from_date IS NULL, 'NULL, ', CONCAT('"', NEW.from_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.is_primary_grouping_by_amount IS NULL, 'NULL', CONCAT('"', NEW.is_primary_grouping_by_amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', NEW.is_primary_grouping_by_amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_chart_u%%
CREATE TRIGGER `m_savings_account_interest_rate_chart_u`
AFTER UPDATE
  ON m_savings_account_interest_rate_chart
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_interest_rate_chart SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', from_date = ', IF(NEW.from_date IS NULL, 'NULL', CONCAT('"', NEW.from_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', is_primary_grouping_by_amount = ', IF(NEW.is_primary_grouping_by_amount IS NULL, 'NULL', CONCAT('"', NEW.is_primary_grouping_by_amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_interest_rate_chart', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_primary_grouping_by_amount', OLD.is_primary_grouping_by_amount, NEW.is_primary_grouping_by_amount);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_d%%
CREATE TRIGGER `m_savings_account_interest_rate_slab_d`
BEFORE DELETE
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_interest_rate_slab WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', OLD.savings_account_interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_i%%
CREATE TRIGGER `m_savings_account_interest_rate_slab_i`
AFTER INSERT
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_interest_rate_slab(id, savings_account_interest_rate_chart_id, description, period_type_enum, from_period, to_period, amount_range_from, amount_range_to, annual_interest_rate, currency_code) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_interest_rate_chart_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_interest_rate_chart_id, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.period_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.period_type_enum, '", ')), IF(NEW.from_period IS NULL, 'NULL, ', CONCAT('"', NEW.from_period, '", ')), IF(NEW.to_period IS NULL, 'NULL, ', CONCAT('"', NEW.to_period, '", ')), IF(NEW.amount_range_from IS NULL, 'NULL, ', CONCAT('"', NEW.amount_range_from, '", ')), IF(NEW.amount_range_to IS NULL, 'NULL, ', CONCAT('"', NEW.amount_range_to, '", ')), IF(NEW.annual_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.annual_interest_rate, '", ')), IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', NEW.savings_account_interest_rate_chart_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'period_type_enum', NEW.period_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_period', NEW.from_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'to_period', NEW.to_period, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_from', NEW.amount_range_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_range_to', NEW.amount_range_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'annual_interest_rate', NEW.annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_interest_rate_slab_u%%
CREATE TRIGGER `m_savings_account_interest_rate_slab_u`
AFTER UPDATE
  ON m_savings_account_interest_rate_slab
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_interest_rate_slab SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_interest_rate_chart_id = ', IF(NEW.savings_account_interest_rate_chart_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_interest_rate_chart_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', period_type_enum = ', IF(NEW.period_type_enum IS NULL, 'NULL', CONCAT('"', NEW.period_type_enum, '"')), ', from_period = ', IF(NEW.from_period IS NULL, 'NULL', CONCAT('"', NEW.from_period, '"')), ', to_period = ', IF(NEW.to_period IS NULL, 'NULL', CONCAT('"', NEW.to_period, '"')), ', amount_range_from = ', IF(NEW.amount_range_from IS NULL, 'NULL', CONCAT('"', NEW.amount_range_from, '"')), ', amount_range_to = ', IF(NEW.amount_range_to IS NULL, 'NULL', CONCAT('"', NEW.amount_range_to, '"')), ', annual_interest_rate = ', IF(NEW.annual_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.annual_interest_rate, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_interest_rate_slab', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_interest_rate_chart_id', OLD.savings_account_interest_rate_chart_id, NEW.savings_account_interest_rate_chart_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'period_type_enum', OLD.period_type_enum, NEW.period_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_period', OLD.from_period, NEW.from_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'to_period', OLD.to_period, NEW.to_period);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_from', OLD.amount_range_from, NEW.amount_range_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_range_to', OLD.amount_range_to, NEW.amount_range_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'annual_interest_rate', OLD.annual_interest_rate, NEW.annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_transaction_d%%
CREATE TRIGGER `m_savings_account_transaction_d`
BEFORE DELETE
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_transaction WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_amount_derived', OLD.overdraft_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_end_date_derived', OLD.balance_end_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', OLD.balance_number_of_days_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'running_balance_derived', OLD.running_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cumulative_balance_derived', OLD.cumulative_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_manual', OLD.is_manual, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_transaction_i%%
CREATE TRIGGER `m_savings_account_transaction_i`
AFTER INSERT
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_transaction(id, savings_account_id, office_id, payment_detail_id, transaction_type_enum, is_reversed, transaction_date, amount, overdraft_amount_derived, balance_end_date_derived, balance_number_of_days_derived, running_balance_derived, cumulative_balance_derived, created_date, appuser_id, is_manual) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.payment_detail_id IS NULL, 'NULL, ', CONCAT('"', NEW.payment_detail_id, '", ')), IF(NEW.transaction_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_type_enum, '", ')), IF(NEW.is_reversed IS NULL, 'NULL, ', CONCAT('"', NEW.is_reversed, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.overdraft_amount_derived IS NULL, 'NULL, ', CONCAT('"', NEW.overdraft_amount_derived, '", ')), IF(NEW.balance_end_date_derived IS NULL, 'NULL, ', CONCAT('"', NEW.balance_end_date_derived, '", ')), IF(NEW.balance_number_of_days_derived IS NULL, 'NULL, ', CONCAT('"', NEW.balance_number_of_days_derived, '", ')), IF(NEW.running_balance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.running_balance_derived, '", ')), IF(NEW.cumulative_balance_derived IS NULL, 'NULL, ', CONCAT('"', NEW.cumulative_balance_derived, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.appuser_id IS NULL, 'NULL, ', CONCAT('"', NEW.appuser_id, '", ')), IF(NEW.is_manual IS NULL, 'NULL', CONCAT('"', NEW.is_manual, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'payment_detail_id', NEW.payment_detail_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_type_enum', NEW.transaction_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_reversed', NEW.is_reversed, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_amount_derived', NEW.overdraft_amount_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'balance_end_date_derived', NEW.balance_end_date_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', NEW.balance_number_of_days_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'running_balance_derived', NEW.running_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'cumulative_balance_derived', NEW.cumulative_balance_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_manual', NEW.is_manual, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_transaction_u%%
CREATE TRIGGER `m_savings_account_transaction_u`
AFTER UPDATE
  ON m_savings_account_transaction
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_transaction SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', payment_detail_id = ', IF(NEW.payment_detail_id IS NULL, 'NULL', CONCAT('"', NEW.payment_detail_id, '"')), ', transaction_type_enum = ', IF(NEW.transaction_type_enum IS NULL, 'NULL', CONCAT('"', NEW.transaction_type_enum, '"')), ', is_reversed = ', IF(NEW.is_reversed IS NULL, 'NULL', CONCAT('"', NEW.is_reversed, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', overdraft_amount_derived = ', IF(NEW.overdraft_amount_derived IS NULL, 'NULL', CONCAT('"', NEW.overdraft_amount_derived, '"')), ', balance_end_date_derived = ', IF(NEW.balance_end_date_derived IS NULL, 'NULL', CONCAT('"', NEW.balance_end_date_derived, '"')), ', balance_number_of_days_derived = ', IF(NEW.balance_number_of_days_derived IS NULL, 'NULL', CONCAT('"', NEW.balance_number_of_days_derived, '"')), ', running_balance_derived = ', IF(NEW.running_balance_derived IS NULL, 'NULL', CONCAT('"', NEW.running_balance_derived, '"')), ', cumulative_balance_derived = ', IF(NEW.cumulative_balance_derived IS NULL, 'NULL', CONCAT('"', NEW.cumulative_balance_derived, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', appuser_id = ', IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ', is_manual = ', IF(NEW.is_manual IS NULL, 'NULL', CONCAT('"', NEW.is_manual, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_transaction', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'payment_detail_id', OLD.payment_detail_id, NEW.payment_detail_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_type_enum', OLD.transaction_type_enum, NEW.transaction_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_reversed', OLD.is_reversed, NEW.is_reversed);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_amount_derived', OLD.overdraft_amount_derived, NEW.overdraft_amount_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_end_date_derived', OLD.balance_end_date_derived, NEW.balance_end_date_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'balance_number_of_days_derived', OLD.balance_number_of_days_derived, NEW.balance_number_of_days_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'running_balance_derived', OLD.running_balance_derived, NEW.running_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'cumulative_balance_derived', OLD.cumulative_balance_derived, NEW.cumulative_balance_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_manual', OLD.is_manual, NEW.is_manual);
  END%%


DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_d%%
CREATE TRIGGER `m_savings_account_transaction_tax_details_d`
BEFORE DELETE
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_account_transaction_tax_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_account_transaction_tax_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_i%%
CREATE TRIGGER `m_savings_account_transaction_tax_details_i`
AFTER INSERT
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_account_transaction_tax_details(id, savings_transaction_id, tax_component_id, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.savings_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_transaction_id, '", ')), IF(NEW.tax_component_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_component_id, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_account_transaction_tax_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_account_transaction_tax_details_u%%
CREATE TRIGGER `m_savings_account_transaction_tax_details_u`
AFTER UPDATE
  ON m_savings_account_transaction_tax_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_account_transaction_tax_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', savings_transaction_id = ', IF(NEW.savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_transaction_id, '"')), ', tax_component_id = ', IF(NEW.tax_component_id IS NULL, 'NULL', CONCAT('"', NEW.tax_component_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_account_transaction_tax_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_savings_interest_incentives_d%%
CREATE TRIGGER `m_savings_interest_incentives_d`
BEFORE DELETE
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_interest_incentives WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', OLD.deposit_account_interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_interest_incentives_i%%
CREATE TRIGGER `m_savings_interest_incentives_i`
AFTER INSERT
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_interest_incentives(id, deposit_account_interest_rate_slab_id, entiry_type, attribute_name, condition_type, attribute_value, incentive_type, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.deposit_account_interest_rate_slab_id IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_account_interest_rate_slab_id, '", ')), IF(NEW.entiry_type IS NULL, 'NULL, ', CONCAT('"', NEW.entiry_type, '", ')), IF(NEW.attribute_name IS NULL, 'NULL, ', CONCAT('"', NEW.attribute_name, '", ')), IF(NEW.condition_type IS NULL, 'NULL, ', CONCAT('"', NEW.condition_type, '", ')), IF(NEW.attribute_value IS NULL, 'NULL, ', CONCAT('"', NEW.attribute_value, '", ')), IF(NEW.incentive_type IS NULL, 'NULL, ', CONCAT('"', NEW.incentive_type, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', NEW.deposit_account_interest_rate_slab_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entiry_type', NEW.entiry_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_name', NEW.attribute_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'condition_type', NEW.condition_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'attribute_value', NEW.attribute_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'incentive_type', NEW.incentive_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_interest_incentives_u%%
CREATE TRIGGER `m_savings_interest_incentives_u`
AFTER UPDATE
  ON m_savings_interest_incentives
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_interest_incentives SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', deposit_account_interest_rate_slab_id = ', IF(NEW.deposit_account_interest_rate_slab_id IS NULL, 'NULL', CONCAT('"', NEW.deposit_account_interest_rate_slab_id, '"')), ', entiry_type = ', IF(NEW.entiry_type IS NULL, 'NULL', CONCAT('"', NEW.entiry_type, '"')), ', attribute_name = ', IF(NEW.attribute_name IS NULL, 'NULL', CONCAT('"', NEW.attribute_name, '"')), ', condition_type = ', IF(NEW.condition_type IS NULL, 'NULL', CONCAT('"', NEW.condition_type, '"')), ', attribute_value = ', IF(NEW.attribute_value IS NULL, 'NULL', CONCAT('"', NEW.attribute_value, '"')), ', incentive_type = ', IF(NEW.incentive_type IS NULL, 'NULL', CONCAT('"', NEW.incentive_type, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_interest_incentives', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_account_interest_rate_slab_id', OLD.deposit_account_interest_rate_slab_id, NEW.deposit_account_interest_rate_slab_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entiry_type', OLD.entiry_type, NEW.entiry_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_name', OLD.attribute_name, NEW.attribute_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'condition_type', OLD.condition_type, NEW.condition_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'attribute_value', OLD.attribute_value, NEW.attribute_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'incentive_type', OLD.incentive_type, NEW.incentive_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_d%%
CREATE TRIGGER `m_savings_officer_assignment_history_d`
BEFORE DELETE
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_officer_assignment_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_officer_id', OLD.savings_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_i%%
CREATE TRIGGER `m_savings_officer_assignment_history_i`
AFTER INSERT
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_officer_assignment_history(id, account_id, savings_officer_id, start_date, end_date, createdby_id, created_date, lastmodified_date, lastmodifiedby_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.savings_officer_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_officer_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_officer_id', NEW.savings_officer_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_officer_assignment_history_u%%
CREATE TRIGGER `m_savings_officer_assignment_history_u`
AFTER UPDATE
  ON m_savings_officer_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_officer_assignment_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', savings_officer_id = ', IF(NEW.savings_officer_id IS NULL, 'NULL', CONCAT('"', NEW.savings_officer_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_officer_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_officer_id', OLD.savings_officer_id, NEW.savings_officer_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END%%


DROP TRIGGER IF EXISTS m_savings_product_d%%
CREATE TRIGGER `m_savings_product_d`
BEFORE DELETE
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_product WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', OLD.withdrawal_fee_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', OLD.withdrawal_fee_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', OLD.is_dormancy_tracking_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_inactive', OLD.days_to_inactive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_dormancy', OLD.days_to_dormancy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_escheat', OLD.days_to_escheat, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_product_i%%
CREATE TRIGGER `m_savings_product_i`
AFTER INSERT
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_product(id, name, short_name, description, deposit_type_enum, currency_code, currency_digits, currency_multiplesof, nominal_annual_interest_rate, interest_compounding_period_enum, interest_posting_period_enum, interest_calculation_type_enum, interest_calculation_days_in_year_type_enum, min_required_opening_balance, lockin_period_frequency, lockin_period_frequency_enum, accounting_type, withdrawal_fee_amount, withdrawal_fee_type_enum, withdrawal_fee_for_transfer, allow_overdraft, overdraft_limit, nominal_annual_interest_rate_overdraft, min_overdraft_for_interest_calculation, min_required_balance, enforce_min_required_balance, min_balance_for_interest_calculation, withhold_tax, tax_group_id, is_dormancy_tracking_active, days_to_inactive, days_to_dormancy, days_to_escheat) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.short_name IS NULL, 'NULL, ', CONCAT('"', NEW.short_name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.deposit_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.deposit_type_enum, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.nominal_annual_interest_rate IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_annual_interest_rate, '", ')), IF(NEW.interest_compounding_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_compounding_period_enum, '", ')), IF(NEW.interest_posting_period_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_posting_period_enum, '", ')), IF(NEW.interest_calculation_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculation_type_enum, '", ')), IF(NEW.interest_calculation_days_in_year_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.interest_calculation_days_in_year_type_enum, '", ')), IF(NEW.min_required_opening_balance IS NULL, 'NULL, ', CONCAT('"', NEW.min_required_opening_balance, '", ')), IF(NEW.lockin_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency, '", ')), IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency_enum, '", ')), IF(NEW.accounting_type IS NULL, 'NULL, ', CONCAT('"', NEW.accounting_type, '", ')), IF(NEW.withdrawal_fee_amount IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawal_fee_amount, '", ')), IF(NEW.withdrawal_fee_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawal_fee_type_enum, '", ')), IF(NEW.withdrawal_fee_for_transfer IS NULL, 'NULL, ', CONCAT('"', NEW.withdrawal_fee_for_transfer, '", ')), IF(NEW.allow_overdraft IS NULL, 'NULL, ', CONCAT('"', NEW.allow_overdraft, '", ')), IF(NEW.overdraft_limit IS NULL, 'NULL, ', CONCAT('"', NEW.overdraft_limit, '", ')), IF(NEW.nominal_annual_interest_rate_overdraft IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_annual_interest_rate_overdraft, '", ')), IF(NEW.min_overdraft_for_interest_calculation IS NULL, 'NULL, ', CONCAT('"', NEW.min_overdraft_for_interest_calculation, '", ')), IF(NEW.min_required_balance IS NULL, 'NULL, ', CONCAT('"', NEW.min_required_balance, '", ')), IF(NEW.enforce_min_required_balance IS NULL, 'NULL, ', CONCAT('"', NEW.enforce_min_required_balance, '", ')), IF(NEW.min_balance_for_interest_calculation IS NULL, 'NULL, ', CONCAT('"', NEW.min_balance_for_interest_calculation, '", ')), IF(NEW.withhold_tax IS NULL, 'NULL, ', CONCAT('"', NEW.withhold_tax, '", ')), IF(NEW.tax_group_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_group_id, '", ')), IF(NEW.is_dormancy_tracking_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_dormancy_tracking_active, '", ')), IF(NEW.days_to_inactive IS NULL, 'NULL, ', CONCAT('"', NEW.days_to_inactive, '", ')), IF(NEW.days_to_dormancy IS NULL, 'NULL, ', CONCAT('"', NEW.days_to_dormancy, '", ')), IF(NEW.days_to_escheat IS NULL, 'NULL', CONCAT('"', NEW.days_to_escheat, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'deposit_type_enum', NEW.deposit_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', NEW.nominal_annual_interest_rate, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', NEW.interest_compounding_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_posting_period_enum', NEW.interest_posting_period_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', NEW.interest_calculation_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', NEW.interest_calculation_days_in_year_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_opening_balance', NEW.min_required_opening_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', NEW.withdrawal_fee_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', NEW.withdrawal_fee_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', NEW.withdrawal_fee_for_transfer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_overdraft', NEW.allow_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'overdraft_limit', NEW.overdraft_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', NEW.nominal_annual_interest_rate_overdraft, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', NEW.min_overdraft_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_required_balance', NEW.min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enforce_min_required_balance', NEW.enforce_min_required_balance, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', NEW.min_balance_for_interest_calculation, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'withhold_tax', NEW.withhold_tax, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', NEW.is_dormancy_tracking_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_inactive', NEW.days_to_inactive, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_dormancy', NEW.days_to_dormancy, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'days_to_escheat', NEW.days_to_escheat, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_product_u%%
CREATE TRIGGER `m_savings_product_u`
AFTER UPDATE
  ON m_savings_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_product SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', short_name = ', IF(NEW.short_name IS NULL, 'NULL', CONCAT('"', NEW.short_name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', deposit_type_enum = ', IF(NEW.deposit_type_enum IS NULL, 'NULL', CONCAT('"', NEW.deposit_type_enum, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', nominal_annual_interest_rate = ', IF(NEW.nominal_annual_interest_rate IS NULL, 'NULL', CONCAT('"', NEW.nominal_annual_interest_rate, '"')), ', interest_compounding_period_enum = ', IF(NEW.interest_compounding_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_compounding_period_enum, '"')), ', interest_posting_period_enum = ', IF(NEW.interest_posting_period_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_posting_period_enum, '"')), ', interest_calculation_type_enum = ', IF(NEW.interest_calculation_type_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculation_type_enum, '"')), ', interest_calculation_days_in_year_type_enum = ', IF(NEW.interest_calculation_days_in_year_type_enum IS NULL, 'NULL', CONCAT('"', NEW.interest_calculation_days_in_year_type_enum, '"')), ', min_required_opening_balance = ', IF(NEW.min_required_opening_balance IS NULL, 'NULL', CONCAT('"', NEW.min_required_opening_balance, '"')), ', lockin_period_frequency = ', IF(NEW.lockin_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency, '"')), ', lockin_period_frequency_enum = ', IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency_enum, '"')), ', accounting_type = ', IF(NEW.accounting_type IS NULL, 'NULL', CONCAT('"', NEW.accounting_type, '"')), ', withdrawal_fee_amount = ', IF(NEW.withdrawal_fee_amount IS NULL, 'NULL', CONCAT('"', NEW.withdrawal_fee_amount, '"')), ', withdrawal_fee_type_enum = ', IF(NEW.withdrawal_fee_type_enum IS NULL, 'NULL', CONCAT('"', NEW.withdrawal_fee_type_enum, '"')), ', withdrawal_fee_for_transfer = ', IF(NEW.withdrawal_fee_for_transfer IS NULL, 'NULL', CONCAT('"', NEW.withdrawal_fee_for_transfer, '"')), ', allow_overdraft = ', IF(NEW.allow_overdraft IS NULL, 'NULL', CONCAT('"', NEW.allow_overdraft, '"')), ', overdraft_limit = ', IF(NEW.overdraft_limit IS NULL, 'NULL', CONCAT('"', NEW.overdraft_limit, '"')), ', nominal_annual_interest_rate_overdraft = ', IF(NEW.nominal_annual_interest_rate_overdraft IS NULL, 'NULL', CONCAT('"', NEW.nominal_annual_interest_rate_overdraft, '"')), ', min_overdraft_for_interest_calculation = ', IF(NEW.min_overdraft_for_interest_calculation IS NULL, 'NULL', CONCAT('"', NEW.min_overdraft_for_interest_calculation, '"')), ', min_required_balance = ', IF(NEW.min_required_balance IS NULL, 'NULL', CONCAT('"', NEW.min_required_balance, '"')), ', enforce_min_required_balance = ', IF(NEW.enforce_min_required_balance IS NULL, 'NULL', CONCAT('"', NEW.enforce_min_required_balance, '"')), ', min_balance_for_interest_calculation = ', IF(NEW.min_balance_for_interest_calculation IS NULL, 'NULL', CONCAT('"', NEW.min_balance_for_interest_calculation, '"')), ', withhold_tax = ', IF(NEW.withhold_tax IS NULL, 'NULL', CONCAT('"', NEW.withhold_tax, '"')), ', tax_group_id = ', IF(NEW.tax_group_id IS NULL, 'NULL', CONCAT('"', NEW.tax_group_id, '"')), ', is_dormancy_tracking_active = ', IF(NEW.is_dormancy_tracking_active IS NULL, 'NULL', CONCAT('"', NEW.is_dormancy_tracking_active, '"')), ', days_to_inactive = ', IF(NEW.days_to_inactive IS NULL, 'NULL', CONCAT('"', NEW.days_to_inactive, '"')), ', days_to_dormancy = ', IF(NEW.days_to_dormancy IS NULL, 'NULL', CONCAT('"', NEW.days_to_dormancy, '"')), ', days_to_escheat = ', IF(NEW.days_to_escheat IS NULL, 'NULL', CONCAT('"', NEW.days_to_escheat, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'deposit_type_enum', OLD.deposit_type_enum, NEW.deposit_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate', OLD.nominal_annual_interest_rate, NEW.nominal_annual_interest_rate);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_compounding_period_enum', OLD.interest_compounding_period_enum, NEW.interest_compounding_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_posting_period_enum', OLD.interest_posting_period_enum, NEW.interest_posting_period_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_type_enum', OLD.interest_calculation_type_enum, NEW.interest_calculation_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'interest_calculation_days_in_year_type_enum', OLD.interest_calculation_days_in_year_type_enum, NEW.interest_calculation_days_in_year_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_opening_balance', OLD.min_required_opening_balance, NEW.min_required_opening_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_amount', OLD.withdrawal_fee_amount, NEW.withdrawal_fee_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_type_enum', OLD.withdrawal_fee_type_enum, NEW.withdrawal_fee_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withdrawal_fee_for_transfer', OLD.withdrawal_fee_for_transfer, NEW.withdrawal_fee_for_transfer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_overdraft', OLD.allow_overdraft, NEW.allow_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'overdraft_limit', OLD.overdraft_limit, NEW.overdraft_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_annual_interest_rate_overdraft', OLD.nominal_annual_interest_rate_overdraft, NEW.nominal_annual_interest_rate_overdraft);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_overdraft_for_interest_calculation', OLD.min_overdraft_for_interest_calculation, NEW.min_overdraft_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_required_balance', OLD.min_required_balance, NEW.min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enforce_min_required_balance', OLD.enforce_min_required_balance, NEW.enforce_min_required_balance);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_balance_for_interest_calculation', OLD.min_balance_for_interest_calculation, NEW.min_balance_for_interest_calculation);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'withhold_tax', OLD.withhold_tax, NEW.withhold_tax);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_dormancy_tracking_active', OLD.is_dormancy_tracking_active, NEW.is_dormancy_tracking_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_inactive', OLD.days_to_inactive, NEW.days_to_inactive);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_dormancy', OLD.days_to_dormancy, NEW.days_to_dormancy);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'days_to_escheat', OLD.days_to_escheat, NEW.days_to_escheat);
  END%%


DROP TRIGGER IF EXISTS m_savings_product_charge_d%%
CREATE TRIGGER `m_savings_product_charge_d`
BEFORE DELETE
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_savings_product_charge WHERE savings_product_id = "', OLD.savings_product_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_savings_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_product_charge_i%%
CREATE TRIGGER `m_savings_product_charge_i`
AFTER INSERT
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_savings_product_charge(savings_product_id, charge_id) VALUES(', IF(NEW.savings_product_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_product_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_savings_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_product_id', NEW.savings_product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_savings_product_charge_u%%
CREATE TRIGGER `m_savings_product_charge_u`
AFTER UPDATE
  ON m_savings_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_savings_product_charge SET savings_product_id = ', IF(NEW.savings_product_id IS NULL, 'NULL', CONCAT('"', NEW.savings_product_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ' WHERE savings_product_id = "', NEW.savings_product_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_savings_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_product_id', OLD.savings_product_id, NEW.savings_product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END%%


DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_d%%
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_d`
BEFORE DELETE
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_selfservice_beneficiaries_tpt WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_selfservice_beneficiaries_tpt', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'app_user_id', OLD.app_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type', OLD.account_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_limit', OLD.transfer_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_i%%
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_i`
AFTER INSERT
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_selfservice_beneficiaries_tpt(id, app_user_id, name, office_id, client_id, account_id, account_type, transfer_limit, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.app_user_id IS NULL, 'NULL, ', CONCAT('"', NEW.app_user_id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.account_type IS NULL, 'NULL, ', CONCAT('"', NEW.account_type, '", ')), IF(NEW.transfer_limit IS NULL, 'NULL, ', CONCAT('"', NEW.transfer_limit, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_selfservice_beneficiaries_tpt', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'app_user_id', NEW.app_user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_type', NEW.account_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transfer_limit', NEW.transfer_limit, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_selfservice_beneficiaries_tpt_u%%
CREATE TRIGGER `m_selfservice_beneficiaries_tpt_u`
AFTER UPDATE
  ON m_selfservice_beneficiaries_tpt
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_selfservice_beneficiaries_tpt SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', app_user_id = ', IF(NEW.app_user_id IS NULL, 'NULL', CONCAT('"', NEW.app_user_id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', account_type = ', IF(NEW.account_type IS NULL, 'NULL', CONCAT('"', NEW.account_type, '"')), ', transfer_limit = ', IF(NEW.transfer_limit IS NULL, 'NULL', CONCAT('"', NEW.transfer_limit, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_selfservice_beneficiaries_tpt', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'app_user_id', OLD.app_user_id, NEW.app_user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_type', OLD.account_type, NEW.account_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transfer_limit', OLD.transfer_limit, NEW.transfer_limit);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_d%%
CREATE TRIGGER `m_selfservice_user_client_mapping_d`
BEFORE DELETE
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_selfservice_user_client_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_selfservice_user_client_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_i%%
CREATE TRIGGER `m_selfservice_user_client_mapping_i`
AFTER INSERT
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_selfservice_user_client_mapping(id, appuser_id, client_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.appuser_id IS NULL, 'NULL, ', CONCAT('"', NEW.appuser_id, '", ')), IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_selfservice_user_client_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'appuser_id', NEW.appuser_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_selfservice_user_client_mapping_u%%
CREATE TRIGGER `m_selfservice_user_client_mapping_u`
AFTER UPDATE
  ON m_selfservice_user_client_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_selfservice_user_client_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', appuser_id = ', IF(NEW.appuser_id IS NULL, 'NULL', CONCAT('"', NEW.appuser_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_selfservice_user_client_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'appuser_id', OLD.appuser_id, NEW.appuser_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
  END%%


DROP TRIGGER IF EXISTS m_share_account_d%%
CREATE TRIGGER `m_share_account_d`
BEFORE DELETE
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_account WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_approved_shares', OLD.total_approved_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_pending_shares', OLD.total_pending_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_date', OLD.submitted_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_userid', OLD.submitted_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_date', OLD.approved_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_userid', OLD.approved_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_date', OLD.rejected_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_userid', OLD.rejected_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_date', OLD.activated_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_userid', OLD.activated_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_date', OLD.closed_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_userid', OLD.closed_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_i%%
CREATE TRIGGER `m_share_account_i`
AFTER INSERT
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_account(id, account_no, product_id, client_id, external_id, status_enum, total_approved_shares, total_pending_shares, submitted_date, submitted_userid, approved_date, approved_userid, rejected_date, rejected_userid, activated_date, activated_userid, closed_date, closed_userid, currency_code, currency_digits, currency_multiplesof, savings_account_id, minimum_active_period_frequency, minimum_active_period_frequency_enum, lockin_period_frequency, lockin_period_frequency_enum, allow_dividends_inactive_clients, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_no IS NULL, 'NULL, ', CONCAT('"', NEW.account_no, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.total_approved_shares IS NULL, 'NULL, ', CONCAT('"', NEW.total_approved_shares, '", ')), IF(NEW.total_pending_shares IS NULL, 'NULL, ', CONCAT('"', NEW.total_pending_shares, '", ')), IF(NEW.submitted_date IS NULL, 'NULL, ', CONCAT('"', NEW.submitted_date, '", ')), IF(NEW.submitted_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submitted_userid, '", ')), IF(NEW.approved_date IS NULL, 'NULL, ', CONCAT('"', NEW.approved_date, '", ')), IF(NEW.approved_userid IS NULL, 'NULL, ', CONCAT('"', NEW.approved_userid, '", ')), IF(NEW.rejected_date IS NULL, 'NULL, ', CONCAT('"', NEW.rejected_date, '", ')), IF(NEW.rejected_userid IS NULL, 'NULL, ', CONCAT('"', NEW.rejected_userid, '", ')), IF(NEW.activated_date IS NULL, 'NULL, ', CONCAT('"', NEW.activated_date, '", ')), IF(NEW.activated_userid IS NULL, 'NULL, ', CONCAT('"', NEW.activated_userid, '", ')), IF(NEW.closed_date IS NULL, 'NULL, ', CONCAT('"', NEW.closed_date, '", ')), IF(NEW.closed_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closed_userid, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.savings_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.savings_account_id, '", ')), IF(NEW.minimum_active_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_active_period_frequency, '", ')), IF(NEW.minimum_active_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_active_period_frequency_enum, '", ')), IF(NEW.lockin_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency, '", ')), IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency_enum, '", ')), IF(NEW.allow_dividends_inactive_clients IS NULL, 'NULL, ', CONCAT('"', NEW.allow_dividends_inactive_clients, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_no', NEW.account_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_approved_shares', NEW.total_approved_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_pending_shares', NEW.total_pending_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_date', NEW.submitted_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submitted_userid', NEW.submitted_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_date', NEW.approved_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approved_userid', NEW.approved_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_date', NEW.rejected_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'rejected_userid', NEW.rejected_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activated_date', NEW.activated_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'activated_userid', NEW.activated_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closed_date', NEW.closed_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closed_userid', NEW.closed_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_account_id', NEW.savings_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', NEW.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', NEW.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', NEW.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_u%%
CREATE TRIGGER `m_share_account_u`
AFTER UPDATE
  ON m_share_account
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_account SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_no = ', IF(NEW.account_no IS NULL, 'NULL', CONCAT('"', NEW.account_no, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', total_approved_shares = ', IF(NEW.total_approved_shares IS NULL, 'NULL', CONCAT('"', NEW.total_approved_shares, '"')), ', total_pending_shares = ', IF(NEW.total_pending_shares IS NULL, 'NULL', CONCAT('"', NEW.total_pending_shares, '"')), ', submitted_date = ', IF(NEW.submitted_date IS NULL, 'NULL', CONCAT('"', NEW.submitted_date, '"')), ', submitted_userid = ', IF(NEW.submitted_userid IS NULL, 'NULL', CONCAT('"', NEW.submitted_userid, '"')), ', approved_date = ', IF(NEW.approved_date IS NULL, 'NULL', CONCAT('"', NEW.approved_date, '"')), ', approved_userid = ', IF(NEW.approved_userid IS NULL, 'NULL', CONCAT('"', NEW.approved_userid, '"')), ', rejected_date = ', IF(NEW.rejected_date IS NULL, 'NULL', CONCAT('"', NEW.rejected_date, '"')), ', rejected_userid = ', IF(NEW.rejected_userid IS NULL, 'NULL', CONCAT('"', NEW.rejected_userid, '"')), ', activated_date = ', IF(NEW.activated_date IS NULL, 'NULL', CONCAT('"', NEW.activated_date, '"')), ', activated_userid = ', IF(NEW.activated_userid IS NULL, 'NULL', CONCAT('"', NEW.activated_userid, '"')), ', closed_date = ', IF(NEW.closed_date IS NULL, 'NULL', CONCAT('"', NEW.closed_date, '"')), ', closed_userid = ', IF(NEW.closed_userid IS NULL, 'NULL', CONCAT('"', NEW.closed_userid, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', savings_account_id = ', IF(NEW.savings_account_id IS NULL, 'NULL', CONCAT('"', NEW.savings_account_id, '"')), ', minimum_active_period_frequency = ', IF(NEW.minimum_active_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.minimum_active_period_frequency, '"')), ', minimum_active_period_frequency_enum = ', IF(NEW.minimum_active_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.minimum_active_period_frequency_enum, '"')), ', lockin_period_frequency = ', IF(NEW.lockin_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency, '"')), ', lockin_period_frequency_enum = ', IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency_enum, '"')), ', allow_dividends_inactive_clients = ', IF(NEW.allow_dividends_inactive_clients IS NULL, 'NULL', CONCAT('"', NEW.allow_dividends_inactive_clients, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_account', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_no', OLD.account_no, NEW.account_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_approved_shares', OLD.total_approved_shares, NEW.total_approved_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_pending_shares', OLD.total_pending_shares, NEW.total_pending_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_date', OLD.submitted_date, NEW.submitted_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submitted_userid', OLD.submitted_userid, NEW.submitted_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_date', OLD.approved_date, NEW.approved_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approved_userid', OLD.approved_userid, NEW.approved_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_date', OLD.rejected_date, NEW.rejected_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'rejected_userid', OLD.rejected_userid, NEW.rejected_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_date', OLD.activated_date, NEW.activated_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'activated_userid', OLD.activated_userid, NEW.activated_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_date', OLD.closed_date, NEW.closed_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closed_userid', OLD.closed_userid, NEW.closed_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_account_id', OLD.savings_account_id, NEW.savings_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NEW.minimum_active_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NEW.minimum_active_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NEW.allow_dividends_inactive_clients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_share_account_charge_d%%
CREATE TRIGGER `m_share_account_charge_d`
BEFORE DELETE
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_account_charge WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_charge_i%%
CREATE TRIGGER `m_share_account_charge_i`
AFTER INSERT
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_account_charge(id, account_id, charge_id, charge_time_enum, charge_calculation_enum, charge_payment_mode_enum, calculation_percentage, calculation_on_amount, charge_amount_or_percentage, amount, amount_paid_derived, amount_waived_derived, amount_writtenoff_derived, amount_outstanding_derived, is_paid_derived, waived, min_cap, max_cap, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_id, '", ')), IF(NEW.charge_time_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_time_enum, '", ')), IF(NEW.charge_calculation_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_calculation_enum, '", ')), IF(NEW.charge_payment_mode_enum IS NULL, 'NULL, ', CONCAT('"', NEW.charge_payment_mode_enum, '", ')), IF(NEW.calculation_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_percentage, '", ')), IF(NEW.calculation_on_amount IS NULL, 'NULL, ', CONCAT('"', NEW.calculation_on_amount, '", ')), IF(NEW.charge_amount_or_percentage IS NULL, 'NULL, ', CONCAT('"', NEW.charge_amount_or_percentage, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.amount_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid_derived, '", ')), IF(NEW.amount_waived_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_waived_derived, '", ')), IF(NEW.amount_writtenoff_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_writtenoff_derived, '", ')), IF(NEW.amount_outstanding_derived IS NULL, 'NULL, ', CONCAT('"', NEW.amount_outstanding_derived, '", ')), IF(NEW.is_paid_derived IS NULL, 'NULL, ', CONCAT('"', NEW.is_paid_derived, '", ')), IF(NEW.waived IS NULL, 'NULL, ', CONCAT('"', NEW.waived, '", ')), IF(NEW.min_cap IS NULL, 'NULL, ', CONCAT('"', NEW.min_cap, '", ')), IF(NEW.max_cap IS NULL, 'NULL, ', CONCAT('"', NEW.max_cap, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_time_enum', NEW.charge_time_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_calculation_enum', NEW.charge_calculation_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', NEW.charge_payment_mode_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_percentage', NEW.calculation_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'calculation_on_amount', NEW.calculation_on_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', NEW.charge_amount_or_percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid_derived', NEW.amount_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_waived_derived', NEW.amount_waived_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', NEW.amount_writtenoff_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_outstanding_derived', NEW.amount_outstanding_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_paid_derived', NEW.is_paid_derived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'waived', NEW.waived, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'min_cap', NEW.min_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'max_cap', NEW.max_cap, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_charge_u%%
CREATE TRIGGER `m_share_account_charge_u`
AFTER UPDATE
  ON m_share_account_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_account_charge SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ', charge_time_enum = ', IF(NEW.charge_time_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_time_enum, '"')), ', charge_calculation_enum = ', IF(NEW.charge_calculation_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_calculation_enum, '"')), ', charge_payment_mode_enum = ', IF(NEW.charge_payment_mode_enum IS NULL, 'NULL', CONCAT('"', NEW.charge_payment_mode_enum, '"')), ', calculation_percentage = ', IF(NEW.calculation_percentage IS NULL, 'NULL', CONCAT('"', NEW.calculation_percentage, '"')), ', calculation_on_amount = ', IF(NEW.calculation_on_amount IS NULL, 'NULL', CONCAT('"', NEW.calculation_on_amount, '"')), ', charge_amount_or_percentage = ', IF(NEW.charge_amount_or_percentage IS NULL, 'NULL', CONCAT('"', NEW.charge_amount_or_percentage, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', amount_paid_derived = ', IF(NEW.amount_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_paid_derived, '"')), ', amount_waived_derived = ', IF(NEW.amount_waived_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_waived_derived, '"')), ', amount_writtenoff_derived = ', IF(NEW.amount_writtenoff_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_writtenoff_derived, '"')), ', amount_outstanding_derived = ', IF(NEW.amount_outstanding_derived IS NULL, 'NULL', CONCAT('"', NEW.amount_outstanding_derived, '"')), ', is_paid_derived = ', IF(NEW.is_paid_derived IS NULL, 'NULL', CONCAT('"', NEW.is_paid_derived, '"')), ', waived = ', IF(NEW.waived IS NULL, 'NULL', CONCAT('"', NEW.waived, '"')), ', min_cap = ', IF(NEW.min_cap IS NULL, 'NULL', CONCAT('"', NEW.min_cap, '"')), ', max_cap = ', IF(NEW.max_cap IS NULL, 'NULL', CONCAT('"', NEW.max_cap, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_account_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_time_enum', OLD.charge_time_enum, NEW.charge_time_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_calculation_enum', OLD.charge_calculation_enum, NEW.charge_calculation_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_payment_mode_enum', OLD.charge_payment_mode_enum, NEW.charge_payment_mode_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_percentage', OLD.calculation_percentage, NEW.calculation_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'calculation_on_amount', OLD.calculation_on_amount, NEW.calculation_on_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount_or_percentage', OLD.charge_amount_or_percentage, NEW.charge_amount_or_percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid_derived', OLD.amount_paid_derived, NEW.amount_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_waived_derived', OLD.amount_waived_derived, NEW.amount_waived_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_writtenoff_derived', OLD.amount_writtenoff_derived, NEW.amount_writtenoff_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_outstanding_derived', OLD.amount_outstanding_derived, NEW.amount_outstanding_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_paid_derived', OLD.is_paid_derived, NEW.is_paid_derived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'waived', OLD.waived, NEW.waived);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'min_cap', OLD.min_cap, NEW.min_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'max_cap', OLD.max_cap, NEW.max_cap);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_d%%
CREATE TRIGGER `m_share_account_charge_paid_by_d`
BEFORE DELETE
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_account_charge_paid_by WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_transaction_id', OLD.charge_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_i%%
CREATE TRIGGER `m_share_account_charge_paid_by_i`
AFTER INSERT
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_account_charge_paid_by(id, share_transaction_id, charge_transaction_id, amount) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.share_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.share_transaction_id, '", ')), IF(NEW.charge_transaction_id IS NULL, 'NULL, ', CONCAT('"', NEW.charge_transaction_id, '", ')), IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_transaction_id', NEW.share_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_transaction_id', NEW.charge_transaction_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_charge_paid_by_u%%
CREATE TRIGGER `m_share_account_charge_paid_by_u`
AFTER UPDATE
  ON m_share_account_charge_paid_by
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_account_charge_paid_by SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', share_transaction_id = ', IF(NEW.share_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.share_transaction_id, '"')), ', charge_transaction_id = ', IF(NEW.charge_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.charge_transaction_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_account_charge_paid_by', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_transaction_id', OLD.share_transaction_id, NEW.share_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_transaction_id', OLD.charge_transaction_id, NEW.charge_transaction_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
  END%%


DROP TRIGGER IF EXISTS m_share_account_dividend_details_d%%
CREATE TRIGGER `m_share_account_dividend_details_d`
BEFORE DELETE
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_account_dividend_details WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_account_dividend_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_pay_out_id', OLD.dividend_pay_out_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_dividend_details_i%%
CREATE TRIGGER `m_share_account_dividend_details_i`
AFTER INSERT
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_account_dividend_details(id, dividend_pay_out_id, account_id, amount, status, savings_transaction_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.dividend_pay_out_id IS NULL, 'NULL, ', CONCAT('"', NEW.dividend_pay_out_id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_transaction_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_account_dividend_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_pay_out_id', NEW.dividend_pay_out_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'savings_transaction_id', NEW.savings_transaction_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_dividend_details_u%%
CREATE TRIGGER `m_share_account_dividend_details_u`
AFTER UPDATE
  ON m_share_account_dividend_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_account_dividend_details SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', dividend_pay_out_id = ', IF(NEW.dividend_pay_out_id IS NULL, 'NULL', CONCAT('"', NEW.dividend_pay_out_id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', savings_transaction_id = ', IF(NEW.savings_transaction_id IS NULL, 'NULL', CONCAT('"', NEW.savings_transaction_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_account_dividend_details', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_pay_out_id', OLD.dividend_pay_out_id, NEW.dividend_pay_out_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'savings_transaction_id', OLD.savings_transaction_id, NEW.savings_transaction_id);
  END%%


DROP TRIGGER IF EXISTS m_share_account_transactions_d%%
CREATE TRIGGER `m_share_account_transactions_d`
BEFORE DELETE
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_account_transactions WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_account_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount', OLD.charge_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid', OLD.amount_paid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_transactions_i%%
CREATE TRIGGER `m_share_account_transactions_i`
AFTER INSERT
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_account_transactions(id, account_id, transaction_date, total_shares, unit_price, amount, charge_amount, amount_paid, status_enum, type_enum, is_active) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.account_id IS NULL, 'NULL, ', CONCAT('"', NEW.account_id, '", ')), IF(NEW.transaction_date IS NULL, 'NULL, ', CONCAT('"', NEW.transaction_date, '", ')), IF(NEW.total_shares IS NULL, 'NULL, ', CONCAT('"', NEW.total_shares, '", ')), IF(NEW.unit_price IS NULL, 'NULL, ', CONCAT('"', NEW.unit_price, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.charge_amount IS NULL, 'NULL, ', CONCAT('"', NEW.charge_amount, '", ')), IF(NEW.amount_paid IS NULL, 'NULL, ', CONCAT('"', NEW.amount_paid, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.type_enum, '", ')), IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_account_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'account_id', NEW.account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'transaction_date', NEW.transaction_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_shares', NEW.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unit_price', NEW.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_amount', NEW.charge_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount_paid', NEW.amount_paid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type_enum', NEW.type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_account_transactions_u%%
CREATE TRIGGER `m_share_account_transactions_u`
AFTER UPDATE
  ON m_share_account_transactions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_account_transactions SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', account_id = ', IF(NEW.account_id IS NULL, 'NULL', CONCAT('"', NEW.account_id, '"')), ', transaction_date = ', IF(NEW.transaction_date IS NULL, 'NULL', CONCAT('"', NEW.transaction_date, '"')), ', total_shares = ', IF(NEW.total_shares IS NULL, 'NULL', CONCAT('"', NEW.total_shares, '"')), ', unit_price = ', IF(NEW.unit_price IS NULL, 'NULL', CONCAT('"', NEW.unit_price, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', charge_amount = ', IF(NEW.charge_amount IS NULL, 'NULL', CONCAT('"', NEW.charge_amount, '"')), ', amount_paid = ', IF(NEW.amount_paid IS NULL, 'NULL', CONCAT('"', NEW.amount_paid, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', type_enum = ', IF(NEW.type_enum IS NULL, 'NULL', CONCAT('"', NEW.type_enum, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_account_transactions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'account_id', OLD.account_id, NEW.account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'transaction_date', OLD.transaction_date, NEW.transaction_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NEW.total_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NEW.unit_price);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_amount', OLD.charge_amount, NEW.charge_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount_paid', OLD.amount_paid, NEW.amount_paid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type_enum', OLD.type_enum, NEW.type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
  END%%


DROP TRIGGER IF EXISTS m_share_product_d%%
CREATE TRIGGER `m_share_product_d`
BEFORE DELETE
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_product WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'issued_shares', OLD.issued_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'totalsubscribed_shares', OLD.totalsubscribed_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'capital_amount', OLD.capital_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_client_shares', OLD.minimum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_client_shares', OLD.nominal_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_client_shares', OLD.maximum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_i%%
CREATE TRIGGER `m_share_product_i`
AFTER INSERT
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_product(id, name, short_name, external_id, description, start_date, end_date, currency_code, currency_digits, currency_multiplesof, total_shares, issued_shares, totalsubscribed_shares, unit_price, capital_amount, minimum_client_shares, nominal_client_shares, maximum_client_shares, minimum_active_period_frequency, minimum_active_period_frequency_enum, lockin_period_frequency, lockin_period_frequency_enum, allow_dividends_inactive_clients, createdby_id, created_date, lastmodifiedby_id, lastmodified_date, accounting_type) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.short_name IS NULL, 'NULL, ', CONCAT('"', NEW.short_name, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.currency_code IS NULL, 'NULL, ', CONCAT('"', NEW.currency_code, '", ')), IF(NEW.currency_digits IS NULL, 'NULL, ', CONCAT('"', NEW.currency_digits, '", ')), IF(NEW.currency_multiplesof IS NULL, 'NULL, ', CONCAT('"', NEW.currency_multiplesof, '", ')), IF(NEW.total_shares IS NULL, 'NULL, ', CONCAT('"', NEW.total_shares, '", ')), IF(NEW.issued_shares IS NULL, 'NULL, ', CONCAT('"', NEW.issued_shares, '", ')), IF(NEW.totalsubscribed_shares IS NULL, 'NULL, ', CONCAT('"', NEW.totalsubscribed_shares, '", ')), IF(NEW.unit_price IS NULL, 'NULL, ', CONCAT('"', NEW.unit_price, '", ')), IF(NEW.capital_amount IS NULL, 'NULL, ', CONCAT('"', NEW.capital_amount, '", ')), IF(NEW.minimum_client_shares IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_client_shares, '", ')), IF(NEW.nominal_client_shares IS NULL, 'NULL, ', CONCAT('"', NEW.nominal_client_shares, '", ')), IF(NEW.maximum_client_shares IS NULL, 'NULL, ', CONCAT('"', NEW.maximum_client_shares, '", ')), IF(NEW.minimum_active_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_active_period_frequency, '", ')), IF(NEW.minimum_active_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.minimum_active_period_frequency_enum, '", ')), IF(NEW.lockin_period_frequency IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency, '", ')), IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL, ', CONCAT('"', NEW.lockin_period_frequency_enum, '", ')), IF(NEW.allow_dividends_inactive_clients IS NULL, 'NULL, ', CONCAT('"', NEW.allow_dividends_inactive_clients, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.accounting_type IS NULL, 'NULL', CONCAT('"', NEW.accounting_type, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'short_name', NEW.short_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_code', NEW.currency_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_digits', NEW.currency_digits, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency_multiplesof', NEW.currency_multiplesof, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'total_shares', NEW.total_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'issued_shares', NEW.issued_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'totalsubscribed_shares', NEW.totalsubscribed_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'unit_price', NEW.unit_price, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'capital_amount', NEW.capital_amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_client_shares', NEW.minimum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'nominal_client_shares', NEW.nominal_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'maximum_client_shares', NEW.maximum_client_shares, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', NEW.minimum_active_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', NEW.minimum_active_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency', NEW.lockin_period_frequency, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', NEW.lockin_period_frequency_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', NEW.allow_dividends_inactive_clients, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'accounting_type', NEW.accounting_type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_u%%
CREATE TRIGGER `m_share_product_u`
AFTER UPDATE
  ON m_share_product
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_product SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', short_name = ', IF(NEW.short_name IS NULL, 'NULL', CONCAT('"', NEW.short_name, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', currency_code = ', IF(NEW.currency_code IS NULL, 'NULL', CONCAT('"', NEW.currency_code, '"')), ', currency_digits = ', IF(NEW.currency_digits IS NULL, 'NULL', CONCAT('"', NEW.currency_digits, '"')), ', currency_multiplesof = ', IF(NEW.currency_multiplesof IS NULL, 'NULL', CONCAT('"', NEW.currency_multiplesof, '"')), ', total_shares = ', IF(NEW.total_shares IS NULL, 'NULL', CONCAT('"', NEW.total_shares, '"')), ', issued_shares = ', IF(NEW.issued_shares IS NULL, 'NULL', CONCAT('"', NEW.issued_shares, '"')), ', totalsubscribed_shares = ', IF(NEW.totalsubscribed_shares IS NULL, 'NULL', CONCAT('"', NEW.totalsubscribed_shares, '"')), ', unit_price = ', IF(NEW.unit_price IS NULL, 'NULL', CONCAT('"', NEW.unit_price, '"')), ', capital_amount = ', IF(NEW.capital_amount IS NULL, 'NULL', CONCAT('"', NEW.capital_amount, '"')), ', minimum_client_shares = ', IF(NEW.minimum_client_shares IS NULL, 'NULL', CONCAT('"', NEW.minimum_client_shares, '"')), ', nominal_client_shares = ', IF(NEW.nominal_client_shares IS NULL, 'NULL', CONCAT('"', NEW.nominal_client_shares, '"')), ', maximum_client_shares = ', IF(NEW.maximum_client_shares IS NULL, 'NULL', CONCAT('"', NEW.maximum_client_shares, '"')), ', minimum_active_period_frequency = ', IF(NEW.minimum_active_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.minimum_active_period_frequency, '"')), ', minimum_active_period_frequency_enum = ', IF(NEW.minimum_active_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.minimum_active_period_frequency_enum, '"')), ', lockin_period_frequency = ', IF(NEW.lockin_period_frequency IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency, '"')), ', lockin_period_frequency_enum = ', IF(NEW.lockin_period_frequency_enum IS NULL, 'NULL', CONCAT('"', NEW.lockin_period_frequency_enum, '"')), ', allow_dividends_inactive_clients = ', IF(NEW.allow_dividends_inactive_clients IS NULL, 'NULL', CONCAT('"', NEW.allow_dividends_inactive_clients, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', accounting_type = ', IF(NEW.accounting_type IS NULL, 'NULL', CONCAT('"', NEW.accounting_type, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_product', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'short_name', OLD.short_name, NEW.short_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_code', OLD.currency_code, NEW.currency_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_digits', OLD.currency_digits, NEW.currency_digits);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency_multiplesof', OLD.currency_multiplesof, NEW.currency_multiplesof);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'total_shares', OLD.total_shares, NEW.total_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'issued_shares', OLD.issued_shares, NEW.issued_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'totalsubscribed_shares', OLD.totalsubscribed_shares, NEW.totalsubscribed_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'unit_price', OLD.unit_price, NEW.unit_price);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'capital_amount', OLD.capital_amount, NEW.capital_amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_client_shares', OLD.minimum_client_shares, NEW.minimum_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'nominal_client_shares', OLD.nominal_client_shares, NEW.nominal_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'maximum_client_shares', OLD.maximum_client_shares, NEW.maximum_client_shares);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency', OLD.minimum_active_period_frequency, NEW.minimum_active_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'minimum_active_period_frequency_enum', OLD.minimum_active_period_frequency_enum, NEW.minimum_active_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency', OLD.lockin_period_frequency, NEW.lockin_period_frequency);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lockin_period_frequency_enum', OLD.lockin_period_frequency_enum, NEW.lockin_period_frequency_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'allow_dividends_inactive_clients', OLD.allow_dividends_inactive_clients, NEW.allow_dividends_inactive_clients);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'accounting_type', OLD.accounting_type, NEW.accounting_type);
  END%%


DROP TRIGGER IF EXISTS m_share_product_charge_d%%
CREATE TRIGGER `m_share_product_charge_d`
BEFORE DELETE
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_product_charge WHERE product_id = "', OLD.product_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_charge_i%%
CREATE TRIGGER `m_share_product_charge_i`
AFTER INSERT
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_product_charge(product_id, charge_id) VALUES(', IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'charge_id', NEW.charge_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_charge_u%%
CREATE TRIGGER `m_share_product_charge_u`
AFTER UPDATE
  ON m_share_product_charge
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_product_charge SET product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', charge_id = ', IF(NEW.charge_id IS NULL, 'NULL', CONCAT('"', NEW.charge_id, '"')), ' WHERE product_id = "', NEW.product_id, '"', ' AND charge_id = "', OLD.charge_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_product_charge', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'charge_id', OLD.charge_id, NEW.charge_id);
  END%%


DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_d%%
CREATE TRIGGER `m_share_product_dividend_pay_out_d`
BEFORE DELETE
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_product_dividend_pay_out WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_product_dividend_pay_out', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_start_date', OLD.dividend_period_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_end_date', OLD.dividend_period_end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_i%%
CREATE TRIGGER `m_share_product_dividend_pay_out_i`
AFTER INSERT
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_product_dividend_pay_out(id, product_id, amount, dividend_period_start_date, dividend_period_end_date, status, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.amount IS NULL, 'NULL, ', CONCAT('"', NEW.amount, '", ')), IF(NEW.dividend_period_start_date IS NULL, 'NULL, ', CONCAT('"', NEW.dividend_period_start_date, '", ')), IF(NEW.dividend_period_end_date IS NULL, 'NULL, ', CONCAT('"', NEW.dividend_period_end_date, '", ')), IF(NEW.status IS NULL, 'NULL, ', CONCAT('"', NEW.status, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_product_dividend_pay_out', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'amount', NEW.amount, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_period_start_date', NEW.dividend_period_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dividend_period_end_date', NEW.dividend_period_end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status', NEW.status, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_dividend_pay_out_u%%
CREATE TRIGGER `m_share_product_dividend_pay_out_u`
AFTER UPDATE
  ON m_share_product_dividend_pay_out
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_product_dividend_pay_out SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', amount = ', IF(NEW.amount IS NULL, 'NULL', CONCAT('"', NEW.amount, '"')), ', dividend_period_start_date = ', IF(NEW.dividend_period_start_date IS NULL, 'NULL', CONCAT('"', NEW.dividend_period_start_date, '"')), ', dividend_period_end_date = ', IF(NEW.dividend_period_end_date IS NULL, 'NULL', CONCAT('"', NEW.dividend_period_end_date, '"')), ', status = ', IF(NEW.status IS NULL, 'NULL', CONCAT('"', NEW.status, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_product_dividend_pay_out', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'amount', OLD.amount, NEW.amount);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_start_date', OLD.dividend_period_start_date, NEW.dividend_period_start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dividend_period_end_date', OLD.dividend_period_end_date, NEW.dividend_period_end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status', OLD.status, NEW.status);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_share_product_market_price_d%%
CREATE TRIGGER `m_share_product_market_price_d`
BEFORE DELETE
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_share_product_market_price WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_share_product_market_price', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_value', OLD.share_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_market_price_i%%
CREATE TRIGGER `m_share_product_market_price_i`
AFTER INSERT
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_share_product_market_price(id, product_id, from_date, share_value) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.product_id IS NULL, 'NULL, ', CONCAT('"', NEW.product_id, '", ')), IF(NEW.from_date IS NULL, 'NULL, ', CONCAT('"', NEW.from_date, '", ')), IF(NEW.share_value IS NULL, 'NULL', CONCAT('"', NEW.share_value, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_share_product_market_price', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'product_id', NEW.product_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'from_date', NEW.from_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'share_value', NEW.share_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_share_product_market_price_u%%
CREATE TRIGGER `m_share_product_market_price_u`
AFTER UPDATE
  ON m_share_product_market_price
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_share_product_market_price SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', product_id = ', IF(NEW.product_id IS NULL, 'NULL', CONCAT('"', NEW.product_id, '"')), ', from_date = ', IF(NEW.from_date IS NULL, 'NULL', CONCAT('"', NEW.from_date, '"')), ', share_value = ', IF(NEW.share_value IS NULL, 'NULL', CONCAT('"', NEW.share_value, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_share_product_market_price', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'product_id', OLD.product_id, NEW.product_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'from_date', OLD.from_date, NEW.from_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'share_value', OLD.share_value, NEW.share_value);
  END%%


DROP TRIGGER IF EXISTS m_staff_d%%
CREATE TRIGGER `m_staff_d`
BEFORE DELETE
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_staff WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_staff', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_loan_officer', OLD.is_loan_officer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_enum', OLD.organisational_role_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', OLD.organisational_role_parent_staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'joining_date', OLD.joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_staff_i%%
CREATE TRIGGER `m_staff_i`
AFTER INSERT
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_staff(id, is_loan_officer, office_id, firstname, lastname, display_name, mobile_no, external_id, organisational_role_enum, organisational_role_parent_staff_id, is_active, joining_date, image_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.is_loan_officer IS NULL, 'NULL, ', CONCAT('"', NEW.is_loan_officer, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.firstname IS NULL, 'NULL, ', CONCAT('"', NEW.firstname, '", ')), IF(NEW.lastname IS NULL, 'NULL, ', CONCAT('"', NEW.lastname, '", ')), IF(NEW.display_name IS NULL, 'NULL, ', CONCAT('"', NEW.display_name, '", ')), IF(NEW.mobile_no IS NULL, 'NULL, ', CONCAT('"', NEW.mobile_no, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.organisational_role_enum IS NULL, 'NULL, ', CONCAT('"', NEW.organisational_role_enum, '", ')), IF(NEW.organisational_role_parent_staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.organisational_role_parent_staff_id, '", ')), IF(NEW.is_active IS NULL, 'NULL, ', CONCAT('"', NEW.is_active, '", ')), IF(NEW.joining_date IS NULL, 'NULL, ', CONCAT('"', NEW.joining_date, '", ')), IF(NEW.image_id IS NULL, 'NULL', CONCAT('"', NEW.image_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_staff', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_loan_officer', NEW.is_loan_officer, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'firstname', NEW.firstname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastname', NEW.lastname, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'display_name', NEW.display_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisational_role_enum', NEW.organisational_role_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', NEW.organisational_role_parent_staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_active', NEW.is_active, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'joining_date', NEW.joining_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'image_id', NEW.image_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_staff_u%%
CREATE TRIGGER `m_staff_u`
AFTER UPDATE
  ON m_staff
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_staff SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', is_loan_officer = ', IF(NEW.is_loan_officer IS NULL, 'NULL', CONCAT('"', NEW.is_loan_officer, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', firstname = ', IF(NEW.firstname IS NULL, 'NULL', CONCAT('"', NEW.firstname, '"')), ', lastname = ', IF(NEW.lastname IS NULL, 'NULL', CONCAT('"', NEW.lastname, '"')), ', display_name = ', IF(NEW.display_name IS NULL, 'NULL', CONCAT('"', NEW.display_name, '"')), ', mobile_no = ', IF(NEW.mobile_no IS NULL, 'NULL', CONCAT('"', NEW.mobile_no, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', organisational_role_enum = ', IF(NEW.organisational_role_enum IS NULL, 'NULL', CONCAT('"', NEW.organisational_role_enum, '"')), ', organisational_role_parent_staff_id = ', IF(NEW.organisational_role_parent_staff_id IS NULL, 'NULL', CONCAT('"', NEW.organisational_role_parent_staff_id, '"')), ', is_active = ', IF(NEW.is_active IS NULL, 'NULL', CONCAT('"', NEW.is_active, '"')), ', joining_date = ', IF(NEW.joining_date IS NULL, 'NULL', CONCAT('"', NEW.joining_date, '"')), ', image_id = ', IF(NEW.image_id IS NULL, 'NULL', CONCAT('"', NEW.image_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_staff', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_loan_officer', OLD.is_loan_officer, NEW.is_loan_officer);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'firstname', OLD.firstname, NEW.firstname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastname', OLD.lastname, NEW.lastname);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'display_name', OLD.display_name, NEW.display_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_enum', OLD.organisational_role_enum, NEW.organisational_role_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'organisational_role_parent_staff_id', OLD.organisational_role_parent_staff_id, NEW.organisational_role_parent_staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_active', OLD.is_active, NEW.is_active);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'joining_date', OLD.joining_date, NEW.joining_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'image_id', OLD.image_id, NEW.image_id);
  END%%


DROP TRIGGER IF EXISTS m_staff_assignment_history_d%%
CREATE TRIGGER `m_staff_assignment_history_d`
BEFORE DELETE
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_staff_assignment_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_staff_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'centre_id', OLD.centre_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_staff_assignment_history_i%%
CREATE TRIGGER `m_staff_assignment_history_i`
AFTER INSERT
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_staff_assignment_history(id, centre_id, staff_id, start_date, end_date, createdby_id, created_date, lastmodified_date, lastmodifiedby_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.centre_id IS NULL, 'NULL, ', CONCAT('"', NEW.centre_id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodified_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_staff_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'centre_id', NEW.centre_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_staff_assignment_history_u%%
CREATE TRIGGER `m_staff_assignment_history_u`
AFTER UPDATE
  ON m_staff_assignment_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_staff_assignment_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', centre_id = ', IF(NEW.centre_id IS NULL, 'NULL', CONCAT('"', NEW.centre_id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_staff_assignment_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'centre_id', OLD.centre_id, NEW.centre_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
  END%%


DROP TRIGGER IF EXISTS m_survey_components_d%%
CREATE TRIGGER `m_survey_components_d`
BEFORE DELETE
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_survey_components WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_survey_components', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_components_i%%
CREATE TRIGGER `m_survey_components_i`
AFTER INSERT
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_survey_components(id, survey_id, a_key, a_text, description, sequence_no) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.survey_id IS NULL, 'NULL, ', CONCAT('"', NEW.survey_id, '", ')), IF(NEW.a_key IS NULL, 'NULL, ', CONCAT('"', NEW.a_key, '", ')), IF(NEW.a_text IS NULL, 'NULL, ', CONCAT('"', NEW.a_text, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_survey_components', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_components_u%%
CREATE TRIGGER `m_survey_components_u`
AFTER UPDATE
  ON m_survey_components
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_survey_components SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', survey_id = ', IF(NEW.survey_id IS NULL, 'NULL', CONCAT('"', NEW.survey_id, '"')), ', a_key = ', IF(NEW.a_key IS NULL, 'NULL', CONCAT('"', NEW.a_key, '"')), ', a_text = ', IF(NEW.a_text IS NULL, 'NULL', CONCAT('"', NEW.a_text, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', sequence_no = ', IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_survey_components', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END%%


DROP TRIGGER IF EXISTS m_survey_lookup_tables_d%%
CREATE TRIGGER `m_survey_lookup_tables_d`
BEFORE DELETE
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_survey_lookup_tables WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_survey_lookup_tables', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_from', OLD.value_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_to', OLD.value_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score', OLD.score, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_lookup_tables_i%%
CREATE TRIGGER `m_survey_lookup_tables_i`
AFTER INSERT
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_survey_lookup_tables(id, survey_id, a_key, description, value_from, value_to, score) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.survey_id IS NULL, 'NULL, ', CONCAT('"', NEW.survey_id, '", ')), IF(NEW.a_key IS NULL, 'NULL, ', CONCAT('"', NEW.a_key, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.value_from IS NULL, 'NULL, ', CONCAT('"', NEW.value_from, '", ')), IF(NEW.value_to IS NULL, 'NULL, ', CONCAT('"', NEW.value_to, '", ')), IF(NEW.score IS NULL, 'NULL', CONCAT('"', NEW.score, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_survey_lookup_tables', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_from', NEW.value_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'value_to', NEW.value_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score', NEW.score, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_lookup_tables_u%%
CREATE TRIGGER `m_survey_lookup_tables_u`
AFTER UPDATE
  ON m_survey_lookup_tables
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_survey_lookup_tables SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', survey_id = ', IF(NEW.survey_id IS NULL, 'NULL', CONCAT('"', NEW.survey_id, '"')), ', a_key = ', IF(NEW.a_key IS NULL, 'NULL', CONCAT('"', NEW.a_key, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', value_from = ', IF(NEW.value_from IS NULL, 'NULL', CONCAT('"', NEW.value_from, '"')), ', value_to = ', IF(NEW.value_to IS NULL, 'NULL', CONCAT('"', NEW.value_to, '"')), ', score = ', IF(NEW.score IS NULL, 'NULL', CONCAT('"', NEW.score, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_survey_lookup_tables', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_from', OLD.value_from, NEW.value_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'value_to', OLD.value_to, NEW.value_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score', OLD.score, NEW.score);
  END%%


DROP TRIGGER IF EXISTS m_survey_questions_d%%
CREATE TRIGGER `m_survey_questions_d`
BEFORE DELETE
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_survey_questions WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_survey_questions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'component_key', OLD.component_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_questions_i%%
CREATE TRIGGER `m_survey_questions_i`
AFTER INSERT
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_survey_questions(id, survey_id, component_key, a_key, a_text, description, sequence_no) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.survey_id IS NULL, 'NULL, ', CONCAT('"', NEW.survey_id, '", ')), IF(NEW.component_key IS NULL, 'NULL, ', CONCAT('"', NEW.component_key, '", ')), IF(NEW.a_key IS NULL, 'NULL, ', CONCAT('"', NEW.a_key, '", ')), IF(NEW.a_text IS NULL, 'NULL, ', CONCAT('"', NEW.a_text, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_survey_questions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'component_key', NEW.component_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_questions_u%%
CREATE TRIGGER `m_survey_questions_u`
AFTER UPDATE
  ON m_survey_questions
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_survey_questions SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', survey_id = ', IF(NEW.survey_id IS NULL, 'NULL', CONCAT('"', NEW.survey_id, '"')), ', component_key = ', IF(NEW.component_key IS NULL, 'NULL', CONCAT('"', NEW.component_key, '"')), ', a_key = ', IF(NEW.a_key IS NULL, 'NULL', CONCAT('"', NEW.a_key, '"')), ', a_text = ', IF(NEW.a_text IS NULL, 'NULL', CONCAT('"', NEW.a_text, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', sequence_no = ', IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_survey_questions', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'component_key', OLD.component_key, NEW.component_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END%%


DROP TRIGGER IF EXISTS m_survey_responses_d%%
CREATE TRIGGER `m_survey_responses_d`
BEFORE DELETE
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_survey_responses WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_survey_responses', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_responses_i%%
CREATE TRIGGER `m_survey_responses_i`
AFTER INSERT
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_survey_responses(id, question_id, a_text, a_value, sequence_no) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.question_id IS NULL, 'NULL, ', CONCAT('"', NEW.question_id, '", ')), IF(NEW.a_text IS NULL, 'NULL, ', CONCAT('"', NEW.a_text, '", ')), IF(NEW.a_value IS NULL, 'NULL, ', CONCAT('"', NEW.a_value, '", ')), IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_survey_responses', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'question_id', NEW.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_text', NEW.a_text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_value', NEW.a_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sequence_no', NEW.sequence_no, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_responses_u%%
CREATE TRIGGER `m_survey_responses_u`
AFTER UPDATE
  ON m_survey_responses
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_survey_responses SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', question_id = ', IF(NEW.question_id IS NULL, 'NULL', CONCAT('"', NEW.question_id, '"')), ', a_text = ', IF(NEW.a_text IS NULL, 'NULL', CONCAT('"', NEW.a_text, '"')), ', a_value = ', IF(NEW.a_value IS NULL, 'NULL', CONCAT('"', NEW.a_value, '"')), ', sequence_no = ', IF(NEW.sequence_no IS NULL, 'NULL', CONCAT('"', NEW.sequence_no, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_survey_responses', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NEW.question_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_text', OLD.a_text, NEW.a_text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NEW.a_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sequence_no', OLD.sequence_no, NEW.sequence_no);
  END%%


DROP TRIGGER IF EXISTS m_survey_scorecards_d%%
CREATE TRIGGER `m_survey_scorecards_d`
BEFORE DELETE
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_survey_scorecards WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_survey_scorecards', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'response_id', OLD.response_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_scorecards_i%%
CREATE TRIGGER `m_survey_scorecards_i`
AFTER INSERT
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_survey_scorecards(id, survey_id, question_id, response_id, user_id, client_id, created_on, a_value) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.survey_id IS NULL, 'NULL, ', CONCAT('"', NEW.survey_id, '", ')), IF(NEW.question_id IS NULL, 'NULL, ', CONCAT('"', NEW.question_id, '", ')), IF(NEW.response_id IS NULL, 'NULL, ', CONCAT('"', NEW.response_id, '", ')), IF(NEW.user_id IS NULL, 'NULL, ', CONCAT('"', NEW.user_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.created_on IS NULL, 'NULL, ', CONCAT('"', NEW.created_on, '", ')), IF(NEW.a_value IS NULL, 'NULL', CONCAT('"', NEW.a_value, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_survey_scorecards', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'survey_id', NEW.survey_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'question_id', NEW.question_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'response_id', NEW.response_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_id', NEW.user_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_on', NEW.created_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_value', NEW.a_value, NULL);
  END%%
DROP TRIGGER IF EXISTS m_survey_scorecards_u%%
CREATE TRIGGER `m_survey_scorecards_u`
AFTER UPDATE
  ON m_survey_scorecards
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_survey_scorecards SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', survey_id = ', IF(NEW.survey_id IS NULL, 'NULL', CONCAT('"', NEW.survey_id, '"')), ', question_id = ', IF(NEW.question_id IS NULL, 'NULL', CONCAT('"', NEW.question_id, '"')), ', response_id = ', IF(NEW.response_id IS NULL, 'NULL', CONCAT('"', NEW.response_id, '"')), ', user_id = ', IF(NEW.user_id IS NULL, 'NULL', CONCAT('"', NEW.user_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', created_on = ', IF(NEW.created_on IS NULL, 'NULL', CONCAT('"', NEW.created_on, '"')), ', a_value = ', IF(NEW.a_value IS NULL, 'NULL', CONCAT('"', NEW.a_value, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_survey_scorecards', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'survey_id', OLD.survey_id, NEW.survey_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'question_id', OLD.question_id, NEW.question_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'response_id', OLD.response_id, NEW.response_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_id', OLD.user_id, NEW.user_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_on', OLD.created_on, NEW.created_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_value', OLD.a_value, NEW.a_value);
  END%%


DROP TRIGGER IF EXISTS m_surveys_d%%
CREATE TRIGGER `m_surveys_d`
BEFORE DELETE
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_surveys WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_surveys', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_name', OLD.a_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_code', OLD.country_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NULL);
  END%%
DROP TRIGGER IF EXISTS m_surveys_i%%
CREATE TRIGGER `m_surveys_i`
AFTER INSERT
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_surveys(id, a_key, a_name, description, country_code, valid_from, valid_to) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.a_key IS NULL, 'NULL, ', CONCAT('"', NEW.a_key, '", ')), IF(NEW.a_name IS NULL, 'NULL, ', CONCAT('"', NEW.a_name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.country_code IS NULL, 'NULL, ', CONCAT('"', NEW.country_code, '", ')), IF(NEW.valid_from IS NULL, 'NULL, ', CONCAT('"', NEW.valid_from, '", ')), IF(NEW.valid_to IS NULL, 'NULL', CONCAT('"', NEW.valid_to, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_surveys', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_key', NEW.a_key, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'a_name', NEW.a_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'country_code', NEW.country_code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_to', NEW.valid_to, NULL);
  END%%
DROP TRIGGER IF EXISTS m_surveys_u%%
CREATE TRIGGER `m_surveys_u`
AFTER UPDATE
  ON m_surveys
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_surveys SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', a_key = ', IF(NEW.a_key IS NULL, 'NULL', CONCAT('"', NEW.a_key, '"')), ', a_name = ', IF(NEW.a_name IS NULL, 'NULL', CONCAT('"', NEW.a_name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', country_code = ', IF(NEW.country_code IS NULL, 'NULL', CONCAT('"', NEW.country_code, '"')), ', valid_from = ', IF(NEW.valid_from IS NULL, 'NULL', CONCAT('"', NEW.valid_from, '"')), ', valid_to = ', IF(NEW.valid_to IS NULL, 'NULL', CONCAT('"', NEW.valid_to, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_surveys', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_key', OLD.a_key, NEW.a_key);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'a_name', OLD.a_name, NEW.a_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'country_code', OLD.country_code, NEW.country_code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NEW.valid_to);
  END%%


DROP TRIGGER IF EXISTS m_tax_component_d%%
CREATE TRIGGER `m_tax_component_d`
BEFORE DELETE
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_tax_component WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_tax_component', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_type_enum', OLD.debit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_type_enum', OLD.credit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_component_i%%
CREATE TRIGGER `m_tax_component_i`
AFTER INSERT
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_tax_component(id, name, percentage, debit_account_type_enum, debit_account_id, credit_account_type_enum, credit_account_id, start_date, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.percentage IS NULL, 'NULL, ', CONCAT('"', NEW.percentage, '", ')), IF(NEW.debit_account_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.debit_account_type_enum, '", ')), IF(NEW.debit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.debit_account_id, '", ')), IF(NEW.credit_account_type_enum IS NULL, 'NULL, ', CONCAT('"', NEW.credit_account_type_enum, '", ')), IF(NEW.credit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.credit_account_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_tax_component', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'percentage', NEW.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_type_enum', NEW.debit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_type_enum', NEW.credit_account_type_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_component_u%%
CREATE TRIGGER `m_tax_component_u`
AFTER UPDATE
  ON m_tax_component
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_tax_component SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', percentage = ', IF(NEW.percentage IS NULL, 'NULL', CONCAT('"', NEW.percentage, '"')), ', debit_account_type_enum = ', IF(NEW.debit_account_type_enum IS NULL, 'NULL', CONCAT('"', NEW.debit_account_type_enum, '"')), ', debit_account_id = ', IF(NEW.debit_account_id IS NULL, 'NULL', CONCAT('"', NEW.debit_account_id, '"')), ', credit_account_type_enum = ', IF(NEW.credit_account_type_enum IS NULL, 'NULL', CONCAT('"', NEW.credit_account_type_enum, '"')), ', credit_account_id = ', IF(NEW.credit_account_id IS NULL, 'NULL', CONCAT('"', NEW.credit_account_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_tax_component', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NEW.percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_type_enum', OLD.debit_account_type_enum, NEW.debit_account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_type_enum', OLD.credit_account_type_enum, NEW.credit_account_type_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_tax_component_history_d%%
CREATE TRIGGER `m_tax_component_history_d`
BEFORE DELETE
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_tax_component_history WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_tax_component_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_component_history_i%%
CREATE TRIGGER `m_tax_component_history_i`
AFTER INSERT
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_tax_component_history(id, tax_component_id, percentage, start_date, end_date, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.tax_component_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_component_id, '", ')), IF(NEW.percentage IS NULL, 'NULL, ', CONCAT('"', NEW.percentage, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_tax_component_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'percentage', NEW.percentage, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_component_history_u%%
CREATE TRIGGER `m_tax_component_history_u`
AFTER UPDATE
  ON m_tax_component_history
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_tax_component_history SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', tax_component_id = ', IF(NEW.tax_component_id IS NULL, 'NULL', CONCAT('"', NEW.tax_component_id, '"')), ', percentage = ', IF(NEW.percentage IS NULL, 'NULL', CONCAT('"', NEW.percentage, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_tax_component_history', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'percentage', OLD.percentage, NEW.percentage);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_tax_group_d%%
CREATE TRIGGER `m_tax_group_d`
BEFORE DELETE
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_tax_group WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_tax_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_group_i%%
CREATE TRIGGER `m_tax_group_i`
AFTER INSERT
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_tax_group(id, name, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_tax_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_group_u%%
CREATE TRIGGER `m_tax_group_u`
AFTER UPDATE
  ON m_tax_group
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_tax_group SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_tax_group', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_tax_group_mappings_d%%
CREATE TRIGGER `m_tax_group_mappings_d`
BEFORE DELETE
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_tax_group_mappings WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_tax_group_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_group_mappings_i%%
CREATE TRIGGER `m_tax_group_mappings_i`
AFTER INSERT
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_tax_group_mappings(id, tax_group_id, tax_component_id, start_date, end_date, createdby_id, created_date, lastmodifiedby_id, lastmodified_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.tax_group_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_group_id, '", ')), IF(NEW.tax_component_id IS NULL, 'NULL, ', CONCAT('"', NEW.tax_component_id, '", ')), IF(NEW.start_date IS NULL, 'NULL, ', CONCAT('"', NEW.start_date, '", ')), IF(NEW.end_date IS NULL, 'NULL, ', CONCAT('"', NEW.end_date, '", ')), IF(NEW.createdby_id IS NULL, 'NULL, ', CONCAT('"', NEW.createdby_id, '", ')), IF(NEW.created_date IS NULL, 'NULL, ', CONCAT('"', NEW.created_date, '", ')), IF(NEW.lastmodifiedby_id IS NULL, 'NULL, ', CONCAT('"', NEW.lastmodifiedby_id, '", ')), IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_tax_group_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_group_id', NEW.tax_group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'tax_component_id', NEW.tax_component_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'start_date', NEW.start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'end_date', NEW.end_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'createdby_id', NEW.createdby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'created_date', NEW.created_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodifiedby_id', NEW.lastmodifiedby_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'lastmodified_date', NEW.lastmodified_date, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tax_group_mappings_u%%
CREATE TRIGGER `m_tax_group_mappings_u`
AFTER UPDATE
  ON m_tax_group_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_tax_group_mappings SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', tax_group_id = ', IF(NEW.tax_group_id IS NULL, 'NULL', CONCAT('"', NEW.tax_group_id, '"')), ', tax_component_id = ', IF(NEW.tax_component_id IS NULL, 'NULL', CONCAT('"', NEW.tax_component_id, '"')), ', start_date = ', IF(NEW.start_date IS NULL, 'NULL', CONCAT('"', NEW.start_date, '"')), ', end_date = ', IF(NEW.end_date IS NULL, 'NULL', CONCAT('"', NEW.end_date, '"')), ', createdby_id = ', IF(NEW.createdby_id IS NULL, 'NULL', CONCAT('"', NEW.createdby_id, '"')), ', created_date = ', IF(NEW.created_date IS NULL, 'NULL', CONCAT('"', NEW.created_date, '"')), ', lastmodifiedby_id = ', IF(NEW.lastmodifiedby_id IS NULL, 'NULL', CONCAT('"', NEW.lastmodifiedby_id, '"')), ', lastmodified_date = ', IF(NEW.lastmodified_date IS NULL, 'NULL', CONCAT('"', NEW.lastmodified_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_tax_group_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_group_id', OLD.tax_group_id, NEW.tax_group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'tax_component_id', OLD.tax_component_id, NEW.tax_component_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'start_date', OLD.start_date, NEW.start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'end_date', OLD.end_date, NEW.end_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'createdby_id', OLD.createdby_id, NEW.createdby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'created_date', OLD.created_date, NEW.created_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodifiedby_id', OLD.lastmodifiedby_id, NEW.lastmodifiedby_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'lastmodified_date', OLD.lastmodified_date, NEW.lastmodified_date);
  END%%


DROP TRIGGER IF EXISTS m_tellers_d%%
CREATE TRIGGER `m_tellers_d`
BEFORE DELETE
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_tellers WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_tellers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tellers_i%%
CREATE TRIGGER `m_tellers_i`
AFTER INSERT
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_tellers(id, office_id, debit_account_id, credit_account_id, name, description, valid_from, valid_to, state) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.office_id IS NULL, 'NULL, ', CONCAT('"', NEW.office_id, '", ')), IF(NEW.debit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.debit_account_id, '", ')), IF(NEW.credit_account_id IS NULL, 'NULL, ', CONCAT('"', NEW.credit_account_id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.valid_from IS NULL, 'NULL, ', CONCAT('"', NEW.valid_from, '", ')), IF(NEW.valid_to IS NULL, 'NULL, ', CONCAT('"', NEW.valid_to, '", ')), IF(NEW.state IS NULL, 'NULL', CONCAT('"', NEW.state, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_tellers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'office_id', NEW.office_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'debit_account_id', NEW.debit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'credit_account_id', NEW.credit_account_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_from', NEW.valid_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'valid_to', NEW.valid_to, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'state', NEW.state, NULL);
  END%%
DROP TRIGGER IF EXISTS m_tellers_u%%
CREATE TRIGGER `m_tellers_u`
AFTER UPDATE
  ON m_tellers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_tellers SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', office_id = ', IF(NEW.office_id IS NULL, 'NULL', CONCAT('"', NEW.office_id, '"')), ', debit_account_id = ', IF(NEW.debit_account_id IS NULL, 'NULL', CONCAT('"', NEW.debit_account_id, '"')), ', credit_account_id = ', IF(NEW.credit_account_id IS NULL, 'NULL', CONCAT('"', NEW.credit_account_id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', valid_from = ', IF(NEW.valid_from IS NULL, 'NULL', CONCAT('"', NEW.valid_from, '"')), ', valid_to = ', IF(NEW.valid_to IS NULL, 'NULL', CONCAT('"', NEW.valid_to, '"')), ', state = ', IF(NEW.state IS NULL, 'NULL', CONCAT('"', NEW.state, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_tellers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'office_id', OLD.office_id, NEW.office_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'debit_account_id', OLD.debit_account_id, NEW.debit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'credit_account_id', OLD.credit_account_id, NEW.credit_account_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_from', OLD.valid_from, NEW.valid_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'valid_to', OLD.valid_to, NEW.valid_to);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'state', OLD.state, NEW.state);
  END%%


DROP TRIGGER IF EXISTS m_template_d%%
CREATE TRIGGER `m_template_d`
BEFORE DELETE
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_template WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_template', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'text', OLD.text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_template_i%%
CREATE TRIGGER `m_template_i`
AFTER INSERT
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_template(id, name, text, entity, type) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.text IS NULL, 'NULL, ', CONCAT('"', NEW.text, '", ')), IF(NEW.entity IS NULL, 'NULL, ', CONCAT('"', NEW.entity, '", ')), IF(NEW.type IS NULL, 'NULL', CONCAT('"', NEW.type, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_template', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'text', NEW.text, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'entity', NEW.entity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
  END%%
DROP TRIGGER IF EXISTS m_template_u%%
CREATE TRIGGER `m_template_u`
AFTER UPDATE
  ON m_template
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_template SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', text = ', IF(NEW.text IS NULL, 'NULL', CONCAT('"', NEW.text, '"')), ', entity = ', IF(NEW.entity IS NULL, 'NULL', CONCAT('"', NEW.entity, '"')), ', type = ', IF(NEW.type IS NULL, 'NULL', CONCAT('"', NEW.type, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_template', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'text', OLD.text, NEW.text);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'entity', OLD.entity, NEW.entity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
  END%%


DROP TRIGGER IF EXISTS m_template_m_templatemappers_d%%
CREATE TRIGGER `m_template_m_templatemappers_d`
BEFORE DELETE
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_template_m_templatemappers WHERE m_template_id = "', OLD.m_template_id, '"', ' AND mappers_id = "', OLD.mappers_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_template_m_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'm_template_id', OLD.m_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappers_id', OLD.mappers_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_template_m_templatemappers_i%%
CREATE TRIGGER `m_template_m_templatemappers_i`
AFTER INSERT
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_template_m_templatemappers(m_template_id, mappers_id) VALUES(', IF(NEW.m_template_id IS NULL, 'NULL, ', CONCAT('"', NEW.m_template_id, '", ')), IF(NEW.mappers_id IS NULL, 'NULL', CONCAT('"', NEW.mappers_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_template_m_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'm_template_id', NEW.m_template_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mappers_id', NEW.mappers_id, NULL);
  END%%
DROP TRIGGER IF EXISTS m_template_m_templatemappers_u%%
CREATE TRIGGER `m_template_m_templatemappers_u`
AFTER UPDATE
  ON m_template_m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_template_m_templatemappers SET m_template_id = ', IF(NEW.m_template_id IS NULL, 'NULL', CONCAT('"', NEW.m_template_id, '"')), ', mappers_id = ', IF(NEW.mappers_id IS NULL, 'NULL', CONCAT('"', NEW.mappers_id, '"')), ' WHERE m_template_id = "', NEW.m_template_id, '"', ' AND mappers_id = "', OLD.mappers_id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_template_m_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'm_template_id', OLD.m_template_id, NEW.m_template_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappers_id', OLD.mappers_id, NEW.mappers_id);
  END%%


DROP TRIGGER IF EXISTS m_templatemappers_d%%
CREATE TRIGGER `m_templatemappers_d`
BEFORE DELETE
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_templatemappers WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperkey', OLD.mapperkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperorder', OLD.mapperorder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappervalue', OLD.mappervalue, NULL);
  END%%
DROP TRIGGER IF EXISTS m_templatemappers_i%%
CREATE TRIGGER `m_templatemappers_i`
AFTER INSERT
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_templatemappers(id, mapperkey, mapperorder, mappervalue) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.mapperkey IS NULL, 'NULL, ', CONCAT('"', NEW.mapperkey, '", ')), IF(NEW.mapperorder IS NULL, 'NULL, ', CONCAT('"', NEW.mapperorder, '", ')), IF(NEW.mappervalue IS NULL, 'NULL', CONCAT('"', NEW.mappervalue, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mapperkey', NEW.mapperkey, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mapperorder', NEW.mapperorder, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mappervalue', NEW.mappervalue, NULL);
  END%%
DROP TRIGGER IF EXISTS m_templatemappers_u%%
CREATE TRIGGER `m_templatemappers_u`
AFTER UPDATE
  ON m_templatemappers
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_templatemappers SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', mapperkey = ', IF(NEW.mapperkey IS NULL, 'NULL', CONCAT('"', NEW.mapperkey, '"')), ', mapperorder = ', IF(NEW.mapperorder IS NULL, 'NULL', CONCAT('"', NEW.mapperorder, '"')), ', mappervalue = ', IF(NEW.mappervalue IS NULL, 'NULL', CONCAT('"', NEW.mappervalue, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_templatemappers', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperkey', OLD.mapperkey, NEW.mapperkey);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mapperorder', OLD.mapperorder, NEW.mapperorder);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mappervalue', OLD.mappervalue, NEW.mappervalue);
  END%%


DROP TRIGGER IF EXISTS m_working_days_d%%
CREATE TRIGGER `m_working_days_d`
BEFORE DELETE
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM m_working_days WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'm_working_days', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', OLD.repayment_rescheduling_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', OLD.extend_term_daily_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', OLD.extend_term_holiday_repayment, NULL);
  END%%
DROP TRIGGER IF EXISTS m_working_days_i%%
CREATE TRIGGER `m_working_days_i`
AFTER INSERT
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO m_working_days(id, recurrence, repayment_rescheduling_enum, extend_term_daily_repayments, extend_term_holiday_repayment) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.recurrence IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence, '", ')), IF(NEW.repayment_rescheduling_enum IS NULL, 'NULL, ', CONCAT('"', NEW.repayment_rescheduling_enum, '", ')), IF(NEW.extend_term_daily_repayments IS NULL, 'NULL, ', CONCAT('"', NEW.extend_term_daily_repayments, '", ')), IF(NEW.extend_term_holiday_repayment IS NULL, 'NULL', CONCAT('"', NEW.extend_term_holiday_repayment, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'm_working_days', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', NEW.repayment_rescheduling_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', NEW.extend_term_daily_repayments, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', NEW.extend_term_holiday_repayment, NULL);
  END%%
DROP TRIGGER IF EXISTS m_working_days_u%%
CREATE TRIGGER `m_working_days_u`
AFTER UPDATE
  ON m_working_days
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE m_working_days SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', recurrence = ', IF(NEW.recurrence IS NULL, 'NULL', CONCAT('"', NEW.recurrence, '"')), ', repayment_rescheduling_enum = ', IF(NEW.repayment_rescheduling_enum IS NULL, 'NULL', CONCAT('"', NEW.repayment_rescheduling_enum, '"')), ', extend_term_daily_repayments = ', IF(NEW.extend_term_daily_repayments IS NULL, 'NULL', CONCAT('"', NEW.extend_term_daily_repayments, '"')), ', extend_term_holiday_repayment = ', IF(NEW.extend_term_holiday_repayment IS NULL, 'NULL', CONCAT('"', NEW.extend_term_holiday_repayment, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'm_working_days', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'repayment_rescheduling_enum', OLD.repayment_rescheduling_enum, NEW.repayment_rescheduling_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_daily_repayments', OLD.extend_term_daily_repayments, NEW.extend_term_daily_repayments);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'extend_term_holiday_repayment', OLD.extend_term_holiday_repayment, NEW.extend_term_holiday_repayment);
  END%%


DROP TRIGGER IF EXISTS mix_taxonomy_d%%
CREATE TRIGGER `mix_taxonomy_d`
BEFORE DELETE
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM mix_taxonomy WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'mix_taxonomy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'namespace_id', OLD.namespace_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dimension', OLD.dimension, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'need_mapping', OLD.need_mapping, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_taxonomy_i%%
CREATE TRIGGER `mix_taxonomy_i`
AFTER INSERT
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO mix_taxonomy(id, name, namespace_id, dimension, type, description, need_mapping) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.namespace_id IS NULL, 'NULL, ', CONCAT('"', NEW.namespace_id, '", ')), IF(NEW.dimension IS NULL, 'NULL, ', CONCAT('"', NEW.dimension, '", ')), IF(NEW.type IS NULL, 'NULL, ', CONCAT('"', NEW.type, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.need_mapping IS NULL, 'NULL', CONCAT('"', NEW.need_mapping, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'mix_taxonomy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'namespace_id', NEW.namespace_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'dimension', NEW.dimension, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'need_mapping', NEW.need_mapping, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_taxonomy_u%%
CREATE TRIGGER `mix_taxonomy_u`
AFTER UPDATE
  ON mix_taxonomy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE mix_taxonomy SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', namespace_id = ', IF(NEW.namespace_id IS NULL, 'NULL', CONCAT('"', NEW.namespace_id, '"')), ', dimension = ', IF(NEW.dimension IS NULL, 'NULL', CONCAT('"', NEW.dimension, '"')), ', type = ', IF(NEW.type IS NULL, 'NULL', CONCAT('"', NEW.type, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', need_mapping = ', IF(NEW.need_mapping IS NULL, 'NULL', CONCAT('"', NEW.need_mapping, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'mix_taxonomy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'namespace_id', OLD.namespace_id, NEW.namespace_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'dimension', OLD.dimension, NEW.dimension);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'need_mapping', OLD.need_mapping, NEW.need_mapping);
  END%%


DROP TRIGGER IF EXISTS mix_taxonomy_mapping_d%%
CREATE TRIGGER `mix_taxonomy_mapping_d`
BEFORE DELETE
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM mix_taxonomy_mapping WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'mix_taxonomy_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'identifier', OLD.identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'config', OLD.config, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_update_date', OLD.last_update_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency', OLD.currency, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_taxonomy_mapping_i%%
CREATE TRIGGER `mix_taxonomy_mapping_i`
AFTER INSERT
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO mix_taxonomy_mapping(id, identifier, config, last_update_date, currency) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.identifier IS NULL, 'NULL, ', CONCAT('"', NEW.identifier, '", ')), IF(NEW.config IS NULL, 'NULL, ', CONCAT('"', NEW.config, '", ')), IF(NEW.last_update_date IS NULL, 'NULL, ', CONCAT('"', NEW.last_update_date, '", ')), IF(NEW.currency IS NULL, 'NULL', CONCAT('"', NEW.currency, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'mix_taxonomy_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'identifier', NEW.identifier, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'config', NEW.config, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_update_date', NEW.last_update_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'currency', NEW.currency, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_taxonomy_mapping_u%%
CREATE TRIGGER `mix_taxonomy_mapping_u`
AFTER UPDATE
  ON mix_taxonomy_mapping
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE mix_taxonomy_mapping SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', identifier = ', IF(NEW.identifier IS NULL, 'NULL', CONCAT('"', NEW.identifier, '"')), ', config = ', IF(NEW.config IS NULL, 'NULL', CONCAT('"', NEW.config, '"')), ', last_update_date = ', IF(NEW.last_update_date IS NULL, 'NULL', CONCAT('"', NEW.last_update_date, '"')), ', currency = ', IF(NEW.currency IS NULL, 'NULL', CONCAT('"', NEW.currency, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'mix_taxonomy_mapping', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'identifier', OLD.identifier, NEW.identifier);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'config', OLD.config, NEW.config);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_update_date', OLD.last_update_date, NEW.last_update_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'currency', OLD.currency, NEW.currency);
  END%%


DROP TRIGGER IF EXISTS mix_xbrl_namespace_d%%
CREATE TRIGGER `mix_xbrl_namespace_d`
BEFORE DELETE
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM mix_xbrl_namespace WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'mix_xbrl_namespace', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix', OLD.prefix, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'url', OLD.url, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_xbrl_namespace_i%%
CREATE TRIGGER `mix_xbrl_namespace_i`
AFTER INSERT
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO mix_xbrl_namespace(id, prefix, url) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.prefix IS NULL, 'NULL, ', CONCAT('"', NEW.prefix, '", ')), IF(NEW.url IS NULL, 'NULL', CONCAT('"', NEW.url, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'mix_xbrl_namespace', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'prefix', NEW.prefix, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'url', NEW.url, NULL);
  END%%
DROP TRIGGER IF EXISTS mix_xbrl_namespace_u%%
CREATE TRIGGER `mix_xbrl_namespace_u`
AFTER UPDATE
  ON mix_xbrl_namespace
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE mix_xbrl_namespace SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', prefix = ', IF(NEW.prefix IS NULL, 'NULL', CONCAT('"', NEW.prefix, '"')), ', url = ', IF(NEW.url IS NULL, 'NULL', CONCAT('"', NEW.url, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'mix_xbrl_namespace', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'prefix', OLD.prefix, NEW.prefix);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'url', OLD.url, NEW.url);
  END%%


DROP TRIGGER IF EXISTS oauth_access_token_d%%
CREATE TRIGGER `oauth_access_token_d`
BEFORE DELETE
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'oauth_access_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_id', OLD.authentication_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_name', OLD.user_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token', OLD.refresh_token, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_access_token_i%%
CREATE TRIGGER `oauth_access_token_i`
AFTER INSERT
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'oauth_access_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token_id', NEW.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token', NEW.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication_id', NEW.authentication_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'user_name', NEW.user_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication', NEW.authentication, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'refresh_token', NEW.refresh_token, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_access_token_u%%
CREATE TRIGGER `oauth_access_token_u`
AFTER UPDATE
  ON oauth_access_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'oauth_access_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NEW.token_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NEW.token);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication_id', OLD.authentication_id, NEW.authentication_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'user_name', OLD.user_name, NEW.user_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NEW.authentication);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token', OLD.refresh_token, NEW.refresh_token);
  END%%


DROP TRIGGER IF EXISTS oauth_client_details_d%%
CREATE TRIGGER `oauth_client_details_d`
BEFORE DELETE
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'oauth_client_details', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_ids', OLD.resource_ids, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_secret', OLD.client_secret, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scope', OLD.scope, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorized_grant_types', OLD.authorized_grant_types, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'web_server_redirect_uri', OLD.web_server_redirect_uri, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorities', OLD.authorities, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_token_validity', OLD.access_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token_validity', OLD.refresh_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'additional_information', OLD.additional_information, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'autoapprove', OLD.autoapprove, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_client_details_i%%
CREATE TRIGGER `oauth_client_details_i`
AFTER INSERT
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'oauth_client_details', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'resource_ids', NEW.resource_ids, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_secret', NEW.client_secret, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'scope', NEW.scope, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authorized_grant_types', NEW.authorized_grant_types, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'web_server_redirect_uri', NEW.web_server_redirect_uri, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authorities', NEW.authorities, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'access_token_validity', NEW.access_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'refresh_token_validity', NEW.refresh_token_validity, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'additional_information', NEW.additional_information, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'autoapprove', NEW.autoapprove, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_client_details_u%%
CREATE TRIGGER `oauth_client_details_u`
AFTER UPDATE
  ON oauth_client_details
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'oauth_client_details', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'resource_ids', OLD.resource_ids, NEW.resource_ids);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_secret', OLD.client_secret, NEW.client_secret);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'scope', OLD.scope, NEW.scope);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorized_grant_types', OLD.authorized_grant_types, NEW.authorized_grant_types);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'web_server_redirect_uri', OLD.web_server_redirect_uri, NEW.web_server_redirect_uri);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authorities', OLD.authorities, NEW.authorities);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'access_token_validity', OLD.access_token_validity, NEW.access_token_validity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'refresh_token_validity', OLD.refresh_token_validity, NEW.refresh_token_validity);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'additional_information', OLD.additional_information, NEW.additional_information);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'autoapprove', OLD.autoapprove, NEW.autoapprove);
  END%%


DROP TRIGGER IF EXISTS oauth_refresh_token_d%%
CREATE TRIGGER `oauth_refresh_token_d`
BEFORE DELETE
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'oauth_refresh_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_refresh_token_i%%
CREATE TRIGGER `oauth_refresh_token_i`
AFTER INSERT
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'oauth_refresh_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token_id', NEW.token_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'token', NEW.token, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'authentication', NEW.authentication, NULL);
  END%%
DROP TRIGGER IF EXISTS oauth_refresh_token_u%%
CREATE TRIGGER `oauth_refresh_token_u`
AFTER UPDATE
  ON oauth_refresh_token
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'oauth_refresh_token', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token_id', OLD.token_id, NEW.token_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'token', OLD.token, NEW.token);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'authentication', OLD.authentication, NEW.authentication);
  END%%


DROP TRIGGER IF EXISTS ppi_likelihoods_d%%
CREATE TRIGGER `ppi_likelihoods_d`
BEFORE DELETE
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM ppi_likelihoods WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'ppi_likelihoods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_likelihoods_i%%
CREATE TRIGGER `ppi_likelihoods_i`
AFTER INSERT
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO ppi_likelihoods(id, code, name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code IS NULL, 'NULL, ', CONCAT('"', NEW.code, '", ')), IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'ppi_likelihoods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_likelihoods_u%%
CREATE TRIGGER `ppi_likelihoods_u`
AFTER UPDATE
  ON ppi_likelihoods
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE ppi_likelihoods SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code = ', IF(NEW.code IS NULL, 'NULL', CONCAT('"', NEW.code, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'ppi_likelihoods', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
  END%%


DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_d%%
CREATE TRIGGER `ppi_likelihoods_ppi_d`
BEFORE DELETE
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM ppi_likelihoods_ppi WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'ppi_likelihoods_ppi', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'likelihood_id', OLD.likelihood_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ppi_name', OLD.ppi_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_i%%
CREATE TRIGGER `ppi_likelihoods_ppi_i`
AFTER INSERT
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO ppi_likelihoods_ppi(id, likelihood_id, ppi_name, enabled) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.likelihood_id IS NULL, 'NULL, ', CONCAT('"', NEW.likelihood_id, '", ')), IF(NEW.ppi_name IS NULL, 'NULL, ', CONCAT('"', NEW.ppi_name, '", ')), IF(NEW.enabled IS NULL, 'NULL', CONCAT('"', NEW.enabled, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'ppi_likelihoods_ppi', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'likelihood_id', NEW.likelihood_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'ppi_name', NEW.ppi_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enabled', NEW.enabled, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_likelihoods_ppi_u%%
CREATE TRIGGER `ppi_likelihoods_ppi_u`
AFTER UPDATE
  ON ppi_likelihoods_ppi
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE ppi_likelihoods_ppi SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', likelihood_id = ', IF(NEW.likelihood_id IS NULL, 'NULL', CONCAT('"', NEW.likelihood_id, '"')), ', ppi_name = ', IF(NEW.ppi_name IS NULL, 'NULL', CONCAT('"', NEW.ppi_name, '"')), ', enabled = ', IF(NEW.enabled IS NULL, 'NULL', CONCAT('"', NEW.enabled, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'ppi_likelihoods_ppi', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'likelihood_id', OLD.likelihood_id, NEW.likelihood_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'ppi_name', OLD.ppi_name, NEW.ppi_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enabled', OLD.enabled, NEW.enabled);
  END%%


DROP TRIGGER IF EXISTS ppi_scores_d%%
CREATE TRIGGER `ppi_scores_d`
BEFORE DELETE
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM ppi_scores WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'ppi_scores', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_from', OLD.score_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_to', OLD.score_to, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_scores_i%%
CREATE TRIGGER `ppi_scores_i`
AFTER INSERT
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO ppi_scores(id, score_from, score_to) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.score_from IS NULL, 'NULL, ', CONCAT('"', NEW.score_from, '", ')), IF(NEW.score_to IS NULL, 'NULL', CONCAT('"', NEW.score_to, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'ppi_scores', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score_from', NEW.score_from, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'score_to', NEW.score_to, NULL);
  END%%
DROP TRIGGER IF EXISTS ppi_scores_u%%
CREATE TRIGGER `ppi_scores_u`
AFTER UPDATE
  ON ppi_scores
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE ppi_scores SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', score_from = ', IF(NEW.score_from IS NULL, 'NULL', CONCAT('"', NEW.score_from, '"')), ', score_to = ', IF(NEW.score_to IS NULL, 'NULL', CONCAT('"', NEW.score_to, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'ppi_scores', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_from', OLD.score_from, NEW.score_from);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'score_to', OLD.score_to, NEW.score_to);
  END%%


DROP TRIGGER IF EXISTS r_enum_value_d%%
CREATE TRIGGER `r_enum_value_d`
BEFORE DELETE
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'r_enum_value', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_name', OLD.enum_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_id', OLD.enum_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_message_property', OLD.enum_message_property, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_value', OLD.enum_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_type', OLD.enum_type, NULL);
  END%%
DROP TRIGGER IF EXISTS r_enum_value_i%%
CREATE TRIGGER `r_enum_value_i`
AFTER INSERT
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'r_enum_value', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_name', NEW.enum_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_id', NEW.enum_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_message_property', NEW.enum_message_property, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_value', NEW.enum_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'enum_type', NEW.enum_type, NULL);
  END%%
DROP TRIGGER IF EXISTS r_enum_value_u%%
CREATE TRIGGER `r_enum_value_u`
AFTER UPDATE
  ON r_enum_value
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'r_enum_value', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_name', OLD.enum_name, NEW.enum_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_id', OLD.enum_id, NEW.enum_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_message_property', OLD.enum_message_property, NEW.enum_message_property);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_value', OLD.enum_value, NEW.enum_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'enum_type', OLD.enum_type, NEW.enum_type);
  END%%


DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_d%%
CREATE TRIGGER `ref_loan_transaction_processing_strategy_d`
BEFORE DELETE
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM ref_loan_transaction_processing_strategy WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'ref_loan_transaction_processing_strategy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sort_order', OLD.sort_order, NULL);
  END%%
DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_i%%
CREATE TRIGGER `ref_loan_transaction_processing_strategy_i`
AFTER INSERT
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO ref_loan_transaction_processing_strategy(id, code, name, sort_order) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.code IS NULL, 'NULL, ', CONCAT('"', NEW.code, '", ')), IF(NEW.name IS NULL, 'NULL, ', CONCAT('"', NEW.name, '", ')), IF(NEW.sort_order IS NULL, 'NULL', CONCAT('"', NEW.sort_order, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'ref_loan_transaction_processing_strategy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code', NEW.code, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'name', NEW.name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'sort_order', NEW.sort_order, NULL);
  END%%
DROP TRIGGER IF EXISTS ref_loan_transaction_processing_strategy_u%%
CREATE TRIGGER `ref_loan_transaction_processing_strategy_u`
AFTER UPDATE
  ON ref_loan_transaction_processing_strategy
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE ref_loan_transaction_processing_strategy SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', code = ', IF(NEW.code IS NULL, 'NULL', CONCAT('"', NEW.code, '"')), ', name = ', IF(NEW.name IS NULL, 'NULL', CONCAT('"', NEW.name, '"')), ', sort_order = ', IF(NEW.sort_order IS NULL, 'NULL', CONCAT('"', NEW.sort_order, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'ref_loan_transaction_processing_strategy', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code', OLD.code, NEW.code);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'name', OLD.name, NEW.name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'sort_order', OLD.sort_order, NEW.sort_order);
  END%%


DROP TRIGGER IF EXISTS rpt_sequence_d%%
CREATE TRIGGER `rpt_sequence_d`
BEFORE DELETE
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM rpt_sequence WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'rpt_sequence', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
  END%%
DROP TRIGGER IF EXISTS rpt_sequence_i%%
CREATE TRIGGER `rpt_sequence_i`
AFTER INSERT
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO rpt_sequence(id) VALUES(', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'rpt_sequence', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
  END%%
DROP TRIGGER IF EXISTS rpt_sequence_u%%
CREATE TRIGGER `rpt_sequence_u`
AFTER UPDATE
  ON rpt_sequence
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE rpt_sequence SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'rpt_sequence', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
  END%%


DROP TRIGGER IF EXISTS scheduler_detail_d%%
CREATE TRIGGER `scheduler_detail_d`
BEFORE DELETE
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM scheduler_detail WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'scheduler_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_suspended', OLD.is_suspended, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execute_misfired_jobs', OLD.execute_misfired_jobs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', OLD.reset_scheduler_on_bootup, NULL);
  END%%
DROP TRIGGER IF EXISTS scheduler_detail_i%%
CREATE TRIGGER `scheduler_detail_i`
AFTER INSERT
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO scheduler_detail(id, is_suspended, execute_misfired_jobs, reset_scheduler_on_bootup) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.is_suspended IS NULL, 'NULL, ', CONCAT('"', NEW.is_suspended, '", ')), IF(NEW.execute_misfired_jobs IS NULL, 'NULL, ', CONCAT('"', NEW.execute_misfired_jobs, '", ')), IF(NEW.reset_scheduler_on_bootup IS NULL, 'NULL', CONCAT('"', NEW.reset_scheduler_on_bootup, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'scheduler_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_suspended', NEW.is_suspended, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execute_misfired_jobs', NEW.execute_misfired_jobs, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', NEW.reset_scheduler_on_bootup, NULL);
  END%%
DROP TRIGGER IF EXISTS scheduler_detail_u%%
CREATE TRIGGER `scheduler_detail_u`
AFTER UPDATE
  ON scheduler_detail
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE scheduler_detail SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', is_suspended = ', IF(NEW.is_suspended IS NULL, 'NULL', CONCAT('"', NEW.is_suspended, '"')), ', execute_misfired_jobs = ', IF(NEW.execute_misfired_jobs IS NULL, 'NULL', CONCAT('"', NEW.execute_misfired_jobs, '"')), ', reset_scheduler_on_bootup = ', IF(NEW.reset_scheduler_on_bootup IS NULL, 'NULL', CONCAT('"', NEW.reset_scheduler_on_bootup, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'scheduler_detail', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_suspended', OLD.is_suspended, NEW.is_suspended);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execute_misfired_jobs', OLD.execute_misfired_jobs, NEW.execute_misfired_jobs);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'reset_scheduler_on_bootup', OLD.reset_scheduler_on_bootup, NEW.reset_scheduler_on_bootup);
  END%%


DROP TRIGGER IF EXISTS schema_version_d%%
CREATE TRIGGER `schema_version_d`
BEFORE DELETE
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'schema_version', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version_rank', OLD.version_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_rank', OLD.installed_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'script', OLD.script, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checksum', OLD.checksum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_by', OLD.installed_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_on', OLD.installed_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'success', OLD.success, NULL);
  END%%
DROP TRIGGER IF EXISTS schema_version_i%%
CREATE TRIGGER `schema_version_i`
AFTER INSERT
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'schema_version', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version_rank', NEW.version_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_rank', NEW.installed_rank, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'version', NEW.version, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'type', NEW.type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'script', NEW.script, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'checksum', NEW.checksum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_by', NEW.installed_by, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'installed_on', NEW.installed_on, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'execution_time', NEW.execution_time, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'success', NEW.success, NULL);
  END%%
DROP TRIGGER IF EXISTS schema_version_u%%
CREATE TRIGGER `schema_version_u`
AFTER UPDATE
  ON schema_version
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'schema_version', NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version_rank', OLD.version_rank, NEW.version_rank);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_rank', OLD.installed_rank, NEW.installed_rank);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'version', OLD.version, NEW.version);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'type', OLD.type, NEW.type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'script', OLD.script, NEW.script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'checksum', OLD.checksum, NEW.checksum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_by', OLD.installed_by, NEW.installed_by);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'installed_on', OLD.installed_on, NEW.installed_on);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'execution_time', OLD.execution_time, NEW.execution_time);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'success', OLD.success, NEW.success);
  END%%


DROP TRIGGER IF EXISTS sms_campaign_d%%
CREATE TRIGGER `sms_campaign_d`
BEFORE DELETE
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM sms_campaign WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'sms_campaign', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_name', OLD.campaign_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_type', OLD.campaign_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_trigger_type', OLD.campaign_trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provider_id', OLD.provider_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_value', OLD.param_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_trigger_date', OLD.next_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_trigger_date', OLD.last_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_start_date', OLD.recurrence_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_visible', OLD.is_visible, NULL);
  END%%
DROP TRIGGER IF EXISTS sms_campaign_i%%
CREATE TRIGGER `sms_campaign_i`
AFTER INSERT
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO sms_campaign(id, campaign_name, campaign_type, campaign_trigger_type, report_id, provider_id, param_value, status_enum, message, submittedon_date, submittedon_userid, approvedon_date, approvedon_userid, closedon_date, closedon_userid, recurrence, next_trigger_date, last_trigger_date, recurrence_start_date, is_visible) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.campaign_name IS NULL, 'NULL, ', CONCAT('"', NEW.campaign_name, '", ')), IF(NEW.campaign_type IS NULL, 'NULL, ', CONCAT('"', NEW.campaign_type, '", ')), IF(NEW.campaign_trigger_type IS NULL, 'NULL, ', CONCAT('"', NEW.campaign_trigger_type, '", ')), IF(NEW.report_id IS NULL, 'NULL, ', CONCAT('"', NEW.report_id, '", ')), IF(NEW.provider_id IS NULL, 'NULL, ', CONCAT('"', NEW.provider_id, '", ')), IF(NEW.param_value IS NULL, 'NULL, ', CONCAT('"', NEW.param_value, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.message IS NULL, 'NULL, ', CONCAT('"', NEW.message, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.submittedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_userid, '", ')), IF(NEW.approvedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_date, '", ')), IF(NEW.approvedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.approvedon_userid, '", ')), IF(NEW.closedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_date, '", ')), IF(NEW.closedon_userid IS NULL, 'NULL, ', CONCAT('"', NEW.closedon_userid, '", ')), IF(NEW.recurrence IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence, '", ')), IF(NEW.next_trigger_date IS NULL, 'NULL, ', CONCAT('"', NEW.next_trigger_date, '", ')), IF(NEW.last_trigger_date IS NULL, 'NULL, ', CONCAT('"', NEW.last_trigger_date, '", ')), IF(NEW.recurrence_start_date IS NULL, 'NULL, ', CONCAT('"', NEW.recurrence_start_date, '", ')), IF(NEW.is_visible IS NULL, 'NULL', CONCAT('"', NEW.is_visible, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'sms_campaign', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_name', NEW.campaign_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_type', NEW.campaign_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_trigger_type', NEW.campaign_trigger_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_id', NEW.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'provider_id', NEW.provider_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'param_value', NEW.param_value, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'message', NEW.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_userid', NEW.submittedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_date', NEW.approvedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'approvedon_userid', NEW.approvedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_date', NEW.closedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'closedon_userid', NEW.closedon_userid, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence', NEW.recurrence, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'next_trigger_date', NEW.next_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'last_trigger_date', NEW.last_trigger_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'recurrence_start_date', NEW.recurrence_start_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'is_visible', NEW.is_visible, NULL);
  END%%
DROP TRIGGER IF EXISTS sms_campaign_u%%
CREATE TRIGGER `sms_campaign_u`
AFTER UPDATE
  ON sms_campaign
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE sms_campaign SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', campaign_name = ', IF(NEW.campaign_name IS NULL, 'NULL', CONCAT('"', NEW.campaign_name, '"')), ', campaign_type = ', IF(NEW.campaign_type IS NULL, 'NULL', CONCAT('"', NEW.campaign_type, '"')), ', campaign_trigger_type = ', IF(NEW.campaign_trigger_type IS NULL, 'NULL', CONCAT('"', NEW.campaign_trigger_type, '"')), ', report_id = ', IF(NEW.report_id IS NULL, 'NULL', CONCAT('"', NEW.report_id, '"')), ', provider_id = ', IF(NEW.provider_id IS NULL, 'NULL', CONCAT('"', NEW.provider_id, '"')), ', param_value = ', IF(NEW.param_value IS NULL, 'NULL', CONCAT('"', NEW.param_value, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', message = ', IF(NEW.message IS NULL, 'NULL', CONCAT('"', NEW.message, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', submittedon_userid = ', IF(NEW.submittedon_userid IS NULL, 'NULL', CONCAT('"', NEW.submittedon_userid, '"')), ', approvedon_date = ', IF(NEW.approvedon_date IS NULL, 'NULL', CONCAT('"', NEW.approvedon_date, '"')), ', approvedon_userid = ', IF(NEW.approvedon_userid IS NULL, 'NULL', CONCAT('"', NEW.approvedon_userid, '"')), ', closedon_date = ', IF(NEW.closedon_date IS NULL, 'NULL', CONCAT('"', NEW.closedon_date, '"')), ', closedon_userid = ', IF(NEW.closedon_userid IS NULL, 'NULL', CONCAT('"', NEW.closedon_userid, '"')), ', recurrence = ', IF(NEW.recurrence IS NULL, 'NULL', CONCAT('"', NEW.recurrence, '"')), ', next_trigger_date = ', IF(NEW.next_trigger_date IS NULL, 'NULL', CONCAT('"', NEW.next_trigger_date, '"')), ', last_trigger_date = ', IF(NEW.last_trigger_date IS NULL, 'NULL', CONCAT('"', NEW.last_trigger_date, '"')), ', recurrence_start_date = ', IF(NEW.recurrence_start_date IS NULL, 'NULL', CONCAT('"', NEW.recurrence_start_date, '"')), ', is_visible = ', IF(NEW.is_visible IS NULL, 'NULL', CONCAT('"', NEW.is_visible, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'sms_campaign', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_name', OLD.campaign_name, NEW.campaign_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_type', OLD.campaign_type, NEW.campaign_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_trigger_type', OLD.campaign_trigger_type, NEW.campaign_trigger_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NEW.report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'provider_id', OLD.provider_id, NEW.provider_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'param_value', OLD.param_value, NEW.param_value);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NEW.message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_userid', OLD.submittedon_userid, NEW.submittedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_date', OLD.approvedon_date, NEW.approvedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'approvedon_userid', OLD.approvedon_userid, NEW.approvedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_date', OLD.closedon_date, NEW.closedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'closedon_userid', OLD.closedon_userid, NEW.closedon_userid);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence', OLD.recurrence, NEW.recurrence);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'next_trigger_date', OLD.next_trigger_date, NEW.next_trigger_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'last_trigger_date', OLD.last_trigger_date, NEW.last_trigger_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'recurrence_start_date', OLD.recurrence_start_date, NEW.recurrence_start_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'is_visible', OLD.is_visible, NEW.is_visible);
  END%%


DROP TRIGGER IF EXISTS sms_messages_outbound_d%%
CREATE TRIGGER `sms_messages_outbound_d`
BEFORE DELETE
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM sms_messages_outbound WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'sms_messages_outbound', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_id', OLD.campaign_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'delivered_on_date', OLD.delivered_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS sms_messages_outbound_i%%
CREATE TRIGGER `sms_messages_outbound_i`
AFTER INSERT
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO sms_messages_outbound(id, group_id, client_id, staff_id, status_enum, mobile_no, message, campaign_id, external_id, submittedon_date, delivered_on_date) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.group_id IS NULL, 'NULL, ', CONCAT('"', NEW.group_id, '", ')), IF(NEW.client_id IS NULL, 'NULL, ', CONCAT('"', NEW.client_id, '", ')), IF(NEW.staff_id IS NULL, 'NULL, ', CONCAT('"', NEW.staff_id, '", ')), IF(NEW.status_enum IS NULL, 'NULL, ', CONCAT('"', NEW.status_enum, '", ')), IF(NEW.mobile_no IS NULL, 'NULL, ', CONCAT('"', NEW.mobile_no, '", ')), IF(NEW.message IS NULL, 'NULL, ', CONCAT('"', NEW.message, '", ')), IF(NEW.campaign_id IS NULL, 'NULL, ', CONCAT('"', NEW.campaign_id, '", ')), IF(NEW.external_id IS NULL, 'NULL, ', CONCAT('"', NEW.external_id, '", ')), IF(NEW.submittedon_date IS NULL, 'NULL, ', CONCAT('"', NEW.submittedon_date, '", ')), IF(NEW.delivered_on_date IS NULL, 'NULL', CONCAT('"', NEW.delivered_on_date, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'sms_messages_outbound', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'group_id', NEW.group_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'client_id', NEW.client_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'staff_id', NEW.staff_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'status_enum', NEW.status_enum, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'mobile_no', NEW.mobile_no, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'message', NEW.message, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'campaign_id', NEW.campaign_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'external_id', NEW.external_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'submittedon_date', NEW.submittedon_date, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'delivered_on_date', NEW.delivered_on_date, NULL);
  END%%
DROP TRIGGER IF EXISTS sms_messages_outbound_u%%
CREATE TRIGGER `sms_messages_outbound_u`
AFTER UPDATE
  ON sms_messages_outbound
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE sms_messages_outbound SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', group_id = ', IF(NEW.group_id IS NULL, 'NULL', CONCAT('"', NEW.group_id, '"')), ', client_id = ', IF(NEW.client_id IS NULL, 'NULL', CONCAT('"', NEW.client_id, '"')), ', staff_id = ', IF(NEW.staff_id IS NULL, 'NULL', CONCAT('"', NEW.staff_id, '"')), ', status_enum = ', IF(NEW.status_enum IS NULL, 'NULL', CONCAT('"', NEW.status_enum, '"')), ', mobile_no = ', IF(NEW.mobile_no IS NULL, 'NULL', CONCAT('"', NEW.mobile_no, '"')), ', message = ', IF(NEW.message IS NULL, 'NULL', CONCAT('"', NEW.message, '"')), ', campaign_id = ', IF(NEW.campaign_id IS NULL, 'NULL', CONCAT('"', NEW.campaign_id, '"')), ', external_id = ', IF(NEW.external_id IS NULL, 'NULL', CONCAT('"', NEW.external_id, '"')), ', submittedon_date = ', IF(NEW.submittedon_date IS NULL, 'NULL', CONCAT('"', NEW.submittedon_date, '"')), ', delivered_on_date = ', IF(NEW.delivered_on_date IS NULL, 'NULL', CONCAT('"', NEW.delivered_on_date, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'sms_messages_outbound', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'group_id', OLD.group_id, NEW.group_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'client_id', OLD.client_id, NEW.client_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'staff_id', OLD.staff_id, NEW.staff_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'status_enum', OLD.status_enum, NEW.status_enum);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'mobile_no', OLD.mobile_no, NEW.mobile_no);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'message', OLD.message, NEW.message);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'campaign_id', OLD.campaign_id, NEW.campaign_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'external_id', OLD.external_id, NEW.external_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'submittedon_date', OLD.submittedon_date, NEW.submittedon_date);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'delivered_on_date', OLD.delivered_on_date, NEW.delivered_on_date);
  END%%


DROP TRIGGER IF EXISTS stretchy_parameter_d%%
CREATE TRIGGER `stretchy_parameter_d`
BEFORE DELETE
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM stretchy_parameter WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'stretchy_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_name', OLD.parameter_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_variable', OLD.parameter_variable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_label', OLD.parameter_label, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_displayType', OLD.parameter_displayType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_FormatType', OLD.parameter_FormatType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_default', OLD.parameter_default, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'special', OLD.special, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectOne', OLD.selectOne, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectAll', OLD.selectAll, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_sql', OLD.parameter_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_parameter_i%%
CREATE TRIGGER `stretchy_parameter_i`
AFTER INSERT
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO stretchy_parameter(id, parameter_name, parameter_variable, parameter_label, parameter_displayType, parameter_FormatType, parameter_default, special, selectOne, selectAll, parameter_sql, parent_id) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.parameter_name IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_name, '", ')), IF(NEW.parameter_variable IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_variable, '", ')), IF(NEW.parameter_label IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_label, '", ')), IF(NEW.parameter_displayType IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_displayType, '", ')), IF(NEW.parameter_FormatType IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_FormatType, '", ')), IF(NEW.parameter_default IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_default, '", ')), IF(NEW.special IS NULL, 'NULL, ', CONCAT('"', NEW.special, '", ')), IF(NEW.selectOne IS NULL, 'NULL, ', CONCAT('"', NEW.selectOne, '", ')), IF(NEW.selectAll IS NULL, 'NULL, ', CONCAT('"', NEW.selectAll, '", ')), IF(NEW.parameter_sql IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_sql, '", ')), IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'stretchy_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_name', NEW.parameter_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_variable', NEW.parameter_variable, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_label', NEW.parameter_label, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_displayType', NEW.parameter_displayType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_FormatType', NEW.parameter_FormatType, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_default', NEW.parameter_default, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'special', NEW.special, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'selectOne', NEW.selectOne, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'selectAll', NEW.selectAll, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_sql', NEW.parameter_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parent_id', NEW.parent_id, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_parameter_u%%
CREATE TRIGGER `stretchy_parameter_u`
AFTER UPDATE
  ON stretchy_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE stretchy_parameter SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', parameter_name = ', IF(NEW.parameter_name IS NULL, 'NULL', CONCAT('"', NEW.parameter_name, '"')), ', parameter_variable = ', IF(NEW.parameter_variable IS NULL, 'NULL', CONCAT('"', NEW.parameter_variable, '"')), ', parameter_label = ', IF(NEW.parameter_label IS NULL, 'NULL', CONCAT('"', NEW.parameter_label, '"')), ', parameter_displayType = ', IF(NEW.parameter_displayType IS NULL, 'NULL', CONCAT('"', NEW.parameter_displayType, '"')), ', parameter_FormatType = ', IF(NEW.parameter_FormatType IS NULL, 'NULL', CONCAT('"', NEW.parameter_FormatType, '"')), ', parameter_default = ', IF(NEW.parameter_default IS NULL, 'NULL', CONCAT('"', NEW.parameter_default, '"')), ', special = ', IF(NEW.special IS NULL, 'NULL', CONCAT('"', NEW.special, '"')), ', selectOne = ', IF(NEW.selectOne IS NULL, 'NULL', CONCAT('"', NEW.selectOne, '"')), ', selectAll = ', IF(NEW.selectAll IS NULL, 'NULL', CONCAT('"', NEW.selectAll, '"')), ', parameter_sql = ', IF(NEW.parameter_sql IS NULL, 'NULL', CONCAT('"', NEW.parameter_sql, '"')), ', parent_id = ', IF(NEW.parent_id IS NULL, 'NULL', CONCAT('"', NEW.parent_id, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'stretchy_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_name', OLD.parameter_name, NEW.parameter_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_variable', OLD.parameter_variable, NEW.parameter_variable);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_label', OLD.parameter_label, NEW.parameter_label);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_displayType', OLD.parameter_displayType, NEW.parameter_displayType);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_FormatType', OLD.parameter_FormatType, NEW.parameter_FormatType);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_default', OLD.parameter_default, NEW.parameter_default);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'special', OLD.special, NEW.special);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectOne', OLD.selectOne, NEW.selectOne);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'selectAll', OLD.selectAll, NEW.selectAll);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_sql', OLD.parameter_sql, NEW.parameter_sql);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parent_id', OLD.parent_id, NEW.parent_id);
  END%%


DROP TRIGGER IF EXISTS stretchy_report_d%%
CREATE TRIGGER `stretchy_report_d`
BEFORE DELETE
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM stretchy_report WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'stretchy_report', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_name', OLD.report_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_type', OLD.report_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_subtype', OLD.report_subtype, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_category', OLD.report_category, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_sql', OLD.report_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'core_report', OLD.core_report, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_report', OLD.use_report, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_report_i%%
CREATE TRIGGER `stretchy_report_i`
AFTER INSERT
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO stretchy_report(id, report_name, report_type, report_subtype, report_category, report_sql, description, core_report, use_report) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.report_name IS NULL, 'NULL, ', CONCAT('"', NEW.report_name, '", ')), IF(NEW.report_type IS NULL, 'NULL, ', CONCAT('"', NEW.report_type, '", ')), IF(NEW.report_subtype IS NULL, 'NULL, ', CONCAT('"', NEW.report_subtype, '", ')), IF(NEW.report_category IS NULL, 'NULL, ', CONCAT('"', NEW.report_category, '", ')), IF(NEW.report_sql IS NULL, 'NULL, ', CONCAT('"', NEW.report_sql, '", ')), IF(NEW.description IS NULL, 'NULL, ', CONCAT('"', NEW.description, '", ')), IF(NEW.core_report IS NULL, 'NULL, ', CONCAT('"', NEW.core_report, '", ')), IF(NEW.use_report IS NULL, 'NULL', CONCAT('"', NEW.use_report, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'stretchy_report', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_name', NEW.report_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_type', NEW.report_type, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_subtype', NEW.report_subtype, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_category', NEW.report_category, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_sql', NEW.report_sql, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'description', NEW.description, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'core_report', NEW.core_report, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'use_report', NEW.use_report, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_report_u%%
CREATE TRIGGER `stretchy_report_u`
AFTER UPDATE
  ON stretchy_report
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE stretchy_report SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', report_name = ', IF(NEW.report_name IS NULL, 'NULL', CONCAT('"', NEW.report_name, '"')), ', report_type = ', IF(NEW.report_type IS NULL, 'NULL', CONCAT('"', NEW.report_type, '"')), ', report_subtype = ', IF(NEW.report_subtype IS NULL, 'NULL', CONCAT('"', NEW.report_subtype, '"')), ', report_category = ', IF(NEW.report_category IS NULL, 'NULL', CONCAT('"', NEW.report_category, '"')), ', report_sql = ', IF(NEW.report_sql IS NULL, 'NULL', CONCAT('"', NEW.report_sql, '"')), ', description = ', IF(NEW.description IS NULL, 'NULL', CONCAT('"', NEW.description, '"')), ', core_report = ', IF(NEW.core_report IS NULL, 'NULL', CONCAT('"', NEW.core_report, '"')), ', use_report = ', IF(NEW.use_report IS NULL, 'NULL', CONCAT('"', NEW.use_report, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'stretchy_report', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_name', OLD.report_name, NEW.report_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_type', OLD.report_type, NEW.report_type);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_subtype', OLD.report_subtype, NEW.report_subtype);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_category', OLD.report_category, NEW.report_category);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_sql', OLD.report_sql, NEW.report_sql);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'description', OLD.description, NEW.description);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'core_report', OLD.core_report, NEW.core_report);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'use_report', OLD.use_report, NEW.use_report);
  END%%


DROP TRIGGER IF EXISTS stretchy_report_parameter_d%%
CREATE TRIGGER `stretchy_report_parameter_d`
BEFORE DELETE
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM stretchy_report_parameter WHERE id = "', OLD.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'stretchy_report_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_id', OLD.parameter_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_parameter_name', OLD.report_parameter_name, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_report_parameter_i%%
CREATE TRIGGER `stretchy_report_parameter_i`
AFTER INSERT
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO stretchy_report_parameter(id, report_id, parameter_id, report_parameter_name) VALUES(', IF(NEW.id IS NULL, 'NULL, ', CONCAT('"', NEW.id, '", ')), IF(NEW.report_id IS NULL, 'NULL, ', CONCAT('"', NEW.report_id, '", ')), IF(NEW.parameter_id IS NULL, 'NULL, ', CONCAT('"', NEW.parameter_id, '", ')), IF(NEW.report_parameter_name IS NULL, 'NULL', CONCAT('"', NEW.report_parameter_name, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'stretchy_report_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'id', NEW.id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_id', NEW.report_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'parameter_id', NEW.parameter_id, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'report_parameter_name', NEW.report_parameter_name, NULL);
  END%%
DROP TRIGGER IF EXISTS stretchy_report_parameter_u%%
CREATE TRIGGER `stretchy_report_parameter_u`
AFTER UPDATE
  ON stretchy_report_parameter
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE stretchy_report_parameter SET id = ', IF(NEW.id IS NULL, 'NULL', CONCAT('"', NEW.id, '"')), ', report_id = ', IF(NEW.report_id IS NULL, 'NULL', CONCAT('"', NEW.report_id, '"')), ', parameter_id = ', IF(NEW.parameter_id IS NULL, 'NULL', CONCAT('"', NEW.parameter_id, '"')), ', report_parameter_name = ', IF(NEW.report_parameter_name IS NULL, 'NULL', CONCAT('"', NEW.report_parameter_name, '"')), ' WHERE id = "', NEW.id, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'stretchy_report_parameter', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'id', OLD.id, NEW.id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_id', OLD.report_id, NEW.report_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'parameter_id', OLD.parameter_id, NEW.parameter_id);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'report_parameter_name', OLD.report_parameter_name, NEW.report_parameter_name);
  END%%


DROP TRIGGER IF EXISTS x_registered_table_d%%
CREATE TRIGGER `x_registered_table_d`
BEFORE DELETE
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM x_registered_table WHERE registered_table_name = "', OLD.registered_table_name, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'x_registered_table', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'registered_table_name', OLD.registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category', OLD.category, NULL);
  END%%
DROP TRIGGER IF EXISTS x_registered_table_i%%
CREATE TRIGGER `x_registered_table_i`
AFTER INSERT
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO x_registered_table(registered_table_name, application_table_name, category) VALUES(', IF(NEW.registered_table_name IS NULL, 'NULL, ', CONCAT('"', NEW.registered_table_name, '", ')), IF(NEW.application_table_name IS NULL, 'NULL, ', CONCAT('"', NEW.application_table_name, '", ')), IF(NEW.category IS NULL, 'NULL', CONCAT('"', NEW.category, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'x_registered_table', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'registered_table_name', NEW.registered_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'application_table_name', NEW.application_table_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'category', NEW.category, NULL);
  END%%
DROP TRIGGER IF EXISTS x_registered_table_u%%
CREATE TRIGGER `x_registered_table_u`
AFTER UPDATE
  ON x_registered_table
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE x_registered_table SET registered_table_name = ', IF(NEW.registered_table_name IS NULL, 'NULL', CONCAT('"', NEW.registered_table_name, '"')), ', application_table_name = ', IF(NEW.application_table_name IS NULL, 'NULL', CONCAT('"', NEW.application_table_name, '"')), ', category = ', IF(NEW.category IS NULL, 'NULL', CONCAT('"', NEW.category, '"')), ' WHERE registered_table_name = "', NEW.registered_table_name, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'x_registered_table', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'registered_table_name', OLD.registered_table_name, NEW.registered_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'application_table_name', OLD.application_table_name, NEW.application_table_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'category', OLD.category, NEW.category);
  END%%


DROP TRIGGER IF EXISTS x_table_column_code_mappings_d%%
CREATE TRIGGER `x_table_column_code_mappings_d`
BEFORE DELETE
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('DELETE FROM x_table_column_code_mappings WHERE column_alias_name = "', OLD.column_alias_name, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'DELETE', 'x_table_column_code_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'column_alias_name', OLD.column_alias_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NULL);
  END%%
DROP TRIGGER IF EXISTS x_table_column_code_mappings_i%%
CREATE TRIGGER `x_table_column_code_mappings_i`
AFTER INSERT
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('INSERT INTO x_table_column_code_mappings(column_alias_name, code_id) VALUES(', IF(NEW.column_alias_name IS NULL, 'NULL, ', CONCAT('"', NEW.column_alias_name, '", ')), IF(NEW.code_id IS NULL, 'NULL', CONCAT('"', NEW.code_id, '"')), ')') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'INSERT', 'x_table_column_code_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'column_alias_name', NEW.column_alias_name, NULL);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, after_value, before_value) VALUES (uuid(), _id, 'code_id', NEW.code_id, NULL);
  END%%
DROP TRIGGER IF EXISTS x_table_column_code_mappings_u%%
CREATE TRIGGER `x_table_column_code_mappings_u`
AFTER UPDATE
  ON x_table_column_code_mappings
FOR
EACH ROW
  BEGIN
    DECLARE _id VARCHAR(100);
    DECLARE _log_script TEXT;
    SELECT uuid() INTO _id FROM dual;
    SELECT CONCAT('UPDATE x_table_column_code_mappings SET column_alias_name = ', IF(NEW.column_alias_name IS NULL, 'NULL', CONCAT('"', NEW.column_alias_name, '"')), ', code_id = ', IF(NEW.code_id IS NULL, 'NULL', CONCAT('"', NEW.code_id, '"')), ' WHERE column_alias_name = "', NEW.column_alias_name, '"') INTO _log_script FROM dual;
    INSERT INTO tbl_audit (id, log_date, log_event, log_table, log_script) VALUES (_id, now(), 'UPDATE', 'x_table_column_code_mappings', _log_script);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'column_alias_name', OLD.column_alias_name, NEW.column_alias_name);
    INSERT INTO tbl_audit_value (id, audit_id, field_name, before_value, after_value) VALUES (uuid(), _id, 'code_id', OLD.code_id, NEW.code_id);
  END%%


